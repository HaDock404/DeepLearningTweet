{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/interfaces/types.ts"],"names":[],"mappings":"","sourcesContent":["/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { IPromise } from \"./IPromise\";\r\n\r\n/**\r\n * A function to be executed during the creation of a promise instance. It receives two functions as parameters: resolve and reject.\r\n * Any errors thrown in the executor will cause the promise to be rejected, and the return value will be neglected. The semantics of executor are detailed below.\r\n * @param resolve - The handler function that should be called when the operation has completed and the promise can continue.\r\n * @param reject - The handler function that should be called to cause the promise to be rejected.\r\n */\r\nexport type PromiseExecutor<T> = (resolve: ResolvePromiseHandler<T>, reject: RejectPromiseHandler) => void;\r\n\r\n/**\r\n* This defines the handler function for when a promise is resolved.\r\n* @param value This is the value passed as part of resolving the Promise\r\n* @return This may return a value, another Promise or void. @see {@link IPromise.then} for how the value is handled.\r\n */\r\nexport type ResolvedPromiseHandler<T, TResult1 = T> = (((value: T) => TResult1 | IPromise<TResult1> | PromiseLike<TResult1>) | undefined | null);\r\n\r\n/**\r\n* This defines the handler function for when a promise is rejected.\r\n* @param value This is the value passed as part of resolving the Promise\r\n* @return This may return a value, another Promise or void. @see {@link IPromise.then} for how the value is handled.\r\n*/\r\nexport type RejectedPromiseHandler<T = never> = (((reason: any) => T | IPromise<T> | PromiseLike<T>) | undefined | null);\r\n\r\n/**\r\n * This defines the handler function that is called via the finally when the promise is resolved or rejected\r\n */\r\nexport type FinallyPromiseHandler = (() => void) | undefined | null;\r\n\r\n/**\r\n * Defines the signature of the resolve function passed to the resolverFunc (in the Promise constructor)\r\n * @param value The value to resolve the Promise with\r\n * @returns Nothing\r\n */\r\nexport type ResolvePromiseHandler<T> = (value: T | IPromise<T> | PromiseLike<T>) => void;\r\n \r\n/**\r\n * Defines the signature of the reject function passed to the resolverFunc (in the Promise constructor)\r\n * @param value The value to reject the Promise with\r\n * @returns Nothing\r\n */\r\nexport type RejectPromiseHandler = (reason?: any) => void;\r\n\r\n/**\r\n * Defines the signature of a function that creates a Promise.\r\n * @param newExecutor - The executor to run in the context of the promise\r\n * @param extraArgs - Any extra arguments that can be passed to the creator\r\n * @returns A Promise `IPromise` implemenetation\r\n */\r\nexport type PromiseCreatorFn = <T, TResult2 = never>(newExecutor: PromiseExecutor<T>, ...extraArgs: any) => IPromise<T | TResult2>;\r\n\r\n/**\r\n * Identifies the function to call to start and execute the task when its\r\n * ready to be executed.\r\n * @since 0.2.0\r\n * @group Scheduler\r\n * @param taskName - The optional task name that was assigned to this task, it is passed by the task scheduler.\r\n * @returns The result or a IPromise that will be resolved / rejected when the task\r\n * was completed.\r\n * @example\r\n * ```ts\r\n * function taskFunc1() {\r\n *     return 42;\r\n * }\r\n *\r\n * function taskFunc2(taskName: string) {\r\n *     console.log(\"Running Task: \" + taskName);\r\n *     return fetch(\"https://example.com/xxxx\").then((response) => {\r\n *         // ...\r\n *     });\r\n * }\r\n *\r\n * function taskFunc3() {\r\n *     return Promise.all([...]);\r\n * }\r\n *\r\n * function taskFunc4() {\r\n *     return createAllPromise([...]);\r\n * }\r\n *\r\n * function taskFunc5(taskName: string) {\r\n *     return createPromise(() => {\r\n *         scheduleTimeout(() => {\r\n *             console.log(\"Completing task: \" + taskName);\r\n *             resolve(true);\r\n *         }, 100);\r\n *     });\r\n * }\r\n * ```\r\n */\r\nexport type StartQueuedTaskFn<T> = (taskName?: string) => T | IPromise<T>;\r\n"]}