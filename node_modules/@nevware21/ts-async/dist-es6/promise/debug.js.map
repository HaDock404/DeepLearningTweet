{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../src/promise/debug.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,IAAI,WAAgB,CAAC;AACrB,IAAI,YAAiB,CAAC;AACtB,IAAI,aAAkB,CAAC;AAMvB,MAAM,CAAC,IAAI,oBAAoB,GAAG,KAAK,CAAC;AAExC,IAAI,UAAU,GAA0C,IAAI,CAAC;AAO7D,MAAM,UAAU,SAAS,CAAC,EAAU,EAAE,OAAe;AAMrD,CAAC;AAaD,MAAM,UAAU,cAAc,CAAC,UAAe,EAAE,OAAqB,EAAE,QAAsB,EAAE,SAAwB;IAGnH,WAAW,GAAG,WAAW,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,kBAAkB,EAAE,CAAC;IACpE,YAAY,GAAG,YAAY,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,mBAAmB,EAAE,CAAC;IACvE,aAAa,GAAG,aAAa,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,sBAAsB,EAAE,CAAC;IAE5E,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;IACzD,aAAa,CAAC,UAAU,EAAE,YAAY,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC3D,aAAa,CAAC,UAAU,EAAE,aAAa,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;AACjE,CAAC;AAoCD,MAAM,UAAU,oBAAoB,CAAC,OAAgB,EAAE,MAA8C;IACjG,oBAAoB,GAAG,OAAO,CAAC;IAC/B,UAAU,GAAG,MAAM,CAAC;AACxB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { objDefineProp } from \"@nevware21/ts-utils\";\r\n\r\nlet _debugState: any;\r\nlet _debugResult: any;\r\nlet _debugHandled: any;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nexport let _promiseDebugEnabled = false;\r\n\r\nlet _theLogger: (id: string, message: string) => void = null;\r\n\r\n/**\r\n * @internal\r\n * @ignore Internal function enable logging the internal state of the promise during execution, this code and references are\r\n * removed from the production artifacts\r\n */\r\nexport function _debugLog(id: string, message: string) {\r\n    //#ifdef DEBUG\r\n    //#:(!DEBUG) if (_theLogger) {\r\n    //#:(!DEBUG)     _theLogger(id, message);\r\n    //#:(!DEBUG) }\r\n    //#endif\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal function to add the debug state to the promise so that it provides simular visibility as you would\r\n * see from native promises\r\n * @param thePromise - The Promise implementation\r\n * @param stateFn - The function to return the state of the promise\r\n * @param resultFn - The function to return the result (settled value) of the promise\r\n * @param handledFn - The function to return whether the promise has been handled (used for throwing\r\n * unhandled rejection events)\r\n */\r\nexport function _addDebugState(thePromise: any, stateFn: () => string, resultFn: () => string, handledFn: () => boolean) {\r\n    // While the IPromise implementations provide a `state` property, keeping the `[[PromiseState]]`\r\n    // as native promises also have a non-enumerable property of the same name\r\n    _debugState = _debugState || { toString: () => \"[[PromiseState]]\" };\r\n    _debugResult = _debugResult || { toString: () => \"[[PromiseResult]]\" };\r\n    _debugHandled = _debugHandled || { toString: () => \"[[PromiseIsHandled]]\" };\r\n    \r\n    objDefineProp(thePromise, _debugState, { get: stateFn });\r\n    objDefineProp(thePromise, _debugResult, { get: resultFn });\r\n    objDefineProp(thePromise, _debugHandled, { get: handledFn });\r\n}\r\n\r\n/**\r\n * Debug helper to enable internal debugging of the promise implementations. Disabled by default.\r\n * For the generated packages included in the npm package the `logger` will not be called as the\r\n * `_debugLog` function that uses this logger is removed during packaging.\r\n *\r\n * It is available directly from the repository for unit testing.\r\n *\r\n * @group Debug\r\n * @param enabled - Should debugging be enabled (defaults `false`, when `true` promises will have\r\n * additional debug properties and the `toString` will include extra details.\r\n * @param logger - Optional logger that will log internal state changes, only called in debug\r\n * builds as the calling function is removed is the production artifacts.\r\n * @example\r\n * ```ts\r\n * // The Id is the id of the promise\r\n * // The message is the internal debug message\r\n * function promiseDebugLogger(id: string, message: string) {\r\n *     if (console && console.log) {\r\n *         console.log(id, message);\r\n *     }\r\n * }\r\n *\r\n * setPromiseDebugState(true, promiseDebugLogger);\r\n *\r\n * // While the logger will not be called for the production packages\r\n * // Setting the `enabled` flag to tru will cause each promise to have\r\n * // the following additional properties added\r\n * // [[PromiseState]]; => Same as the `state` property\r\n * // [[PromiseResult]]; => The settled value\r\n * // [[PromiseIsHandled]] => Identifies if the promise has been handled\r\n * // It will also cause the `toString` for the promise to include additional\r\n * // debugging information\r\n * ```\r\n */\r\nexport function setPromiseDebugState(enabled: boolean, logger?: (id: string, message: string) => void) {\r\n    _promiseDebugEnabled = enabled;\r\n    _theLogger = logger;\r\n}"]}