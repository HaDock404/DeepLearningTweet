import { dumpObj, getDocument, safeGetLazy, getInst } from "@nevware21/ts-utils";
const DISPATCH_EVENT = "dispatchEvent";
let _hasInitEvent;
export function emitEvent(target, evtName, populateEvent, useNewEvent) {
    let doc = getDocument();
    !_hasInitEvent && (_hasInitEvent = safeGetLazy(() => {
        let evt;
        if (doc && doc.createEvent) {
            evt = doc.createEvent("Event");
        }
        return (!!evt && evt.initEvent);
    }, null));
    let theEvt = _hasInitEvent.v ? doc.createEvent("Event") : (useNewEvent ? new Event(evtName) : {});
    populateEvent && populateEvent(theEvt);
    if (_hasInitEvent.v) {
        theEvt.initEvent(evtName, false, true);
    }
    if (theEvt && target[DISPATCH_EVENT]) {
        target[DISPATCH_EVENT](theEvt);
    }
    else {
        let handler = target["on" + evtName];
        if (handler) {
            handler(theEvt);
        }
        else {
            let theConsole = getInst("console");
            theConsole && (theConsole["error"] || theConsole["log"])(evtName, dumpObj(theEvt));
        }
    }
}
//# sourceMappingURL=event.js.map