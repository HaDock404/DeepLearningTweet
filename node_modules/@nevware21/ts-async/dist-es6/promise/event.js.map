{"version":3,"file":"event.js","sourceRoot":"","sources":["../../src/promise/event.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAc,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAE7F,MAAM,cAAc,GAAG,eAAe,CAAC;AACvC,IAAI,aAAkC,CAAC;AAUvC,MAAM,UAAU,SAAS,CAAC,MAAW,EAAE,OAAe,EAAE,aAAmD,EAAE,WAAoB;IAE7H,IAAI,GAAG,GAAG,WAAW,EAAE,CAAC;IACxB,CAAC,aAAa,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,GAAG,EAAE;QAChD,IAAI,GAAQ,CAAC;QACb,IAAI,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE;YACxB,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SAClC;QAED,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAEV,IAAI,MAAM,GAAU,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAW,CAAC,CAAC;IAClH,aAAa,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;IAEvC,IAAI,aAAa,CAAC,CAAC,EAAE;QACjB,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KAC1C;IAED,IAAI,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;QAClC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,CAAC;KAClC;SAAM;QACH,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;QACrC,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,MAAM,CAAC,CAAC;SACnB;aAAM;YACH,IAAI,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;YACpC,UAAU,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SACtF;KACJ;AACL,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { dumpObj, getDocument, safeGetLazy, ILazyValue, getInst } from \"@nevware21/ts-utils\";\r\n\r\nconst DISPATCH_EVENT = \"dispatchEvent\";\r\nlet _hasInitEvent: ILazyValue<boolean>;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * @param target\r\n * @param evtName\r\n * @param populateEvent\r\n * @param useNewEvent\r\n */\r\nexport function emitEvent(target: any, evtName: string, populateEvent: (theEvt: Event | any) => Event | any, useNewEvent: boolean) {\r\n\r\n    let doc = getDocument();\r\n    !_hasInitEvent && (_hasInitEvent = safeGetLazy(() => {\r\n        let evt: any;\r\n        if (doc && doc.createEvent) {\r\n            evt = doc.createEvent(\"Event\");\r\n        }\r\n        \r\n        return (!!evt && evt.initEvent);\r\n    }, null));\r\n\r\n    let theEvt: Event = _hasInitEvent.v ? doc.createEvent(\"Event\") : (useNewEvent ? new Event(evtName) : {} as Event);\r\n    populateEvent && populateEvent(theEvt);\r\n\r\n    if (_hasInitEvent.v) {\r\n        theEvt.initEvent(evtName, false, true);\r\n    }\r\n\r\n    if (theEvt && target[DISPATCH_EVENT]) {\r\n        target[DISPATCH_EVENT](theEvt);\r\n    } else {\r\n        let handler = target[\"on\" + evtName];\r\n        if (handler) {\r\n            handler(theEvt);\r\n        } else {\r\n            let theConsole = getInst(\"console\");\r\n            theConsole && (theConsole[\"error\"] || theConsole[\"log\"])(evtName, dumpObj(theEvt));\r\n        }\r\n    }\r\n}\r\n"]}