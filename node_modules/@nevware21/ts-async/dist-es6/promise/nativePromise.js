import { createAsyncPromise } from "./asyncPromise";
import { _createAllPromise, _createRejectedPromise, _createResolvedPromise } from "./base";
import { STRING_STATES } from "../internal/state";
import { dumpObj, lazySafeGetInst, isFunction, objDefineProp, throwTypeError } from "@nevware21/ts-utils";
import { STR_PROMISE } from "../internal/constants";
let _isPromiseSupported;
export function createNativePromise(executor, timeout) {
    !_isPromiseSupported && (_isPromiseSupported = lazySafeGetInst(STR_PROMISE));
    const PrmCls = _isPromiseSupported.v;
    if (!PrmCls) {
        return createAsyncPromise(executor);
    }
    if (!isFunction(executor)) {
        throwTypeError(STR_PROMISE + ": executor is not a function - " + dumpObj(executor));
    }
    let _state = 0;
    function _strState() {
        return STRING_STATES[_state];
    }
    let thePromise = new PrmCls((resolve, reject) => {
        function _resolve(value) {
            _state = 2;
            resolve(value);
        }
        function _reject(reason) {
            _state = 3;
            reject(reason);
        }
        executor(_resolve, _reject);
    });
    objDefineProp(thePromise, "state", {
        get: _strState
    });
    return thePromise;
}
export const createNativeAllPromise = _createAllPromise(createNativePromise);
export const createNativeResolvedPromise = _createResolvedPromise(createNativePromise);
export const createNativeRejectedPromise = _createRejectedPromise(createNativePromise);
//# sourceMappingURL=nativePromise.js.map