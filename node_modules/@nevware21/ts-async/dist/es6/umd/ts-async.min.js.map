{"version":3,"file":"ts-async.min.js","sources":["../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/internal/constants.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/base.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/get_own_prop_desc.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/has_own.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/has_own_prop.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/for_each_key.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/throw.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/object.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/symbol/well_known.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/enum.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/internal/map.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/string/as_string.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/internal/global.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/diagnostics.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/internal/unwrapFunction.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/polyfills/symbol.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/define.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/lazy.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/safe_lazy.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/safe_get.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/environment.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/symbol/symbol.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/funcs/fnApply.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/array/forEach.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/array/indexOf.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/array/slice.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/create.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/object/set_proto.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/customError.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/date.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/length.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/helpers/perf.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/timer/handler.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/timer/timeout.js","../../../../common/temp/node_modules/@nevware21/ts-utils/dist-es6/timer/idle.js","../../../dist-es6/promise/await.js","../../../dist-es6/promise/debug.js","../../../dist-es6/internal/state.js","../../../dist-es6/promise/event.js","../../../dist-es6/internal/constants.js","../../../dist-es6/promise/base.js","../../../dist-es6/promise/itemProcessor.js","../../../dist-es6/promise/asyncPromise.js","../../../dist-es6/promise/nativePromise.js","../../../dist-es6/promise/syncPromise.js","../../../dist-es6/promise/idlePromise.js","../../../dist-es6/promise/promise.js","../../../dist-es6/scheduler/taskScheduler.js"],"sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n// These constants are currently NOT exported directly, we may export them later associated with a frozen namespace (maybe)\r\n// For now do NOT expect that we will export these values.\r\nexport const UNDEF_VALUE = undefined;\r\nexport const NULL_VALUE = null;\r\nexport const EMPTY = \"\";\r\nexport const BOOLEAN = \"boolean\";\r\nexport const FUNCTION = \"function\";\r\nexport const NUMBER = \"number\";\r\nexport const OBJECT = \"object\";\r\nexport const PROTOTYPE = \"prototype\";\r\nexport const __PROTO__ = \"__proto__\";\r\nexport const STRING = \"string\";\r\nexport const UNDEFINED = \"undefined\";\r\nexport const CONSTRUCTOR = \"constructor\";\r\nexport const SYMBOL = \"Symbol\";\r\nexport const POLYFILL_TAG = \"_polyfill\";\r\nexport const INDEX_OF = \"indexOf\";\r\nexport const LAST_INDEX_OF = \"lastIndexOf\";\r\nexport const LENGTH = \"length\";\r\nexport const DONE = \"done\";\r\nexport const VALUE = \"value\";\r\nexport const NAME = \"name\";\r\nexport const SLICE = \"slice\";\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjClass = Object;\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjProto = ObjClass[PROTOTYPE];\r\n/**\r\n * @ignore\r\n */\r\nexport const StrCls = String;\r\n/**\r\n * @ignore\r\n */\r\nexport const StrProto = StrCls[PROTOTYPE];\r\n/**\r\n * @ignore\r\n */\r\nexport const MathCls = Math;\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrCls = Array;\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrProto = ArrCls[PROTOTYPE];\r\n//# sourceMappingURL=constants.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrCls, BOOLEAN, FUNCTION, NULL_VALUE, NUMBER, OBJECT, ObjProto, STRING, UNDEFINED, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { safeGet } from \"./safe_get\";\r\nconst PRIMITIVE_TYPES = [STRING, NUMBER, BOOLEAN, UNDEFINED, \"symbol\", \"bigint\"];\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the provided type.\r\n * @param theType - The type to match against the `typeof value`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\nexport function _createIs(theType) {\r\n    return function (value) {\r\n        return typeof value === theType;\r\n    };\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the object type specified based on {@link objToString}.\r\n * @param - The object name to match for the `objToString(value)`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\nexport function _createObjIs(theName) {\r\n    const theType = \"[object \" + theName + \"]\";\r\n    return function (value) {\r\n        return !!(value && objToString(value) === theType);\r\n    };\r\n}\r\n/**\r\n * The `objToString()` method returns a string representing the object. This explicitly\r\n * always calls the `Object.prototype.toString()` method.\r\n *\r\n * An object's toString() method is most commonly invoked when that object undergoes:\r\n * - explicit type conversion to a string (for example, String(myObject))\r\n * - implicit type coercion into a string (for example, myObject + \"hello world\")\r\n *\r\n * @group Object\r\n * @param value - The object to be converted into a string\r\n * @returns A string representation of the object\r\n * @example\r\n * ```ts\r\n * objToString(new Date()); // [object Date]\r\n * objToString(new String()); // [object String]\r\n *\r\n * // Math has its Symbol.toStringTag\r\n * objToString(Math); // [object Math]\r\n *\r\n * objToString(undefined); // [object Undefined]\r\n * objToString(null); // [object Null]\r\n * ```\r\n */\r\nexport function objToString(value) {\r\n    return ObjProto.toString.call(value);\r\n}\r\n/**\r\n * Validate if the provided value object is of the expected type\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @param theType - The expected type name as a string\r\n * @returns `true` if the value matches the provided type\r\n */\r\nexport function isTypeof(value, theType) {\r\n    return typeof value === theType;\r\n}\r\n/**\r\n * Checks if the provided value is undefined or contains the string value \"undefined\",\r\n * if you want to consider the string value as undefined see {@link isStrictUndefined}\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns true if the value is undefined or \"undefined\", otherwise false\r\n * @example\r\n * ```ts\r\n * isUndefined(undefined);              // true\r\n * isUndefined(\"undefined\");            // true\r\n *\r\n * isUndefined(null);                   // false\r\n * isUndefined(\"null\");                 // false\r\n * isUndefined(\"1\");                    // false\r\n * isUndefined(\"aa\");                   // false\r\n * isUndefined(new Date());             // false\r\n * isUndefined(1);                      // false\r\n * isUndefined(\"\");                     // false\r\n * isUndefined(_dummyFunction);         // false\r\n * isUndefined([]);                     // false\r\n * isUndefined(new Array(1));           // false\r\n * isUndefined(true);                   // false\r\n * isUndefined(false);                  // false\r\n * isUndefined(\"true\");                 // false\r\n * isUndefined(\"false\");                // false\r\n * isUndefined(new Boolean(true));      // false\r\n * isUndefined(new Boolean(false));     // false\r\n * isUndefined(new Boolean(\"true\"));    // false\r\n * isUndefined(new Boolean(\"false\"));   // false\r\n * isUndefined(Boolean(true));          // false\r\n * isUndefined(Boolean(false));         // false\r\n * isUndefined(Boolean(\"true\"));        // false\r\n * isUndefined(Boolean(\"false\"));       // false\r\n * isUndefined(new RegExp(\"\"));         // false\r\n * isUndefined(new ArrayBuffer(0));     // false\r\n * isUndefined(new Error(\"Test Error\"));// false\r\n * isUndefined(new TypeError(\"Test TypeError\"));    // false\r\n * isUndefined(new TestError(\"Test TestError\"));    // false\r\n * isUndefined(_dummyError());          // false\r\n * isUndefined(Promise.reject());       // false\r\n * isUndefined(Promise.resolve());      // false\r\n * isUndefined(new Promise(() => {}));  // false\r\n * isUndefined(_simplePromise());       // false\r\n * isUndefined(_simplePromiseLike());   // false\r\n * isUndefined(Object.create(null));    // false\r\n * isUndefined(polyObjCreate(null));    // false\r\n * ```\r\n */\r\nexport function isUndefined(value) {\r\n    return typeof value === UNDEFINED || value === UNDEFINED;\r\n}\r\n/**\r\n * Checks if the provided value is undefined, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns true if the typeof value === UNDEFINED\r\n * @example\r\n * ```ts\r\n * isStrictUndefined(undefined);    // true\r\n *\r\n * isStrictUndefined(null);         // false\r\n * isStrictUndefined(\"null\");       // false\r\n * isStrictUndefined(\"undefined\");  // false\r\n * isStrictUndefined(\"1\");          // false\r\n * isStrictUndefined(\"aa\");         // false\r\n * isStrictUndefined(new Date());   // false\r\n * isStrictUndefined(0);            // false\r\n * isStrictUndefined(1);            // false\r\n * isStrictUndefined(\"\");           // false\r\n * ```\r\n */\r\nexport function isStrictUndefined(arg) {\r\n    return !isDefined(arg);\r\n}\r\n/**\r\n * Checks if the provided value is null, undefined or contains the string value of \"undefined\".\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns `true` if the value is `null` or `undefined`\r\n * @example\r\n * ```ts\r\n * isNullOrUndefined(null);         // true\r\n * isNullOrUndefined(undefined);    // true\r\n * isNullOrUndefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isNullOrUndefined(value);        // true\r\n *\r\n * isNullOrUndefined(\"\");           // false\r\n * isNullOrUndefined(0);            // false\r\n * isNullOrUndefined(new Date());   // false\r\n * isNullOrUndefined(true);         // false\r\n * isNullOrUndefined(false);        // false\r\n * ```\r\n */\r\nexport function isNullOrUndefined(value) {\r\n    return value === NULL_VALUE || isUndefined(value);\r\n}\r\n/**\r\n * Checks if the provided value is null, undefined only, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isStrictNullOrUndefined(null);         // true\r\n * isStrictNullOrUndefined(undefined);    // true\r\n * isStrictNullOrUndefined(\"undefined\");  // false\r\n *\r\n * let value = null;\r\n * isStrictNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isStrictNullOrUndefined(value);        // true\r\n *\r\n * isStrictNullOrUndefined(\"\");           // false\r\n * isStrictNullOrUndefined(0);            // false\r\n * isStrictNullOrUndefined(new Date());   // false\r\n * isStrictNullOrUndefined(true);         // false\r\n * isStrictNullOrUndefined(false);        // false\r\n * ```\r\n */\r\nexport function isStrictNullOrUndefined(value) {\r\n    return value === NULL_VALUE || !isDefined(value);\r\n}\r\n/**\r\n * Checks if the passed value is defined, which means it has any value and is not undefined.\r\n * A string value of \"undefined\" is considered to be defined.\r\n * @group Value Check\r\n * @param arg - The value to check\r\n * @returns true if arg has a value (is not === undefined)\r\n * @example\r\n * ```ts\r\n * isDefined(null);         // false\r\n * isDefined(undefined);    // false\r\n * isDefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isDefined(value);        // false\r\n * let value = undefined;\r\n * isDefined(value);        // false\r\n *\r\n * isDefined(\"\");           // true\r\n * isDefined(0);            // true\r\n * isDefined(new Date());   // true\r\n * isDefined(true);         // true\r\n * isDefined(false);        // true\r\n * ```\r\n */\r\nexport function isDefined(arg) {\r\n    return !!arg || arg !== UNDEF_VALUE;\r\n}\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 7 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - null\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @param value - The value to check whether it's a primitive value\r\n * @example\r\n * ```ts\r\n * isPrimitive(null);                   // true\r\n * isPrimitive(undefined);              // true\r\n * isPrimitive(\"null\");                 // true\r\n * isPrimitive(\"undefined\");            // true\r\n * isPrimitive(\"1\");                    // true\r\n * isPrimitive(\"aa\");                   // true\r\n * isPrimitive(1);                      // true\r\n * isPrimitive(Number(2));              // true\r\n * isPrimitive(\"\");                     // true\r\n * isPrimitive(String(\"\"));             // true\r\n * isPrimitive(true);                   // true\r\n * isPrimitive(false);                  // true\r\n * isPrimitive(\"true\");                 // true\r\n * isPrimitive(\"false\");                // true\r\n * isPrimitive(BigInt(42));             // true\r\n * isPrimitive(Symbol.for(\"Hello\"));    // true\r\n *\r\n * isPrimitive(new String(\"aa\"));       // false\r\n * isPrimitive(new Date());             // false\r\n * isPrimitive(_dummyFunction);         // false\r\n * isPrimitive([]);                     // false\r\n * isPrimitive(new Array(1));           // false\r\n * isPrimitive(new Boolean(true));      // false\r\n * isPrimitive(new Boolean(false));     // false\r\n * isPrimitive(new Boolean(\"true\"));    // false\r\n * isPrimitive(new Boolean(\"false\"));   // false\r\n * ```\r\n */\r\nexport const isPrimitive = (value) => {\r\n    return value === NULL_VALUE || isPrimitiveType(typeof value);\r\n};\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 6 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.9.6\r\n * @group Type Identity\r\n * @param theType - The type as a string value to be checked whther it's a primitive type, this should be the value\r\n * returned from `typeof value`.\r\n * @example\r\n * ```ts\r\n * isPrimitiveType(null);                   // false\r\n * isPrimitiveType(undefined);              // false\r\n * isPrimitiveType(\"null\");                 // false\r\n * isPrimitiveType(\"undefined\");            // false\r\n * isPrimitiveType(\"1\");                    // false\r\n * isPrimitiveType(\"aa\");                   // false\r\n * isPrimitiveType(1);                      // false\r\n * isPrimitiveType(Number(2));              // false\r\n * isPrimitiveType(\"\");                     // false\r\n * isPrimitiveType(String(\"\"));             // false\r\n * isPrimitiveType(true);                   // false\r\n * isPrimitiveType(false);                  // false\r\n * isPrimitiveType(\"true\");                 // false\r\n * isPrimitiveType(\"false\");                // false\r\n * isPrimitiveType(BigInt(42));             // false\r\n * isPrimitiveType(Symbol.for(\"Hello\"));    // false\r\n *\r\n * isPrimitiveType(\"string\");               // true\r\n * isPrimitiveType(\"number\");               // true\r\n * isPrimitiveType(\"boolean\");              // true\r\n * isPrimitiveType(\"undefined\");            // true\r\n * isPrimitiveType(\"symbol\");               // true\r\n * isPrimitiveType(\"bigint\");               // true\r\n * ```\r\n */\r\nexport const isPrimitiveType = (theType) => {\r\n    return theType !== OBJECT && PRIMITIVE_TYPES.indexOf(theType) !== -1;\r\n};\r\n/**\r\n * Checks to see if the past value is a string value\r\n * @group Type Identity\r\n * @group String\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isString(\"\");            // true\r\n * isString(\"null\");        // true\r\n * isString(\"undefined\");   // true\r\n * isString(String(\"\"));    // true\r\n *\r\n * isString(null);          // false\r\n * isString(undefined);     // false\r\n * isString(0);             // false\r\n * ```\r\n */\r\nexport const isString = _createIs(STRING);\r\n/**\r\n * Checks to see if the past value is a function value\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * function myFunction() { }\r\n * isFunction(null);            // false\r\n * isFunction(undefined);       // false\r\n * isFunction(\"null\");          // false\r\n * isFunction(\"undefined\");     // false\r\n * isFunction(\"1\");             // false\r\n * isFunction(\"aa\");            // false\r\n * isFunction(new Date());      // false\r\n * isFunction(1);               // false\r\n * isFunction(\"\");              // false\r\n * isFunction(myFunction);      // true\r\n * isFunction([]);              // false\r\n * isFunction(new Array(1));    // false\r\n * ```\r\n */\r\nexport const isFunction = _createIs(FUNCTION);\r\n/**\r\n * Checks to see if the past value is an object value\r\n * @group Type Identity\r\n * @group Object\r\n * @typeParam T - The object type, defaults to any\r\n * @param value - The value to check\r\n * @returns\r\n */\r\nexport function isObject(value) {\r\n    if (!value && isNullOrUndefined(value)) {\r\n        return false;\r\n    }\r\n    return !!value && typeof value === OBJECT;\r\n}\r\n/**\r\n * Checks if the type of value is an Array.\r\n *\r\n * @group Type Identity\r\n * @group Array\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Array, false otherwise.\r\n * @example\r\n * ```ts\r\n * import { isArray, isObject } from \"@nevware21/ts-utils\";\r\n *\r\n * function performAction(value: any) {\r\n *     if (isArray(value) || isObject(value)) {\r\n *         // Do something\r\n *     } else {\r\n *         // Do something else\r\n *     }\r\n * }\r\n * ```\r\n */\r\nexport const isArray = ArrCls.isArray;\r\n/**\r\n * Check if an object is of type Date\r\n * @group Type Identity\r\n * @example\r\n * ```ts\r\n * import { isDate } from \"@nevware21/ts-utils\";\r\n *\r\n * let _theDate = null;\r\n *\r\n * function getSetDate(newDate?: any) {\r\n *     _theDate = isDate(newDate) ? newDate : new Date();\r\n *\r\n *     return _theDate;\r\n * }\r\n * ```\r\n */\r\nexport const isDate = _createObjIs(\"Date\");\r\n/**\r\n * Checks if the type of value is a number.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nexport const isNumber = _createIs(NUMBER);\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nexport const isBoolean = _createIs(BOOLEAN);\r\n/**\r\n * Determines if a value is a regular expression object.\r\n * @group Type Identity\r\n * @param {*} value Reference to check.\r\n * @returns {boolean} True if `value` is a `RegExp`.\r\n */\r\nexport const isRegExp = _createObjIs(\"RegExp\");\r\n/**\r\n * Checks if the type of value is a File object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a File, false otherwise.\r\n */\r\nexport const isFile = _createObjIs(\"File\");\r\n/**\r\n * Checks if the type of value is a FormData object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a FormData, false otherwise.\r\n */\r\nexport const isFormData = _createObjIs(\"FormData\");\r\n/**\r\n * Checks if the type of value is a Blob object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Blob, false otherwise.\r\n */\r\nexport const isBlob = _createObjIs(\"Blob\");\r\n/**\r\n * Checks if the type of value is a ArrayBuffer object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a ArrayBuffer, false otherwise.\r\n */\r\nexport const isArrayBuffer = _createObjIs(\"ArrayBuffer\");\r\n/**\r\n * Checks if the type of value is a Error object.\r\n * @group Type Identity\r\n * @group Error\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Error, false otherwise.\r\n */\r\nexport const isError = _createObjIs(\"Error\");\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a PromiseLike, false otherwise.\r\n */\r\nexport function isPromiseLike(value) {\r\n    return !!value && isFunction(value.then);\r\n}\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * This is an alias for {@link isPromiseLike}.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a PromiseLike, false otherwise.\r\n */\r\nexport const isThenable = isPromiseLike;\r\n/**\r\n * Checks if the type of value is a Promise instance (contains then and catch functions).\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Promise, false otherwise.\r\n */\r\nexport function isPromise(value) {\r\n    return isPromiseLike(value) && isFunction(value.catch);\r\n}\r\n/**\r\n * Checks if the type of value does not evaluate to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is not truthy, false otherwise.\r\n */\r\nexport function isNotTruthy(value) {\r\n    return !value || !safeGet(() => (value && (0 + value)), value);\r\n}\r\n/**\r\n * Checks if the type of value evaluates to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is not truthy, false otherwise.\r\n */\r\nexport function isTruthy(value) {\r\n    // Objects created with no prototype (Object.create(null)) cannot be converted to primitives\r\n    // Which causes this code to throw, additionally just using !! also fails for Boolean objects\r\n    // !!(new Boolean(false)) evaluates to true\r\n    return !(!value || safeGet(() => !(value && (0 + value)), !value));\r\n    //return !(!value || !(value && (0 + value)));\r\n}\r\n//# sourceMappingURL=base.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjClass } from \"../internal/constants\";\r\n/**\r\n * The objGetOwnPropertyDescriptor() method returns an object describing the configuration of a specific property on\r\n * a given object (that is, one directly present on an object and not in the object's prototype chain). The object\r\n * returned is mutable but mutating it has no effect on the original property's configuration.\r\n * @since 0.4.3\r\n * @group Object\r\n * @param target - Object that contains the property.\r\n * @param prop - Name of the property.\r\n * @returns A property descriptor of the given property if it exists on the object, otherwise undefined.\r\n *\r\n * @example\r\n * ```ts\r\n * o = {};\r\n * objDefineProp(o, 'qux', {\r\n *   value: 8675309,\r\n *   writable: false,\r\n *   enumerable: false\r\n * });\r\n * d = objGetOwnPropertyDescriptor(o, 'qux');\r\n * // d is {\r\n * //   value: 8675309,\r\n * //   writable: false,\r\n * //   enumerable: false,\r\n * //   configurable: false\r\n * // }\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // TypeError: \"foo\" is not an object  // ES5 code\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // Object returned by ES2015 code: {\r\n * //   configurable: false,\r\n * //   enumerable: true,\r\n * //   value: \"f\",\r\n * //   writable: false\r\n * // }\r\n * ```\r\n * Note: In ES5, if the first argument to this method is not an object (a primitive), then it will cause a TypeError. In ES2015, a non-object first argument will be coerced to an object at first.\r\n */\r\nexport const objGetOwnPropertyDescriptor = ObjClass.getOwnPropertyDescriptor;\r\n//# sourceMappingURL=get_own_prop_desc.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjClass } from \"../internal/constants\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\n/**\r\n * The objHasOwn() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n * If the property is inherited, or does not exist, the method returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over {@link objHasOwnProperty} () because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport const objHasOwn = ObjClass[\"hasOwn\"] || polyObjHasOwn;\r\n/**\r\n * The polyObjHasOwn() method is a polyfill for {@link objHasOwn} when the native\r\n * [Object.hasOwnreturns](https://caniuse.com/?search=hasOwn) is not supported, it returns a\r\n * boolean indicating whether the object has the specified property as its own property (as\r\n * opposed to inheriting it). If the property is inherited, or does not exist, the method\r\n * returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over objHasOwnProperty() because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @group Polyfill\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * polyObjHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * polyObjHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport function polyObjHasOwn(obj, prop) {\r\n    return objHasOwnProperty(obj, prop) || !!objGetOwnPropertyDescriptor(obj, prop);\r\n}\r\n//# sourceMappingURL=has_own.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjProto } from \"../internal/constants\";\r\n/**\r\n * The objHasOwnProperty() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n *\r\n * The objHasOwnProperty() method returns true if the specified property is a direct\r\n * property of the object — even if the value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in\r\n * operator, this method does not check for the specified property in the object's\r\n * prototype chain.\r\n *\r\n * The method can be called on most JavaScript objects, because most objects descend\r\n * from Object, and hence inherit its methods. For example Array is an Object, so you\r\n * can use objHasOwnProperty() method to check whether an index exists:\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwnProperty(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwnProperty(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport function objHasOwnProperty(obj, prop) {\r\n    return obj && ObjProto.hasOwnProperty.call(obj, prop);\r\n}\r\n//# sourceMappingURL=has_own_prop.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isObject } from \"../helpers/base\";\r\nimport { objHasOwn } from \"./has_own\";\r\n/**\r\n * Calls the provided `callbackFn` function once for each key in an object. This is equivelent to `arrForEach(Object.keys(theObject), callbackFn)` or\r\n * if not using the array helper `Object.keys(theObject).forEach(callbackFn)` except that this helper avoid creating a temporary of the object\r\n * keys before iterating over them and like the `arrForEach` helper you CAN stop or break the iteration by returning -1 from the `callbackFn` function.\r\n * @group Object\r\n * @typeParam T - The object type\r\n * @param callbackfn  A function that accepts up to two arguments, the key name and the current value of the property represented by the key.\r\n * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the object will be used as the this value.\r\n * @example\r\n * ```ts\r\n * function performAction<T>(target: T, source: any) {\r\n *    if (!isNullOrUndefined(source)) {\r\n *        objForEachKey(source, (key, value) => {\r\n *            // Set the target with a reference to the same value with the same name\r\n *            target[key] = value;\r\n *        });\r\n *    }\r\n *\r\n *    return target;\r\n * }\r\n * ```\r\n */\r\nexport function objForEachKey(theObject, callbackfn, thisArg) {\r\n    if (theObject && isObject(theObject)) {\r\n        for (const prop in theObject) {\r\n            if (objHasOwn(theObject, prop)) {\r\n                if (callbackfn.call(thisArg || theObject, prop, theObject[prop]) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=for_each_key.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * Throw an error exception with the specified optional message\r\n * @group Error\r\n * @param message\r\n */\r\nexport function throwError(message) {\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Throw a type error with the specified optional message\r\n * @group Error\r\n * @param message\r\n */\r\nexport function throwTypeError(message) {\r\n    throw new TypeError(message);\r\n}\r\n/**\r\n * Throw a RangeError with the specified optional message\r\n * @group Error\r\n * @param message\r\n */\r\nexport function throwRangeError(message) {\r\n    throw new RangeError(message);\r\n}\r\n//# sourceMappingURL=throw.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { isArray, isObject } from \"../helpers/base\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { polyObjEntries, polyObjValues } from \"../polyfills/object\";\r\nconst _objFreeze = ObjClass[\"freeze\"];\r\nconst _doNothing = (value) => value;\r\nconst _getProto = (value) => value[__PROTO__] || NULL_VALUE;\r\n/**\r\n * The `objAssign()` method copies all enumerable own properties from one or more source objects\r\n * to a target object. It returns the modified target object.\r\n *\r\n * Properties in the target object are overwritten by properties in the sources if they have the\r\n * same key. Later sources' properties overwrite earlier ones.\r\n *\r\n * The objAssign() method only copies enumerable and own properties from a source object to a\r\n * target object. It uses `Get` on the source and `Set` on the target, so it will invoke\r\n * [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and\r\n * [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set).\r\n * Therefore it assigns properties, versus copying or defining new properties. This may make it\r\n * unsuitable for merging new properties into a prototype if the merge sources contain getters.\r\n *\r\n * For copying property definitions (including their enumerability) into prototypes, use\r\n * {@link objGetOwnPropertyDescriptor} and {@link objDefineProp} instead.\r\n *\r\n * Both String and Symbol properties are copied.\r\n *\r\n * In case of an error, for example if a property is non-writable, a TypeError is raised, and\r\n * the target object is changed if any properties are added before the error is raised.\r\n * @group Object\r\n * @example\r\n * ```ts\r\n * const obj = { a: 1 };\r\n * const copy = objAssign({}, obj);\r\n * console.log(copy); // { a: 1 }\r\n *\r\n * const o1 = { a: 1 };\r\n * const o2 = { b: 2 };\r\n * const o3 = { c: 3 };\r\n *\r\n * const obj = objAssign(o1, o2, o3);\r\n * console.log(obj); // { a: 1, b: 2, c: 3 }\r\n * console.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\r\n * ```\r\n */\r\nexport const objAssign = ObjClass[\"assign\"];\r\n/**\r\n * The `objKeys()` method returns an array of a given object's own enumerable property names, iterated in\r\n * the same order that a normal loop would.\r\n *\r\n * objKeys() returns an array whose elements are strings corresponding to the enumerable properties found\r\n * directly upon object. The ordering of the properties is the same as that given by looping over the\r\n * properties of the object manually.\r\n * @group Object\r\n * @param value - The object to obtain a copy of the keys from\r\n * @returns An array of the properties names for the value object.\r\n * @example\r\n * ```ts\r\n * // simple array\r\n * const arr = ['a', 'b', 'c'];\r\n * console.log(objKeys(arr)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object\r\n * const obj = { 0: 'a', 1: 'b', 2: 'c' };\r\n * console.log(objKeys(obj)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object with random key ordering\r\n * const anObj = { 100: 'a', 2: 'b', 7: 'c' };\r\n * console.log(objKeys(anObj)); // console: ['2', '7', '100']\r\n *\r\n * // getFoo is a property which isn't enumerable\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(objKeys(myObj)); // console: ['foo']\r\n * ```\r\n */\r\nexport function objKeys(value) {\r\n    if (!isObject(value) || value === NULL_VALUE) {\r\n        throwTypeError(\"objKeys called on non-object\");\r\n    }\r\n    return ObjClass.keys(value);\r\n}\r\n/**\r\n * Perform a deep freeze on the object and all of it's contained values / properties by recursively calling\r\n * `objFreeze()` on all enumerable properties of the object and on each property returned.\r\n * @group Object\r\n * @param value - the object to be completly frozen.\r\n * @returns The originally passed in object.\r\n */\r\nexport function objDeepFreeze(value) {\r\n    if (_objFreeze) {\r\n        objForEachKey(value, (key, value) => {\r\n            if (isArray(value) || isObject(value)) {\r\n                _objFreeze(value);\r\n            }\r\n        });\r\n    }\r\n    return objFreeze(value);\r\n}\r\n/**\r\n * The `objFreeze()` method freezes an object. A frozen object can no longer be changed; freezing an object\r\n * prevents new properties from being added to it, existing properties from being removed, prevents changing the\r\n * enumerability, configurability, or writability of existing properties, and prevents the values of existing\r\n * properties from being changed. In addition, freezing an object also prevents its prototype from being changed.\r\n * `objFreeze()` returns the same object that was passed in.\r\n *\r\n * Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail,\r\n * either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\r\n *\r\n * For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are\r\n * set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are\r\n * changing the value). Note that values that are objects can still be modified, unless they are also frozen. As\r\n * an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added\r\n * to or removed from the array.\r\n *\r\n * `objFreeze()` returns the same object that was passed into the function. It does not create a frozen copy.\r\n * @group Object\r\n * @param value - The object to freeze.\r\n * @returns The object that was passed to the function.\r\n */\r\nexport const objFreeze = _objFreeze || _doNothing;\r\n/**\r\n * The `objSeal()` method seals an object, preventing new properties from being added to it and marking all\r\n * existing properties as non-configurable. Values of present properties can still be changed as long as they\r\n * are writable.\r\n * @group Object\r\n * @param value - The object which should be sealed.\r\n * @returns The object being sealed.\r\n */\r\nexport const objSeal = ObjClass[\"seal\"] || _doNothing;\r\n/**\r\n * The objGetPrototypeOf() method returns the prototype (i.e. the value of the internal `Prototype` property)\r\n * of the specified value.\r\n * @since 0.4.4\r\n * @group Object\r\n * @param value - The object whose prototype is to be returned, which may be null.\r\n */\r\nexport const objGetPrototypeOf = ObjClass[\"getPrototypeOf\"] || _getProto;\r\n/**\r\n * Returns an array of key/values of the enumerable properties of an object\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value Object that contains the properties and methods.\r\n * @example\r\n * ```ts\r\n * objEntries({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ [ \"Hello\", \"Darkness\" ], [ \"my\", \"old\"], [ \"friend\", \".\" ] ]\r\n *\r\n * // Array-like object\r\n * objEntries({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\r\n *\r\n * // Array-like object with random key ordering\r\n * objEntries({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]*\r\n * ```\r\n */\r\nexport const objEntries = ObjClass.entries || polyObjEntries;\r\n/**\r\n * The objValues() returns an array whose elements are values of enumerable string-keyed properties found\r\n * directly upon object. This is the same as iterating with a for...in loop, except that a for...in loop\r\n * enumerates properties in the prototype chain as well. The order of the array returned by objValues()\r\n * is the same as that provided by a for...in loop.\r\n *\r\n * If you need the property keys, use objKeys() instead. If you need both the property keys and values, use objEntries() instead.\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value - The object that contains the properties and methods.\r\n * @returns An array containing the given object's own enumerable string-keyed property values.\r\n * @example\r\n * ```ts\r\n * objValues({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ \"Darkness\", \"old\", \".\" ]\r\n *\r\n * // Array-like object\r\n * objValues({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ 'a', 'b', 'c']\r\n *\r\n * // Array-like object with random key ordering\r\n * objValues({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ 'b', 'c', 'a']\r\n * ```\r\n */\r\nexport const objValues = ObjClass.values || polyObjValues;\r\n//# sourceMappingURL=object.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { createEnumKeyMap } from \"../helpers/enum\";\r\n/**\r\n * @ignore\r\n * @internal\r\n */\r\nexport const _wellKnownSymbolMap = createEnumKeyMap({\r\n    asyncIterator: 0 /* WellKnownSymbols.asyncIterator */,\r\n    hasInstance: 1 /* WellKnownSymbols.hasInstance */,\r\n    isConcatSpreadable: 2 /* WellKnownSymbols.isConcatSpreadable */,\r\n    iterator: 3 /* WellKnownSymbols.iterator */,\r\n    match: 4 /* WellKnownSymbols.match */,\r\n    matchAll: 5 /* WellKnownSymbols.matchAll */,\r\n    replace: 6 /* WellKnownSymbols.replace */,\r\n    search: 7 /* WellKnownSymbols.search */,\r\n    species: 8 /* WellKnownSymbols.species */,\r\n    split: 9 /* WellKnownSymbols.split */,\r\n    toPrimitive: 10 /* WellKnownSymbols.toPrimitive */,\r\n    toStringTag: 11 /* WellKnownSymbols.toStringTag */,\r\n    unscopables: 12 /* WellKnownSymbols.unscopables */\r\n});\r\n//# sourceMappingURL=well_known.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _createKeyValueMap } from \"../internal/map\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\nimport { objDeepFreeze } from \"../object/object\";\r\n/**\r\n * Create a TypeScript style enum class which is a mapping that maps from the key -> value and the value -> key.\r\n * This is effectively the same as defining a non-constant enum, but this only repeats the \"Name\" of the enum value once.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const Animals = createEnum<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * Animals.Dog === 0;           // true\r\n * Animals[0] === \"Dog\";        // true\r\n * Animals[\"Dog\"] === 0;        // true\r\n * Animals.Cat === 1;           // true\r\n * Animals[1] === \"Cat\";        // true\r\n * Animals[\"Cat\"] === 1;        // true\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which looks and acts like a TypeScript Enum class.\r\n */\r\nexport function createEnum(values) {\r\n    return _createKeyValueMap(values, 1 /* eMapValues.Value */, 0 /* eMapValues.Key */, objDeepFreeze);\r\n}\r\n/**\r\n * Create a map object which contains both the property key and value which both map to the key,\r\n * E[key] => key and E[value] => key.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumKeyMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Dog\";         // true\r\n * animalMap[0] === \"Dog\";          // true\r\n * animalMap[\"Dog\"] === \"Dog\";      // true\r\n * animalMap.Cat === \"Cat\";         // true\r\n * animalMap[1] === \"Cat\";          // true\r\n * animalMap[\"Cat\"] === \"Cat\";      // true\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalType(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\nexport function createEnumKeyMap(values) {\r\n    return _createKeyValueMap(values, 0 /* eMapValues.Key */, 0 /* eMapValues.Key */, objDeepFreeze);\r\n}\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the resulting value,\r\n * E[key] => value and E[value] => value.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumValueMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === 0;     // true\r\n * animalMap[0] === 0;      // true\r\n * animalMap[\"Dog\"] === 0;  // true\r\n * animalMap.Cat === 1;     // true\r\n * animalMap[1] === 1;      // true\r\n * animalMap[\"Cat\"] === 1;  // true\r\n *\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalValue(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\nexport function createEnumValueMap(values) {\r\n    return _createKeyValueMap(values, 1 /* eMapValues.Value */, 1 /* eMapValues.Value */, objDeepFreeze);\r\n}\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the requested\r\n * generic mapValue with a type of V, E[key] => mapValue and E[value] => mapValue.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * };\r\n * // Creates a simple mapping to a string value\r\n * const animalFamilyMap = createValueMap<typeof Animal, string>({\r\n *    Dog: [ Animal.Dog, \"Canidae\"],\r\n *    Cat: [ Animal.Cat, \"Felidae\"],\r\n *    Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *    Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is \"string\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"string\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"string\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"string\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"string\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"string\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type (eg. typeof Animal);\r\n * @typeParam V - Identifies the type of the mapping `string`; `number`; etc is not restructed to primitive types.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defiend mapped value.\r\n */\r\nexport function createSimpleMap(values) {\r\n    let mapClass = {};\r\n    objForEachKey(values, (key, value) => {\r\n        mapClass[key] = value[1];\r\n        mapClass[value[0]] = value[1];\r\n    });\r\n    return objDeepFreeze(mapClass);\r\n}\r\n/**\r\n * Create a strongly types map object which contains both the perperty key and value which both map\r\n * to the requested mapValue,\r\n * E[key] => mapValue and E[value] => mapValue.\r\n * - E = the const enum type (typeof Animal);\r\n * - V = Identifies the valid values for the keys, this should include both the enum numeric and string key of the type. The\r\n * resulting \"Value\" of each entry identifies the valid values withing the assignments.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\",\r\n *     // Defined Named reference\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\",\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n *\r\n * or using an interface to define the direct string mappings\r\n *\r\n * interface IAnimalFamilyMap {\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\"\r\n * }\r\n *\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, IAnimalFamilyMap & {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\"\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n *\r\n * // You also end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the enum type\r\n * @typeParam T - Identifies the return type that is being created via the mapping.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defined mapped value.\r\n */\r\nexport function createTypeMap(values) {\r\n    return createSimpleMap(values);\r\n}\r\n//# sourceMappingURL=enum.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal Helper function to create a key and value mapped representation of the values\r\n * @param values - The source values\r\n * @param keyType - Identifies the value to populate against the key\r\n * @param valueType - Identifies the value to populate against the value\r\n * @param completeFn - The function to call to complete the map (used to freeze the instance)\r\n * @returns\r\n */\r\nexport function _createKeyValueMap(values, keyType, valueType, completeFn) {\r\n    let theMap = {};\r\n    objForEachKey(values, (key, value) => {\r\n        theMap[key] = keyType ? value : key;\r\n        theMap[value] = valueType ? value : key;\r\n    });\r\n    return completeFn(theMap);\r\n}\r\n//# sourceMappingURL=map.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { StrCls } from \"../internal/constants\";\r\n/**\r\n * The asString() method returns a string representing the value by\r\n * explicitly using `String(`value`)`.\r\n *\r\n * @since 0.4.3\r\n * @group String\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The value to get a string representation of\r\n * @example\r\n * ```ts\r\n * const arr = [ 1, 2, 3];\r\n * asString(arr);       // \"1,2,3\"\r\n * asString(null);      // \"null\"\r\n * asString(undefined); // \"undefined\"\r\n * asString(42);        // \"42\"\r\n * asString(Symbol.for(\"Hello\"));   // \"Symbol(Hello)\"\r\n * ```\r\n */\r\nexport const asString = StrCls;\r\n//# sourceMappingURL=as_string.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { UNDEFINED } from \"./constants\";\r\nconst GLOBAL_CONFIG_KEY = \"__tsUtils$gblCfg\";\r\nlet _globalCfg;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to get the current global value\r\n * @returns\r\n */\r\nexport function _getGlobalValue() {\r\n    let result;\r\n    if (typeof globalThis !== UNDEFINED) {\r\n        result = globalThis;\r\n    }\r\n    if (!result && typeof self !== UNDEFINED) {\r\n        result = self;\r\n    }\r\n    if (!result && typeof window !== UNDEFINED) {\r\n        result = window;\r\n    }\r\n    if (!result && typeof global !== UNDEFINED) {\r\n        result = global;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Gets/Sets the named value from the global config store, this is used to share configuration across\r\n * multiple modules. Primarily used for poly symbol and test hooks.\r\n * @returns The globally registered value.\r\n */\r\nexport function _getGlobalConfig() {\r\n    if (!_globalCfg) {\r\n        let gbl = _getGlobalValue() || {};\r\n        _globalCfg = gbl[GLOBAL_CONFIG_KEY] = gbl[GLOBAL_CONFIG_KEY] || {};\r\n    }\r\n    return _globalCfg;\r\n}\r\n//# sourceMappingURL=global.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { EMPTY, NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { isError, isNumber, objToString } from \"./base\";\r\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n * @group Error\r\n * @group Diagnostic\r\n * @param object - The object to be converted to a diagnostic string value\r\n * @param format - Identifies whether the JSON value should be formated\r\n * - `true` - Format with 4 spaces\r\n * - 'number' - The number of spaces to format with\r\n * - `false` (or not Truthy) - Do not format\r\n */\r\nexport function dumpObj(object, format) {\r\n    let propertyValueDump = EMPTY;\r\n    if (isError(object)) {\r\n        propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\r\n    }\r\n    else {\r\n        try {\r\n            propertyValueDump = JSON.stringify(object, NULL_VALUE, format ? (isNumber(format) ? format : 4) : UNDEF_VALUE);\r\n        }\r\n        catch (e) {\r\n            // Unable to convert object (probably circular)\r\n            propertyValueDump = \" - \" + dumpObj(e, format);\r\n        }\r\n    }\r\n    return objToString(object) + \": \" + propertyValueDump;\r\n}\r\n//# sourceMappingURL=diagnostics.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { ArrProto, SLICE } from \"./constants\";\r\nconst _arrSlice = ArrProto[SLICE];\r\nconst _throwMissingFunction = (funcName, thisArg) => {\r\n    throwTypeError(\"'\" + asString(funcName) + \"' not defined for \" + dumpObj(thisArg));\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to run the named function on the passed first argument, this does not support polyfill\r\n * or prototype fallback, so the function must exist on the provided first argument.\r\n * If the first argument is null, undefined or the function does not exist an exception will be thrown\r\n * by the runtime\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapInstFunction = (funcName) => {\r\n    return function (thisArg) {\r\n        return thisArg[funcName].apply(thisArg, _arrSlice.call(arguments, 1));\r\n    };\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapFunction = (funcName, clsProto) => {\r\n    let clsFn = clsProto && clsProto[funcName];\r\n    return function (thisArg) {\r\n        let theFunc = (thisArg && thisArg[funcName]) || clsFn;\r\n        if (theFunc) {\r\n            return theFunc.apply(thisArg, _arrSlice.call(arguments, 1));\r\n        }\r\n        _throwMissingFunction(funcName, thisArg);\r\n    };\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @param polyFunc - The function to call if not available on the thisArg, act like the polyfill\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapFunctionWithPoly = (funcName, clsProto, polyFunc) => {\r\n    let clsFn = clsProto && clsProto[funcName];\r\n    return function (thisArg) {\r\n        let theFunc = (thisArg && thisArg[funcName]) || clsFn;\r\n        if (theFunc || polyFunc) {\r\n            let theArgs = arguments;\r\n            return (theFunc || polyFunc).apply(thisArg, theFunc ? _arrSlice.call(theArgs, 1) : theArgs);\r\n        }\r\n        _throwMissingFunction(funcName, thisArg);\r\n    };\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to lookup and return the named property from the first argument (which becomes the this)\r\n *\r\n * @since 0.4.2\r\n * @typeParam T - The type of the object which contains the propName\r\n * @param propName - The property name\r\n * @returns The value of the property\r\n */\r\nexport function _unwrapProp(propName) {\r\n    return function (thisArg) {\r\n        return thisArg[propName];\r\n    };\r\n}\r\n//# sourceMappingURL=unwrapFunction.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _wellKnownSymbolMap } from \"../symbol/well_known\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { POLYFILL_TAG, SYMBOL } from \"../internal/constants\";\r\nimport { objHasOwn } from \"../object/has_own\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { _getGlobalConfig } from \"../internal/global\";\r\nimport { strStartsWith } from \"../string/starts_with\";\r\nimport { objKeys } from \"../object/object\";\r\nconst UNIQUE_REGISTRY_ID = \"_urid\";\r\nlet _polySymbols;\r\nfunction _globalSymbolRegistry() {\r\n    if (!_polySymbols) {\r\n        let gblCfg = _getGlobalConfig();\r\n        _polySymbols = gblCfg.gblSym = gblCfg.gblSym || { k: {}, s: {} };\r\n    }\r\n    return _polySymbols;\r\n}\r\nlet _wellKnownSymbolCache = {};\r\n/**\r\n * Returns a new (polyfill) Symbol object for the provided description that's guaranteed to be unique.\r\n * Symbols are often used to add unique property keys to an object that won't collide with keys any\r\n * other code might add to the object, and which are hidden from any mechanisms other code will\r\n * typically use to access the object. That enables a form of weak encapsulation, or a weak form of\r\n * information hiding.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param description - The description of the symbol\r\n * @returns A new polyfill version of a Symbol object\r\n */\r\nexport function polyNewSymbol(description) {\r\n    let theSymbol = {\r\n        description: asString(description),\r\n        toString: () => SYMBOL + \"(\" + description + \")\"\r\n    };\r\n    // Tag the symbol so we know it a polyfill\r\n    theSymbol[POLYFILL_TAG] = true;\r\n    return theSymbol;\r\n}\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param key key to search for.\r\n */\r\nexport function polySymbolFor(key) {\r\n    let registry = _globalSymbolRegistry();\r\n    if (!objHasOwn(registry.k, key)) {\r\n        let newSymbol = polyNewSymbol(key);\r\n        let regId = objKeys(registry.s).length;\r\n        newSymbol[UNIQUE_REGISTRY_ID] = () => regId + \"_\" + newSymbol.toString();\r\n        registry.k[key] = newSymbol;\r\n        registry.s[newSymbol[UNIQUE_REGISTRY_ID]()] = asString(key);\r\n    }\r\n    return registry.k[key];\r\n}\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param sym Symbol to find the key for.\r\n */\r\nexport function polySymbolKeyFor(sym) {\r\n    if (!sym || !sym.toString || !strStartsWith(sym.toString(), SYMBOL)) {\r\n        throwTypeError(sym + \" is not a symbol\");\r\n    }\r\n    const regId = sym[POLYFILL_TAG] && sym[UNIQUE_REGISTRY_ID] && sym[UNIQUE_REGISTRY_ID]();\r\n    return regId ? _globalSymbolRegistry().s[regId] : undefined;\r\n}\r\n/**\r\n * Returns the polyfill version of a well-known global symbol, this will only return\r\n * known values.\r\n * @example\r\n * ```ts\r\n * // Always returns the polyfill version, even if Symbols are supported in the runtime\r\n * polyGetKnownSymbol(\"toStringTag\") === polyGetKnownSymbol(\"toStringTag\");                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) === polyGetKnownSymbol(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== Symbol.toStringTag;                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== Symbol.toStringTag; // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polySymbolFor(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polySymbolFor(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polyNewSymbol(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polyNewSymbol(\"toStringTag\"); // true\r\n * ```\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @returns The value of the property if present\r\n */\r\nexport function polyGetKnownSymbol(name) {\r\n    let result;\r\n    let knownName = _wellKnownSymbolMap[name];\r\n    if (knownName) {\r\n        result = _wellKnownSymbolCache[knownName] = _wellKnownSymbolCache[knownName] || polyNewSymbol(SYMBOL + \".\" + knownName);\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=symbol.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjClass, VALUE } from \"../internal/constants\";\r\nimport { isFunction, isUndefined } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Mapping from ObjDefinePropDescriptor key to PropertyDescriptor key\r\n */\r\nconst propMap = {\r\n    e: \"enumerable\",\r\n    c: \"configurable\",\r\n    v: VALUE,\r\n    w: \"writable\",\r\n    g: \"get\",\r\n    s: \"set\"\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to convert ObjDefinePropDescriptor into PropertyDescriptor\r\n * @param value - The prop descriptor to convert\r\n * @returns\r\n */\r\nfunction _createProp(value) {\r\n    let prop = {};\r\n    prop[propMap[\"c\"]] = true;\r\n    prop[propMap[\"e\"]] = true;\r\n    if (value.l) {\r\n        // Asign a getter function to return the value when requested\r\n        prop.get = () => value.l.v;\r\n        // If it has a setter then expose it as well\r\n        let desc = objGetOwnPropertyDescriptor(value.l, \"v\");\r\n        if (desc && desc.set) {\r\n            prop.set = (newValue) => {\r\n                value.l.v = newValue;\r\n            };\r\n        }\r\n    }\r\n    objForEachKey(value, (key, value) => {\r\n        prop[propMap[key]] = isUndefined(value) ? prop[propMap[key]] : value;\r\n    });\r\n    return prop;\r\n}\r\n/**\r\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\r\n * This is a wrapper for [Object.defineProperty](https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/object/defineproperty)\r\n *\r\n * This method allows a precise addition to or modification of a property on an object. Normal property addition through\r\n * assignment creates properties which show up during property enumeration (for...in loop or objKeys method), whose\r\n * values may be changed, and which may be deleted. This method allows these extra details to be changed from their\r\n * defaults. By default, properties added using objDefineProp() are not writable, not enumerable, and not configurable.\r\n *\r\n * Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data\r\n * descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property\r\n * described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\r\n *\r\n * This is an alias for Object.defineProperty\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name or Symbol of the property to be defined or modified.\r\n * @param descriptor - The descriptor for the property being defined or modified.\r\n */\r\nexport const objDefineProp = ObjClass[\"defineProperty\"];\r\n/**\r\n * The objDefineProperties() method defines new or modifies existing properties directly on an object, returning the object.\r\n * This is a wrapper for [Object.defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param props - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns\r\n */\r\nexport const objDefineProperties = ObjClass[\"defineProperties\"];\r\n/**\r\n * Try to define a get object property accessor for the target object, if a function is past as the value this will\r\n * be assumed to be a getter function and NOT the value.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineGet} or {@link objDefineAccessors}\r\n * as it provides a deterministic way for identifying whether the value is a value or a function rather than wrapping any\r\n * function value in another function.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param value - The value or a function that returns the value\r\n * @param configurable - Can the value be changed, defaults to true.\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineGet(target, key, value, configurable, enumerable) {\r\n    return objDefineProp(target, key, _createProp({\r\n        e: enumerable,\r\n        c: configurable,\r\n        [isFunction(value) ? \"g\" : \"v\"]: value\r\n    }));\r\n}\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineAccessors} as this internally creates\r\n * the {@link ObjDefinePropDescriptor} definition based on your provided arguments. And only using a minimum set of functions\r\n * reduces your overall bundle size.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param prop - The name of the property to be defined or modified.\r\n * @param getProp - The getter function to wire against the getter.\r\n * @param setProp - The setter function to wire against the setter.\r\n * @param configurable - Can the value be changed, defaults to true\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineAccessors(target, prop, getProp, setProp, configurable, enumerable) {\r\n    let desc = {\r\n        e: enumerable,\r\n        c: configurable\r\n    };\r\n    if (getProp) {\r\n        desc.g = getProp;\r\n    }\r\n    if (setProp) {\r\n        desc.s = setProp;\r\n    }\r\n    return objDefineProp(target, prop, _createProp(desc));\r\n}\r\n/**\r\n * The objDefine() method defines a new or modifies an existing single property accessors for the target object based\r\n * on the configuration defined for the propDesc argument of type {@link ObjDefinePropDescriptor}. This will call\r\n * {@link objDefineProp} after creating the required PropertyDescriptor populating defaults for the propDesc values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProp.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param propDesc - An object which defines the Property Descriptor mappings for the mapping.\r\n * @returns The target object.\r\n */\r\nexport function objDefine(target, key, propDesc) {\r\n    return objDefineProp(target, key, _createProp(propDesc));\r\n}\r\n/**\r\n * The objDefineProps() method defines new or modifies existing properties directly for the target object using the keys\r\n * and configuration from the propDescMap argument. This will call {@link objDefineProperties} after creating the required\r\n * PropertyDescriptorMap from the propDescMap values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProperties.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param propDescMap - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns The target object.\r\n */\r\nexport function objDefineProps(target, propDescMap) {\r\n    let props = {};\r\n    objForEachKey(propDescMap, (key, value) => {\r\n        props[key] = _createProp(value);\r\n    });\r\n    return objDefineProperties(target, props);\r\n}\r\n//# sourceMappingURL=define.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalConfig } from \"../internal/global\";\r\nimport { objDefineProp } from \"../object/define\";\r\n/**\r\n * @internal\r\n * Internal flag which is set by the public {@link setBypassLazyCache}, should not be externally exported\r\n */\r\nexport let _globalLazyTestHooks;\r\nlet _fetchLazyTestHooks = function () {\r\n    _globalLazyTestHooks = _getGlobalConfig();\r\n    _fetchLazyTestHooks = NULL_VALUE;\r\n};\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally.\r\n * @since 0.4.5\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns A new readonly {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getLazy(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * ```\r\n */\r\nexport function getLazy(cb) {\r\n    let lazyValue = {};\r\n    _fetchLazyTestHooks && _fetchLazyTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = cb();\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                objDefineProp(lazyValue, \"v\", {\r\n                    value: result\r\n                });\r\n                if (lazyValue.b) {\r\n                    delete lazyValue.b;\r\n                }\r\n            }\r\n            if (_globalLazyTestHooks.lzy && lazyValue.b !== _globalLazyTestHooks.lzy) {\r\n                lazyValue.b = _globalLazyTestHooks.lzy;\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n    return lazyValue;\r\n}\r\n/**\r\n * Test Hook function used to cause the internal caching of objects to be bypassed, this should never\r\n * be enabled for production as it has additional performance impact caused by the repetitive creation\r\n * of the lazy wrappers.\r\n * @group Lazy\r\n * @since 0.5.0\r\n * @param newValue - When `true` will cause all new lazy implementations to bypass the cached lookup.\r\n */\r\nexport function setBypassLazyCache(newValue) {\r\n    _fetchLazyTestHooks && _fetchLazyTestHooks();\r\n    _globalLazyTestHooks.lzy = newValue;\r\n}\r\n/**\r\n * Create and return a writable {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally. The\r\n * value may be set as many times as required, if the callback has not been called when you set the value\r\n * it will never get called.\r\n * @since 0.9.4\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns A new writable {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getWritableLazy(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * // Setting the value\r\n * let cachedValue = getWritableLazy(() => callSomeExpensiveFunction());\r\n * let theValue = \"new Value\";\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will set the value to be set explicitly and the callback\r\n *     // will now never occur and the result will be cached\r\n *     cachedValue.v = theValue;\r\n * }\r\n *\r\n * // Accessing the value again will cause the previously set value to be returned.\r\n * theValue === cachedValue.v;  // true\r\n * ```\r\n */\r\nexport function getWritableLazy(cb) {\r\n    let lazyValue = {};\r\n    _fetchLazyTestHooks && _fetchLazyTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n    let _setValue = (newValue) => {\r\n        // Just replace the value\r\n        objDefineProp(lazyValue, \"v\", {\r\n            value: newValue,\r\n            writable: true\r\n        });\r\n        if (lazyValue.b) {\r\n            delete lazyValue.b;\r\n        }\r\n    };\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = cb();\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                _setValue(result);\r\n            }\r\n            if (_globalLazyTestHooks.lzy && lazyValue.b !== _globalLazyTestHooks.lzy) {\r\n                lazyValue.b = _globalLazyTestHooks.lzy;\r\n            }\r\n            return result;\r\n        },\r\n        set: _setValue\r\n    });\r\n    return lazyValue;\r\n}\r\n//# sourceMappingURL=lazy.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getLazy } from \"./lazy\";\r\nimport { safeGet } from \"./safe_get\";\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally.\r\n * If the callback throws the default value will be returned.\r\n * @since 0.9.5\r\n * @group Lazy\r\n * @group Safe\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @param defValue - The default value to return when an exception is thrown\r\n * @returns A new readonly {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = safeGetLazy(() => callSomeExpensiveFunctionWhichMightThrow(), \"someDefaultValue\");\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * ```\r\n */\r\nexport function safeGetLazy(cb, defValue) {\r\n    return getLazy(() => safeGet(cb, defValue));\r\n}\r\n//# sourceMappingURL=safe_lazy.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * Function to safely execute a callback function, if the function throws the provided default\r\n * value will be returned.\r\n * @since 0.9.5\r\n * @group Safe\r\n * @param cb - Callback function be wrapped with an exception\r\n * @param defValue - The default value to return when an exception is thrown\r\n * @returns The result of the callback function or the default if an exception occurred calling the callback\r\n * function.\r\n * @example\r\n * ```ts\r\n * let theExpression = \"{ invalid: json value\";\r\n *\r\n * let result = safeGet(() => {\r\n *     return JSON.parse(theExpression);\r\n * }, {});\r\n *\r\n * // result === {};\r\n * ```\r\n */\r\nexport function safeGet(cb, defValue) {\r\n    let result = defValue;\r\n    try {\r\n        result = cb();\r\n    }\r\n    catch (e) {\r\n        // Do nothing\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=safe_get.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalValue } from \"../internal/global\";\r\nimport { safeGetLazy } from \"./safe_lazy\";\r\nimport { _globalLazyTestHooks } from \"./lazy\";\r\nconst WINDOW = \"window\";\r\nlet _cachedGlobal;\r\nlet _cachedWindow;\r\nlet _cachedDocument;\r\nlet _cachedNavigator;\r\nlet _cachedHistory;\r\nlet _isWebWorker;\r\nlet _isNode;\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the named global\r\n * value if available, will return `null` if the named global object is not available or if the runtime\r\n * throws an exception when attempting to access the global object.\r\n * Unlike {@link getInst} the value is cached after the first access, so if the global value changes after\r\n * the initial fetch the original cached value is still returned.\r\n * @since 0.9.5\r\n * @group Environment\r\n * @group Lazy\r\n * @group Safe\r\n * @param name The name of the global object to get.\r\n * @returns A new readonly {@link ILazyValue} instance which will lazily attempt to return the globally\r\n * available named instance.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = lazySafeGetInst(\"myGlobal\");\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * let promiseCls = lazySafeGetInst(\"Promise\");\r\n * // null if Promise is not supported in the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\nexport const lazySafeGetInst = (name) => safeGetLazy(() => getInst(name) || UNDEF_VALUE, UNDEF_VALUE);\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal\r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions. And this caches the lookup of the global as in some environments\r\n * this can be an expensive operation.\r\n * @group Environment\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n */\r\nexport const getGlobal = (useCached) => {\r\n    (!_cachedGlobal || useCached === false || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedGlobal.b)) && (_cachedGlobal = safeGetLazy(_getGlobalValue, NULL_VALUE));\r\n    return _cachedGlobal.v;\r\n};\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @group Environment\r\n * @param name The globally named object\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = getInst(\"myGlobal\");\r\n * // cachedValue === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // getInst(\"myGlobal\") === \"Darkness\"\r\n *\r\n * let promiseCls = getInst(\"Promise\");\r\n * // May throw if the global is not supported by the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\nexport const getInst = (name, useCached) => {\r\n    const gbl = (!_cachedGlobal || useCached === false) ? getGlobal(useCached) : _cachedGlobal.v;\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name];\r\n    }\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === WINDOW && _cachedWindow) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        return _cachedWindow.v;\r\n    }\r\n    return NULL_VALUE;\r\n};\r\n/**\r\n * Identify whether the runtime contains a `document` object\r\n * @group Environment\r\n * @returns - True if a `document` exists\r\n */\r\nexport const hasDocument = () => !!getDocument();\r\n/**\r\n * Return the global `document` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getDocument = () => {\r\n    (!_cachedDocument || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedDocument.b)) && (_cachedDocument = lazySafeGetInst(\"document\"));\r\n    return _cachedDocument.v;\r\n};\r\n/**\r\n * Identify whether the runtime contains a `window` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasWindow = () => !!getWindow();\r\n/**\r\n * Return the global `window` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getWindow = () => {\r\n    (!_cachedWindow || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedWindow.b)) && (_cachedWindow = lazySafeGetInst(WINDOW));\r\n    return _cachedWindow.v;\r\n};\r\n/**\r\n * Identify whether the runtimne contains a `navigator` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasNavigator = () => !!getNavigator();\r\n/**\r\n * Returns the global `navigator` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getNavigator = () => {\r\n    (!_cachedNavigator || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedNavigator.b)) && (_cachedNavigator = lazySafeGetInst(\"navigator\"));\r\n    return _cachedNavigator.v;\r\n};\r\n/**\r\n * Identifies whether the runtime contains a `history` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasHistory = () => !!getHistory();\r\n/**\r\n * Returns the global `history` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getHistory = () => {\r\n    (!_cachedHistory || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedHistory.b)) && (_cachedHistory = lazySafeGetInst(\"history\"));\r\n    return _cachedHistory.v;\r\n};\r\n/**\r\n * Simple method to determine if we are running in a node environment\r\n * @group Environment\r\n * @returns True if you are\r\n */\r\nexport const isNode = () => {\r\n    !_isNode && (_isNode = safeGetLazy(() => !!(process && (process.versions || {}).node), false));\r\n    return _isNode.v;\r\n};\r\n/**\r\n * Helper to identify if you are running as a Dedicated, Shared or Service worker\r\n * @group Environment\r\n * @returns True if the environment you are in looks like a Web Worker\r\n */\r\nexport const isWebWorker = () => {\r\n    !_isWebWorker && (_isWebWorker = safeGetLazy(() => !!(self && self instanceof WorkerGlobalScope), false));\r\n    return _isWebWorker.v;\r\n};\r\n//# sourceMappingURL=environment.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, SYMBOL, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { polyGetKnownSymbol, polyNewSymbol, polySymbolFor, polySymbolKeyFor } from \"../polyfills/symbol\";\r\nimport { _wellKnownSymbolMap } from \"./well_known\";\r\nimport { _createIs } from \"../helpers/base\";\r\nimport { _globalLazyTestHooks } from \"../helpers/lazy\";\r\nimport { safeGetLazy } from \"../helpers/safe_lazy\";\r\nimport { lazySafeGetInst } from \"../helpers/environment\";\r\nlet _symbol;\r\nlet _symbolFor;\r\nlet _symbolKeyFor;\r\nfunction _getSymbolValue(name) {\r\n    return safeGetLazy(function () {\r\n        return (_symbol.v ? _symbol.v[name] : UNDEF_VALUE);\r\n    }, UNDEF_VALUE);\r\n}\r\n/**\r\n * Checks if the type of value is a symbol.\r\n * @group Symbol\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a symbol, false otherwise.\r\n */\r\nexport const isSymbol = _createIs(\"symbol\");\r\n/**\r\n * Helper to identify whether the runtime support the Symbols either via native or an installed polyfill\r\n * @group Symbol\r\n * @returns true if Symbol's are support otherwise false\r\n */\r\nexport function hasSymbol() {\r\n    return !!getSymbol();\r\n}\r\n/**\r\n * If Symbols are supported then attempt to return the named Symbol\r\n * @group Symbol\r\n * @returns The value of the named Symbol (if available)\r\n */\r\nexport function getSymbol() {\r\n    let resetCache = !_symbol || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_symbol.b);\r\n    resetCache && (_symbol = lazySafeGetInst(SYMBOL));\r\n    (!_symbolFor || resetCache) && (_symbolFor = _getSymbolValue(\"for\"));\r\n    (!_symbolKeyFor || resetCache) && (_symbolKeyFor = _getSymbolValue(\"keyFor\"));\r\n    return _symbol.v;\r\n}\r\n/**\r\n * If Symbols are supported then get the property of the global Symbol, if Symbol's are\r\n * not supported and noPoly is true it returns null. Used to access the well known symbols.\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @param noPoly - Flag indicating whether to return a polyfill if symbols are not supported.\r\n * @returns The value of the property if present\r\n * @example\r\n * ```ts\r\n * // If Symbol is supported in the runtime\r\n * getKnownSymbol(\"toStringTag\") === Symbol.toStringTag;                // true\r\n * getKnownSymbol(WellKnownSymbols.toStringTag) === Symbol.toStringTag; // true\r\n * ```\r\n */\r\nexport function getKnownSymbol(name, noPoly) {\r\n    let knownName = _wellKnownSymbolMap[name];\r\n    // Cause lazy symbol to get initialized\r\n    (!_symbol || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return _symbol.v ? _symbol.v[knownName || name] : (!noPoly ? polyGetKnownSymbol(name) : UNDEF_VALUE);\r\n}\r\n/**\r\n * Returns a new unique Symbol value. If noPoly is true and symbols are not supported\r\n * then this will return null.\r\n * @group Symbol\r\n * @param description Description of the new Symbol object.\r\n * @param noPoly - Flag indicating whether to return a polyfil if symbols are not supported.\r\n * @returns The new symbol\r\n */\r\nexport function newSymbol(description, noPoly) {\r\n    // Cause lazy _symbol to get initialized\r\n    (!_symbol || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return _symbol.v ? _symbol.v(description) : (!noPoly ? polyNewSymbol(description) : NULL_VALUE);\r\n}\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key. This will always return a polyfill if symbols\r\n * are not supported.\r\n * @group Symbol\r\n * @param key key to search for.\r\n */\r\nexport function symbolFor(key) {\r\n    // Cause lazy symbol to get initialized\r\n    (!_symbolFor || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return (_symbolFor.v || polySymbolFor)(key);\r\n}\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined. This will always attempt to lookup the polyfill\r\n * implementation if symbols are not supported\r\n * @group Symbol\r\n * @param sym Symbol to find the key for.\r\n */\r\nexport function symbolKeyFor(sym) {\r\n    // Cause lazy symbol to get initialized\r\n    (!_symbolKeyFor || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return (_symbolKeyFor.v || polySymbolKeyFor)(sym);\r\n}\r\n//# sourceMappingURL=symbol.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _unwrapInstFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The `fnApply` function calls the specified `fn` function with the given `thisArg` as the `this` value,\r\n * and the optional `argArray` arguments provided as an array (or an Array-Like Object).\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnApply()`, you can assign an arbitrary value as this when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * You can also use any kind of object which is ArrayLike as the second parameter. In practice, this means\r\n * that it needs to have a length property, and integer (\"index\") properties in the range (0..length - 1).\r\n * For example, you could use a NodeList, or a custom object like `{ 'length': 2, '0': 'eat', '1': 'bananas' }`.\r\n * You can also use `arguments`.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param argArray - An array-like object, specifying the arguments with which `fn` should be called, or `null` or\r\n * `undefined` if no arguments should be provided to the function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnApply(Math.max, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 168\r\n *\r\n * let min = fnApply(Math.min, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnApply(module1.getX, module2); // 42\r\n * fnApply(module1.log, module2, [ \"friend\" ]); // my friend : 42\r\n * ```\r\n */\r\nexport const fnApply = _unwrapInstFunction(\"apply\");\r\n//# sourceMappingURL=fnApply.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { LENGTH } from \"../internal/constants\";\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in an array in ascending index order. It is not invoked for index properties\r\n * that have been deleted or are uninitialized. And unlike the ES6 forEach() you CAN stop or break the iteration by returning -1 from the\r\n * `callbackFn` function.\r\n *\r\n * The range (number of elements) processed by arrForEach() is set before the first call to the `callbackFn`. Any elements added beyond the range\r\n * or elements which as assigned to indexes already processed will not be visited by the `callbackFn`.\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the element type of the array\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackfn A `synchronous` function that accepts up to three arguments. arrForEach calls the callbackfn function one time for each element in the array.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the array will be used as the this value.\r\n * @remarks\r\n * arrForEach expects a `synchronous` function.\r\n * arrForEach does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as forEach callback.\r\n * @example\r\n * ```ts\r\n * const items = ['item1', 'item2', 'item3'];\r\n * const copyItems = [];\r\n *\r\n * // before using for loop\r\n * for (let i = 0; i < items.length; i++) {\r\n *   copyItems.push(items[i]);\r\n * }\r\n *\r\n * // before using forEach()\r\n * items.forEach((item) => {\r\n *   copyItems.push(item);\r\n * });\r\n *\r\n * // after\r\n * arrForEach(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n *\r\n * // Also supports input as an array like object\r\n * const items = { length: 3, 0: 'item1', 1: 'item2', 2: 'item3' };\r\n * ```\r\n */\r\nexport function arrForEach(theArray, callbackfn, thisArg) {\r\n    if (theArray) {\r\n        const len = theArray[LENGTH] >>> 0;\r\n        for (let idx = 0; idx < len; idx++) {\r\n            if (idx in theArray) {\r\n                if (callbackfn.call(thisArg || theArray, theArray[idx], idx, theArray) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=forEach.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto, INDEX_OF, LAST_INDEX_OF } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrIndexOf() method returns the first index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator).\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - The index to start the search at. If the index is greater than or equal to\r\n * the array's length, -1 is returned, which means the array will not be searched. If the provided\r\n * index value is a negative number, it is taken as the offset from the end of the array.\r\n * Note: if the provided index is negative, the array is still searched from front to back. If the\r\n * provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const array = [2, 9, 9];\r\n * arrIndexOf(array, 2);     // 0\r\n * arrIndexOf(array, 7);     // -1\r\n * arrIndexOf(array, 9, 2);  // 2\r\n * arrIndexOf(array, 2, -1); // -1\r\n * arrIndexOf(array, 2, -3); // 0\r\n *\r\n * let indices: number[] = [];\r\n * const array = ['a', 'b', 'a', 'c', 'a', 'd'];\r\n * const element = 'a';\r\n * let idx = arrIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrIndexOf(array, element, idx + 1);\r\n * }\r\n * console.log(indices);\r\n * // [0, 2, 4]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrIndexOf(arrayLike, \"potato\"); // 0\r\n * arrIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrIndexOf(arrayLike, \"chillies\"); 2\r\n * arrIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrIndexOf = _unwrapFunction(INDEX_OF, ArrProto);\r\n/**\r\n * The arrLastIndexOf() method returns the last index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrLastIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator). [NaN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\r\n * values are never compared as equal, so arrLastIndexOf() always returns -1 when searchElement is NaN.\r\n *\r\n * The arrLastIndexOf() method skips empty slots in sparse arrays.\r\n *\r\n * The arrLastIndexOf() method is generic. It only expects the this value to have a length property and integer-keyed properties.\r\n *\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - Zero-based index at which to start searching backwards, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex < 0, fromIndex + array.length is used.\r\n * - If fromIndex < -array.length, the array is not searched and -1 is returned. You can think of it conceptually\r\n * as starting at a nonexistent position before the beginning of the array and going backwards from there. There\r\n * are no array elements on the way, so searchElement is never found.\r\n * - If fromIndex >= array.length or fromIndex is omitted, array.length - 1 is used, causing the entire array to\r\n * be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const numbers = [2, 5, 9, 2];\r\n * arrLastIndexOf(numbers, 2); // 3\r\n * arrLastIndexOf(numbers, 7); // -1\r\n * arrLastIndexOf(numbers, 2, 3); // 3\r\n * arrLastIndexOf(numbers, 2, 2); // 0\r\n * arrLastIndexOf(numbers, 2, -2); // 0\r\n * arrLastIndexOf(numbers, 2, -1); // 3\r\n *\r\n * let indices: number[] = [];\r\n * const array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\r\n * const element = \"a\";\r\n * let idx = arrLastIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrLastIndexOf(array, element, idx ? idx - 1 : -(array.length + 1));\r\n * }\r\n * console.log(indices);\r\n * // [4, 2, 0]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrLastIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrLastIndexOf(arrayLike, \"potato\"); // 0\r\n * arrLastIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrLastIndexOf(arrayLike, \"chillies\"); 2\r\n * arrLastIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrLastIndexOf = _unwrapFunction(LAST_INDEX_OF, ArrProto);\r\n//# sourceMappingURL=indexOf.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto, SLICE } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrSlice() method returns a shallow copy of a portion of an array into a new array object\r\n * selected from start to end (end not included) where start and end represent the index of items\r\n * in that array. The original array will not be modified.\r\n *\r\n * The `arrSlice()` method is a copying method. It does not alter this but instead returns a shallow\r\n * copy that contains some of the same elements as the ones from the original array.\r\n *\r\n * The `arrSlice()` method preserves empty slots. If the sliced portion is sparse, the returned arra\r\n * is sparse as well.\r\n *\r\n * The `arrSlice()` method is generic. It only expects the this value to have a length property and\r\n * integer-keyed properties.\r\n *\r\n * For both start and end, a negative index can be used to indicate an offset from the end of the array.\r\n * For example, -2 refers to the second to last element of the array.\r\n * @since 0.9.3\r\n * @group Array\r\n * @group ArrayLike\r\n * @param start Zero-based index at which to start extraction, converted to an integer.\r\n * - Negative index counts back from the end of the array — if start < 0, start + array.length is used.\r\n * - If start < -array.length or start is omitted, 0 is used.\r\n * - If start >= array.length, nothing is extracted.\r\n * @param end Zero-based index at which to end extraction, converted to an integer. slice() extracts\r\n * up to but not including end.\r\n * - Negative index counts back from the end of the array — if end < 0, end + array.length is used.\r\n * - If end < -array.length, 0 is used.\r\n * - If end >= array.length or end is omitted, array.length is used, causing all elements until the\r\n * end to be extracted.\r\n * - If end is positioned before or at start after normalization, nothing is extracted.\r\n * @example\r\n * ```ts\r\n * const lyrics = [\"Hello\", \"Darkness\", \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\", \"talk\" ];\r\n *\r\n * arrSlice(lyrics);        // [ \"Hello\", \"Darkness\", \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\", \"talk\" ]\r\n * arrSlice(lyrics, 1, 3);  // [ \"Darkness\", \"my\" ]\r\n * arrSlicw(lyrics, 2);     // [ \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\", \"talk\" ]\r\n * arrSlice(lyrics, 2, 4);  // [ \"my\", \"old\" ]\r\n * arrSlice(lyrics, 1, 5);  // [ \"Darkness\", \"my\", \"old\", \"friend.\" ]\r\n * arrSlice(lyrics, -2);    // [ \"to\", \"talk\" ]\r\n * arrSlice(lyrics, 2, -1); // [ \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\" ]\r\n * ```\r\n */\r\nexport const arrSlice = _unwrapFunction(SLICE, ArrProto);\r\n//# sourceMappingURL=slice.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { FUNCTION, ObjClass, OBJECT, PROTOTYPE } from \"../internal/constants\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nconst _objCreate = ObjClass[\"create\"];\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Object\r\n * @param obj Object to use as a prototype. May be null\r\n */\r\nexport const objCreate = _objCreate || polyObjCreate;\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Polyfill\r\n * @group Object\r\n * @param obj Object to use as a prototype. May be null\r\n */\r\nexport function polyObjCreate(obj) {\r\n    if (!obj) {\r\n        return {};\r\n    }\r\n    let type = typeof obj;\r\n    if (type !== OBJECT && type !== FUNCTION) {\r\n        throw new TypeError(\"Prototype must be an Object or function: \" + dumpObj(obj));\r\n    }\r\n    function tempFunc() { }\r\n    tempFunc[PROTOTYPE] = obj;\r\n    return new tempFunc();\r\n}\r\n//# sourceMappingURL=create.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getLazy } from \"../helpers/lazy\";\r\nimport { ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nlet _isProtoArray;\r\n/**\r\n * The objSetPrototypeOf() method sets the prototype (i.e., the internal [Prototype] property) of a specified\r\n * object to another object or null.\r\n * @group Object\r\n * @param obj - The object which is to have it's prototype set.\r\n * @param proto - The object's new prototype (an object or null)\r\n * @returns The specified object.\r\n */\r\nexport function objSetPrototypeOf(obj, proto) {\r\n    let fn = ObjClass[\"setPrototypeOf\"] ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        function (d, b) {\r\n            !_isProtoArray && (_isProtoArray = getLazy(() => ({ [__PROTO__]: [] } instanceof Array)));\r\n            _isProtoArray.v ? d[__PROTO__] = b : objForEachKey(b, (key, value) => d[key] = value);\r\n        };\r\n    return fn(obj, proto);\r\n}\r\n//# sourceMappingURL=set_proto.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\nimport { CONSTRUCTOR, NAME, NULL_VALUE, PROTOTYPE } from \"../internal/constants\";\r\nimport { objCreate } from \"../object/create\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { objGetPrototypeOf } from \"../object/object\";\r\nimport { objSetPrototypeOf } from \"../object/set_proto\";\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nconst _createCustomError = (name, d, b) => {\r\n    _safeDefineName(d, name);\r\n    d = objSetPrototypeOf(d, b);\r\n    function __() {\r\n        this.constructor = d;\r\n        _safeDefineName(this, name);\r\n    }\r\n    d[PROTOTYPE] = b === NULL_VALUE ? objCreate(b) : (__[PROTOTYPE] = b[PROTOTYPE], new __());\r\n    return d;\r\n};\r\nconst _safeSetName = (baseClass, name) => {\r\n    try {\r\n        name && (baseClass[NAME] = name);\r\n        //name && (baseClass[PROTOTYPE][NAME] = name);\r\n    }\r\n    catch (e) {\r\n        // Do nothing\r\n    }\r\n};\r\nconst _safeDefineName = (target, name) => {\r\n    try {\r\n        objDefine(target, NAME, { v: name, c: true, e: false });\r\n    }\r\n    catch (e) {\r\n        // Do nothing\r\n    }\r\n};\r\n/**\r\n * Create a Custom Error class which may be used to throw custom errors.\r\n * @group Error\r\n * @param name - The name of the Custom Error\r\n * @param constructCb - [Optional] An optional callback function to call when a\r\n * new Customer Error instance is being created.\r\n * @param errorBase - [Optional] (since v0.9.6) The error class to extend for this class, defaults to Error.\r\n * @returns A new Error `class`\r\n * @example\r\n * ```ts\r\n * import { createCustomError, isError } from \"@nevware21/ts-utils\";\r\n *\r\n * // For an error that just contains a message\r\n * let myCustomErrorError = createCustomError(\"MessageError\");\r\n *\r\n * try {\r\n *     throw new myCustomErrorError(\"Error Message!\");\r\n * } catch(e) {\r\n *      // e.name === MessageError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // Or a more complex error object\r\n * interface MyCriticalErrorConstructor extends CustomErrorConstructor {\r\n *     new(message: string, file: string, line: number, col: number): MyCriticalError;\r\n *     (message: string, file: string, line: number, col: number): MyCriticalError;\r\n * }\r\n *\r\n * interface MyCriticalError extends Error {\r\n *     readonly errorId: number;\r\n *     readonly args: any[];        // Holds all of the arguments passed during construction\r\n * }\r\n *\r\n * let _totalErrors = 0;\r\n * let myCustomError = createCustomError<MyCriticalErrorConstructor>(\"CriticalError\", (self, args) => {\r\n *     _totalErrors++;\r\n *     self.errorId = _totalErrors;\r\n *     self.args = args;\r\n * });\r\n *\r\n * try {\r\n *     throw new myCustomError(\"Not Again!\");\r\n * } catch(e) {\r\n *      // e.name === CriticalError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // ----------------------------------------------------------\r\n * // Extending another custom error class\r\n * // ----------------------------------------------------------\r\n *\r\n * let AppError = createCustomError(\"ApplicationError\");\r\n * let theAppError = new appError();\r\n *\r\n * isError(theAppError);                    // true\r\n * theAppError instanceof Error;            // true\r\n * theAppError instanceof AppError;         // true\r\n *\r\n * let StartupError = createCustomError(\"StartupError\", null, AppError);\r\n * let theStartupError = new StartupError();\r\n *\r\n * isError(theStartupError);                // true\r\n * theStartupError instanceof Error;        // true\r\n * theStartupError instanceof AppError;     // true\r\n * theStartupError instanceof StartupError; // true\r\n * ```\r\n */\r\nexport function createCustomError(name, constructCb, errorBase) {\r\n    let theBaseClass = errorBase || Error;\r\n    let orgName = theBaseClass[PROTOTYPE][NAME];\r\n    let captureFn = Error.captureStackTrace;\r\n    return _createCustomError(name, function () {\r\n        let _this = this;\r\n        try {\r\n            _safeSetName(theBaseClass, name);\r\n            let _self = fnApply(theBaseClass, _this, arrSlice(arguments)) || _this;\r\n            if (_self !== _this) {\r\n                // Looks like runtime error constructor reset the prototype chain, so restore it\r\n                let orgProto = objGetPrototypeOf(_this);\r\n                if (orgProto !== objGetPrototypeOf(_self)) {\r\n                    objSetPrototypeOf(_self, orgProto);\r\n                }\r\n            }\r\n            // Make sure we only capture our stack details\r\n            captureFn && captureFn(_self, _this[CONSTRUCTOR]);\r\n            // Run the provided construction function\r\n            constructCb && constructCb(_self, arguments);\r\n            return _self;\r\n        }\r\n        finally {\r\n            _safeSetName(theBaseClass, orgName);\r\n        }\r\n    }, theBaseClass);\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nlet _unsupportedError;\r\n/**\r\n * Throw a custom `UnsupportedError` Error instance with the given message.\r\n * @group Error\r\n * @param message - The message to include in the exception\r\n * @example\r\n * ```ts\r\n * import { throwUnsupported } from \"@nevware21/ts-utils\";\r\n *\r\n * if (!window) {\r\n *     throwUnsupported(\"A window is needed for this operation\");\r\n * }\r\n * ```\r\n */\r\nexport function throwUnsupported(message) {\r\n    if (!_unsupportedError) {\r\n        // Lazily create the class\r\n        _unsupportedError = createCustomError(\"UnsupportedError\");\r\n    }\r\n    throw new _unsupportedError(message);\r\n}\r\n//# sourceMappingURL=customError.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * Return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of dateNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n * @example\r\n * ```ts\r\n * let now = utcNow();\r\n * ```\r\n */\r\nexport function utcNow() {\r\n    return (Date.now || polyUtcNow)();\r\n}\r\n/**\r\n * Polyfill fallback to return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of dateNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n * @group Polyfill\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n  * @example\r\n * ```ts\r\n * let now = polyUtcNow();\r\n * ```\r\n*/\r\nexport function polyUtcNow() {\r\n    return new Date().getTime();\r\n}\r\n//# sourceMappingURL=date.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { LENGTH } from \"../internal/constants\";\r\nimport { _unwrapProp } from \"../internal/unwrapFunction\";\r\n/**\r\n * Helper to return the length value of an object, this will return the value\r\n * of the \"length\" property. Generally used to return the length of a string or array.\r\n *\r\n * @since 0.4.2\r\n * @group Array\r\n * @group String\r\n * @group String\r\n * @group Array\r\n * @group Object\r\n * @param value - The value to return the length property from, must contain a `length` property\r\n * @example\r\n * ```ts\r\n * getLength(\"\");               // returns 0\r\n * getLength(\"Hello World\");    // returns 11\r\n * getLength([]);               // returns 0;\r\n * getLength([0, 1, 2, 3]);     // returns 4;\r\n * getLength({ length: 42});    // returns 42\r\n * getLength({ length: () => 53; }); // returns the function that if called would return 53\r\n * ```\r\n */\r\nexport const getLength = _unwrapProp(LENGTH);\r\n//# sourceMappingURL=length.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { utcNow } from \"./date\";\r\nimport { lazySafeGetInst } from \"./environment\";\r\nimport { _globalLazyTestHooks } from \"./lazy\";\r\nlet _perf;\r\n/**\r\n * Identify whether the runtimne contains a `performance` object\r\n *\r\n * @since 0.4.4\r\n * @group Environment\r\n * @returns\r\n */\r\nexport function hasPerformance() {\r\n    return !!getPerformance();\r\n}\r\n/**\r\n * Returns the global `performance` Object if available, which can be used to\r\n * gather performance information about the current document. It serves as the\r\n * point of exposure for the Performance Timeline API, the High Resolution Time\r\n * API, the Navigation Timing API, the User Timing API, and the Resource Timing API.\r\n *\r\n * @since 0.4.4\r\n * @group Environment\r\n * @returns The global performance object if available.\r\n */\r\nexport function getPerformance() {\r\n    (!_perf || (!_perf.b && _globalLazyTestHooks && _globalLazyTestHooks.lzy)) && (_perf = lazySafeGetInst(\"performance\"));\r\n    return _perf.v;\r\n}\r\n/**\r\n * Returns the number of milliseconds that has elapsed since the time origin, if\r\n * the runtime does not support the `performance` API it will fallback to return\r\n * the number of milliseconds since the unix epoch.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns The number of milliseconds as a `DOMHighResTimeStamp` double value or\r\n * an integer depending on the runtime.\r\n * @example\r\n * ```ts\r\n * let now = perfNow();\r\n * ```\r\n */\r\nexport function perfNow() {\r\n    let perf = getPerformance();\r\n    if (perf && perf.now) {\r\n        return perf.now();\r\n    }\r\n    return utcNow();\r\n}\r\n/**\r\n * Return the number of milliseconds that have elapsed since the provided `startTime`\r\n * the `startTime` MUST be obtained from {@link perfNow} to ensure the correct elapsed\r\n * value is returned.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param startTime - The startTime obtained from `perfNow`\r\n * @returns The number of milliseconds that have elapsed since the startTime.\r\n * @example\r\n * ```ts\r\n * let start = perfNow();\r\n * // Do some work\r\n * let totalTime = elapsedTime(start);\r\n * ```\r\n */\r\nexport function elapsedTime(startTime) {\r\n    return perfNow() - startTime;\r\n}\r\n//# sourceMappingURL=perf.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objDefineProp } from \"../object/define\";\r\nconst REF = \"ref\";\r\nconst UNREF = \"un\" + REF;\r\nconst HAS_REF = \"hasRef\";\r\nconst ENABLED = \"enabled\";\r\n/**\r\n * @ignore\r\n * @internal\r\n * Internal function to create and manage an ITimerHandler implementation, the object returned from this function\r\n * it directly used / returned by the pulic functions used to create timers (idle, interval and timeout)\r\n * @param startTimer - Should the timer be started as part of creating the handler\r\n * @param refreshFn - The function used to create/start or refresh the timer\r\n * @param cancelFn - The function used to cancel the timer.\r\n * @returns The new ITimerHandler instance\r\n */\r\nexport function _createTimerHandler(startTimer, refreshFn, cancelFn) {\r\n    let ref = true;\r\n    let timerId = startTimer ? refreshFn(NULL_VALUE) : NULL_VALUE;\r\n    let theTimerHandler;\r\n    const _unref = () => {\r\n        ref = false;\r\n        timerId && timerId[UNREF] && timerId[UNREF]();\r\n        return theTimerHandler;\r\n    };\r\n    const _ref = () => {\r\n        ref = true;\r\n        timerId && timerId[REF] && timerId[REF]();\r\n        return theTimerHandler;\r\n    };\r\n    const _hasRef = () => {\r\n        if (timerId && timerId[HAS_REF]) {\r\n            return timerId[HAS_REF]();\r\n        }\r\n        return ref;\r\n    };\r\n    const _refresh = () => {\r\n        timerId = refreshFn(timerId);\r\n        if (!ref) {\r\n            _unref();\r\n        }\r\n        return theTimerHandler;\r\n    };\r\n    const _cancel = () => {\r\n        timerId && cancelFn(timerId);\r\n        timerId = NULL_VALUE;\r\n    };\r\n    const _setEnabled = (value) => {\r\n        !value && timerId && _cancel();\r\n        value && !timerId && _refresh();\r\n    };\r\n    theTimerHandler = {\r\n        cancel: _cancel,\r\n        refresh: _refresh,\r\n        [HAS_REF]: _hasRef,\r\n        [REF]: _ref,\r\n        [UNREF]: _unref,\r\n        [ENABLED]: false\r\n    };\r\n    objDefineProp(theTimerHandler, ENABLED, {\r\n        get: () => !!timerId,\r\n        set: _setEnabled\r\n    });\r\n    return {\r\n        h: theTimerHandler,\r\n        dn: () => {\r\n            timerId = NULL_VALUE;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=handler.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\nimport { isArray } from \"../helpers/base\";\r\nimport { UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _createTimerHandler } from \"./handler\";\r\nfunction _createTimeoutWith(self, startTimer, overrideFn, theArgs) {\r\n    let isArr = isArray(overrideFn);\r\n    let len = isArr ? overrideFn.length : 0;\r\n    let setFn = (len > 0 ? overrideFn[0] : (!isArr ? overrideFn : UNDEF_VALUE)) || setTimeout;\r\n    let clearFn = (len > 1 ? overrideFn[1] : UNDEF_VALUE) || clearTimeout;\r\n    let timerFn = theArgs[0];\r\n    theArgs[0] = function () {\r\n        handler.dn();\r\n        fnApply(timerFn, self, arrSlice(arguments));\r\n    };\r\n    let handler = _createTimerHandler(startTimer, (timerId) => {\r\n        if (timerId) {\r\n            if (timerId.refresh) {\r\n                timerId.refresh();\r\n                return timerId;\r\n            }\r\n            fnApply(clearFn, self, [timerId]);\r\n        }\r\n        return fnApply(setFn, self, theArgs);\r\n    }, function (timerId) {\r\n        fnApply(clearFn, self, [timerId]);\r\n    });\r\n    return handler.h;\r\n}\r\nexport function scheduleTimeout(callback, timeout) {\r\n    return _createTimeoutWith(this, true, UNDEF_VALUE, arrSlice(arguments));\r\n}\r\nexport function scheduleTimeoutWith(overrideFn, callback, timeout) {\r\n    return _createTimeoutWith(this, true, overrideFn, arrSlice(arguments, 1));\r\n}\r\nexport function createTimeout(callback, timeout) {\r\n    return _createTimeoutWith(this, false, UNDEF_VALUE, arrSlice(arguments));\r\n}\r\nexport function createTimeoutWith(overrideFn, callback, timeout) {\r\n    return _createTimeoutWith(this, false, overrideFn, arrSlice(arguments, 1));\r\n}\r\n//# sourceMappingURL=timeout.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isDefined, isUndefined } from \"../helpers/base\";\r\nimport { elapsedTime, perfNow } from \"../helpers/perf\";\r\nimport { safeGetLazy } from \"../helpers/safe_lazy\";\r\nimport { _createTimerHandler } from \"./handler\";\r\nimport { scheduleTimeout } from \"./timeout\";\r\nlet _hasIdleCallback;\r\nlet _defaultIdleTimeout = 100;\r\nlet _maxExecutionTime = 50;\r\n/**\r\n * Identifies if the runtime supports the `requestIdleCallback` API.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n * @group Environment\r\n *\r\n * @returns True if the runtime supports `requestIdleCallback` otherwise false.\r\n * @example\r\n * ```ts\r\n * let nativeIdleTimeouts = hasIdleCallback();\r\n * // true === idle timeouts are supported by the runtime otherwise false and the {@linke scheduleIdleCallback}\r\n * will use `setTimeout` instead.\r\n * ```\r\n */\r\nexport function hasIdleCallback() {\r\n    !_hasIdleCallback && (_hasIdleCallback = safeGetLazy(() => isDefined(requestIdleCallback), false));\r\n    return !!(_hasIdleCallback.v ? requestIdleCallback : false);\r\n}\r\n/**\r\n * Set the idle timeout fallback timeout which is used when the runtime does not support `requestIdleCallback`\r\n * the default idle timeout will be used for the scheduled timer. Defaults to 100ms\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param timeout - The time in milliseconds that the timer should wait before calling the idle function.\r\n */\r\nexport function setDefaultIdleTimeout(timeout) {\r\n    _defaultIdleTimeout = timeout;\r\n}\r\n/**\r\n * Set the idle timeout fallback simulated maximum execution time, used when the runtime doesn't\r\n * support `requestIdleTimeout` to simulate the [IdleDeadline](https://w3c.github.io/requestidlecallback/#dom-idledeadline)\r\n * `timeRemaining` value.\r\n * This value is used as the base time of the [IdleDeadline.timeRemaining](https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/timeRemaining)\r\n * less the start time the callback was called. Defaults to 50ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param maxTime - The maximum execution time in milliseconds.\r\n */\r\nexport function setDefaultMaxExecutionTime(maxTime) {\r\n    _maxExecutionTime = maxTime;\r\n}\r\n/**\r\n * Queues a function to be called during a browser's idle periods. This enables developers to\r\n * perform background and low priority work on the main event loop, without impacting latency-critical\r\n * events such as animation and input response. Functions are generally called in first-in-first-out\r\n * order; however, callbacks which have a timeout specified may be called out-of-order if necessary\r\n * in order to run them before the timeout elapses.\r\n *\r\n * You can call scheduledleCallback() within an idle callback function to schedule another callback to\r\n * take place no sooner than the next pass through the event loop.\r\n *\r\n * If the runtime does not support the [requestIdleCallback](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\r\n * it will fallback to use `setTimeout` with either the provided timeout or the current default idle\r\n * timeout, which can be set via {@link setDefaultIdleTimeout}. It will always supply a deadline which\r\n * indicates that the request timed out.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param callback - A reference to a function that should be called in the near future, when the\r\n * event loop is idle. The callback function is passed an [IdleDeadline](https://w3c.github.io/requestidlecallback/#dom-idledeadline)\r\n * object describing the amount of time available and whether or not the callback has been run because\r\n * the timeout period expired.\r\n * @param options - Contains optional configuration parameters. Currently only one property is defined:\r\n * `timeout` If the number of milliseconds represented by this parameter has elapsed and the callback\r\n * has not already been called, then a task to execute the callback is queued in the event loop (even\r\n * if doing so risks causing a negative performance impact). timeout must be a positive value or it\r\n * is ignored.\r\n * @returns A handle which can be used to cancel the callback by passing it into the `cancelIdleCallback()`\r\n * method.\r\n * @example\r\n * ```ts\r\n * let idleCalled = false;\r\n * let idleTimedOut = false;\r\n * let theIdleTimer = scheduleIdleCallback((idleDeadline: IdleDeadline) => {\r\n *     // This callback will be called when the system is idle (via requestIdleCallback) or after the provided timeout 100ms\r\n *     idleCalled = true;\r\n *     idleTimedOut = idleDeadline?.didTimeout;\r\n *     while ((idleDeadline.timeRemaining() > 0 || deadline.didTimeout)) {\r\n *         // Do some background operations while there is time remaining or we timed out\r\n *         // Unlike interval timers this callback will NOT be called again unless you call \"refresh\"\r\n *         // to restart it or create a new idle timer\r\n *     }\r\n * }, 100);\r\n *\r\n * // Instead of calling cancelIdleCallback() with the returned value from requestIdleCallback() the returned\r\n * // handler instance can be used instead to cancel the idle timer\r\n * theIdleTimer.cancel();\r\n * theIdleTimer.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theIdleTimer.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theIdleTimer.refresh();\r\n * ```\r\n */\r\nexport function scheduleIdleCallback(callback, options) {\r\n    function _createDeadline(timedOut) {\r\n        let startTime = perfNow();\r\n        return {\r\n            didTimeout: timedOut,\r\n            timeRemaining: () => {\r\n                return _maxExecutionTime - elapsedTime(startTime);\r\n            }\r\n        };\r\n    }\r\n    if (hasIdleCallback()) {\r\n        let handler = _createTimerHandler(true, (idleId) => {\r\n            idleId && cancelIdleCallback(idleId);\r\n            return requestIdleCallback((deadline) => {\r\n                handler.dn();\r\n                callback(deadline || _createDeadline(false));\r\n            }, options);\r\n        }, (idleId) => {\r\n            cancelIdleCallback(idleId);\r\n        });\r\n        return handler.h;\r\n    }\r\n    let timeout = (options || {}).timeout;\r\n    if (isUndefined(timeout)) {\r\n        timeout = _defaultIdleTimeout;\r\n    }\r\n    return scheduleTimeout(() => {\r\n        callback(_createDeadline(true));\r\n    }, timeout);\r\n}\r\n//# sourceMappingURL=idle.js.map","import { isPromiseLike } from \"@nevware21/ts-utils\";\r\nexport function doAwaitResponse(value, cb) {\r\n    return doAwait(value, (value) => {\r\n        return cb ? cb({\r\n            value: value,\r\n            rejected: false\r\n        }) : value;\r\n    }, (reason) => {\r\n        return cb ? cb({\r\n            rejected: true,\r\n            reason: reason\r\n        }) : reason;\r\n    });\r\n}\r\nexport function doAwait(value, resolveFn, rejectFn, finallyFn) {\r\n    let result = value;\r\n    if (isPromiseLike(value)) {\r\n        if (resolveFn || rejectFn) {\r\n            result = value.then(resolveFn, rejectFn);\r\n        }\r\n    }\r\n    else {\r\n        if (resolveFn) {\r\n            result = resolveFn(value);\r\n        }\r\n    }\r\n    if (finallyFn) {\r\n        doFinally(result, finallyFn);\r\n    }\r\n    return result;\r\n}\r\nexport function doFinally(value, finallyFn) {\r\n    let result = value;\r\n    if (finallyFn) {\r\n        if (isPromiseLike(value)) {\r\n            if (value.finally) {\r\n                result = value.finally(finallyFn);\r\n            }\r\n            else {\r\n                result = value.then(function (value) {\r\n                    finallyFn();\r\n                    return value;\r\n                }, function (reason) {\r\n                    finallyFn();\r\n                    throw reason;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            finallyFn();\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=await.js.map","import { objDefineProp } from \"@nevware21/ts-utils\";\r\nlet _debugState;\r\nlet _debugResult;\r\nlet _debugHandled;\r\nexport let _promiseDebugEnabled = false;\r\nlet _theLogger = null;\r\nexport function _debugLog(id, message) {\r\n}\r\nexport function _addDebugState(thePromise, stateFn, resultFn, handledFn) {\r\n    _debugState = _debugState || { toString: () => \"[[PromiseState]]\" };\r\n    _debugResult = _debugResult || { toString: () => \"[[PromiseResult]]\" };\r\n    _debugHandled = _debugHandled || { toString: () => \"[[PromiseIsHandled]]\" };\r\n    objDefineProp(thePromise, _debugState, { get: stateFn });\r\n    objDefineProp(thePromise, _debugResult, { get: resultFn });\r\n    objDefineProp(thePromise, _debugHandled, { get: handledFn });\r\n}\r\nexport function setPromiseDebugState(enabled, logger) {\r\n    _promiseDebugEnabled = enabled;\r\n    _theLogger = logger;\r\n}\r\n//# sourceMappingURL=debug.js.map","export const STRING_STATES = [\r\n    \"pending\", \"resolving\", \"resolved\", \"rejected\"\r\n];\r\n//# sourceMappingURL=state.js.map","import { dumpObj, getDocument, safeGetLazy, getInst } from \"@nevware21/ts-utils\";\r\nconst DISPATCH_EVENT = \"dispatchEvent\";\r\nlet _hasInitEvent;\r\nexport function emitEvent(target, evtName, populateEvent, useNewEvent) {\r\n    let doc = getDocument();\r\n    !_hasInitEvent && (_hasInitEvent = safeGetLazy(() => {\r\n        let evt;\r\n        if (doc && doc.createEvent) {\r\n            evt = doc.createEvent(\"Event\");\r\n        }\r\n        return (!!evt && evt.initEvent);\r\n    }, null));\r\n    let theEvt = _hasInitEvent.v ? doc.createEvent(\"Event\") : (useNewEvent ? new Event(evtName) : {});\r\n    populateEvent && populateEvent(theEvt);\r\n    if (_hasInitEvent.v) {\r\n        theEvt.initEvent(evtName, false, true);\r\n    }\r\n    if (theEvt && target[DISPATCH_EVENT]) {\r\n        target[DISPATCH_EVENT](theEvt);\r\n    }\r\n    else {\r\n        let handler = target[\"on\" + evtName];\r\n        if (handler) {\r\n            handler(theEvt);\r\n        }\r\n        else {\r\n            let theConsole = getInst(\"console\");\r\n            theConsole && (theConsole[\"error\"] || theConsole[\"log\"])(evtName, dumpObj(theEvt));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=event.js.map","export const STR_PROMISE = \"Promise\";\r\n//# sourceMappingURL=constants.js.map","import { arrForEach, arrSlice, dumpObj, getKnownSymbol, hasSymbol, isFunction, isPromiseLike, isUndefined, throwTypeError, objToString, scheduleTimeout, getWindow, isNode, getGlobal, objDefine, objDefineProp, lazySafeGetInst } from \"@nevware21/ts-utils\";\r\nimport { doAwait } from \"./await\";\r\nimport { _addDebugState, _promiseDebugEnabled } from \"./debug\";\r\nimport { STRING_STATES } from \"../internal/state\";\r\nimport { emitEvent } from \"./event\";\r\nimport { STR_PROMISE } from \"../internal/constants\";\r\nconst NODE_UNHANDLED_REJECTION = \"unhandledRejection\";\r\nconst UNHANDLED_REJECTION = NODE_UNHANDLED_REJECTION.toLowerCase();\r\nlet _currentPromiseId = [];\r\nlet _uniquePromiseId = 0;\r\nlet _unhandledRejectionTimeout = 10;\r\nlet _hasPromiseRejectionEvent;\r\nfunction dumpFnObj(value) {\r\n    if (isFunction(value)) {\r\n        return value.toString();\r\n    }\r\n    return dumpObj(value);\r\n}\r\nexport function _createPromise(newPromise, processor, executor) {\r\n    let additionalArgs = arrSlice(arguments, 3);\r\n    let _state = 0;\r\n    let _hasResolved = false;\r\n    let _settledValue;\r\n    let _queue = [];\r\n    let _id = _uniquePromiseId++;\r\n    let _parentId = _currentPromiseId.length > 0 ? _currentPromiseId[_currentPromiseId.length - 1] : undefined;\r\n    let _handled = false;\r\n    let _unHandledRejectionHandler = null;\r\n    let _thePromise;\r\n    !_hasPromiseRejectionEvent && (_hasPromiseRejectionEvent = lazySafeGetInst(STR_PROMISE + \"RejectionEvent\"));\r\n    const _then = (onResolved, onRejected) => {\r\n        try {\r\n            _currentPromiseId.push(_id);\r\n            _handled = true;\r\n            _unHandledRejectionHandler && _unHandledRejectionHandler.cancel();\r\n            _unHandledRejectionHandler = null;\r\n            let thenPromise = newPromise(function (resolve, reject) {\r\n                _queue.push(function () {\r\n                    try {\r\n                        let handler = _state === 2 ? onResolved : onRejected;\r\n                        let value = isUndefined(handler) ? _settledValue : (isFunction(handler) ? handler(_settledValue) : handler);\r\n                        if (isPromiseLike(value)) {\r\n                            value.then(resolve, reject);\r\n                        }\r\n                        else if (handler) {\r\n                            resolve(value);\r\n                        }\r\n                        else if (_state === 3) {\r\n                            reject(value);\r\n                        }\r\n                        else {\r\n                            resolve(value);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                if (_hasResolved) {\r\n                    _processQueue();\r\n                }\r\n            }, additionalArgs);\r\n            return thenPromise;\r\n        }\r\n        finally {\r\n            _currentPromiseId.pop();\r\n        }\r\n    };\r\n    const _catch = (onRejected) => {\r\n        return _then(undefined, onRejected);\r\n    };\r\n    const _finally = (onFinally) => {\r\n        let thenFinally = onFinally;\r\n        let catchFinally = onFinally;\r\n        if (isFunction(onFinally)) {\r\n            thenFinally = function (value) {\r\n                onFinally && onFinally();\r\n                return value;\r\n            };\r\n            catchFinally = function (reason) {\r\n                onFinally && onFinally();\r\n                throw reason;\r\n            };\r\n        }\r\n        return _then(thenFinally, catchFinally);\r\n    };\r\n    const _strState = () => {\r\n        return STRING_STATES[_state];\r\n    };\r\n    const _processQueue = () => {\r\n        if (_queue.length > 0) {\r\n            let pending = _queue.slice();\r\n            _queue = [];\r\n            _handled = true;\r\n            processor(pending);\r\n            _unHandledRejectionHandler && _unHandledRejectionHandler.cancel();\r\n            _unHandledRejectionHandler = null;\r\n        }\r\n        else {\r\n        }\r\n    };\r\n    const _createSettleIfFn = (newState, allowState) => {\r\n        return (theValue) => {\r\n            if (_state === allowState) {\r\n                if (newState === 2 && isPromiseLike(theValue)) {\r\n                    _state = 1;\r\n                    theValue.then(_createSettleIfFn(2, 1), _createSettleIfFn(3, 1));\r\n                    return;\r\n                }\r\n                _state = newState;\r\n                _hasResolved = true;\r\n                _settledValue = theValue;\r\n                _processQueue();\r\n                if (!_handled && newState === 3 && !_unHandledRejectionHandler) {\r\n                    _unHandledRejectionHandler = scheduleTimeout(_notifyUnhandledRejection, _unhandledRejectionTimeout);\r\n                }\r\n            }\r\n            else {\r\n            }\r\n        };\r\n    };\r\n    const _notifyUnhandledRejection = () => {\r\n        if (!_handled) {\r\n            if (isNode()) {\r\n                process.emit(NODE_UNHANDLED_REJECTION, _settledValue, _thePromise);\r\n            }\r\n            else {\r\n                let gbl = getWindow() || getGlobal();\r\n                emitEvent(gbl, UNHANDLED_REJECTION, (theEvt) => {\r\n                    objDefine(theEvt, \"promise\", { g: () => _thePromise });\r\n                    theEvt.reason = _settledValue;\r\n                    return theEvt;\r\n                }, !!_hasPromiseRejectionEvent.v);\r\n            }\r\n        }\r\n    };\r\n    _thePromise = {\r\n        then: _then,\r\n        \"catch\": _catch,\r\n        finally: _finally\r\n    };\r\n    objDefineProp(_thePromise, \"state\", {\r\n        get: _strState\r\n    });\r\n    if (_promiseDebugEnabled) {\r\n        _addDebugState(_thePromise, _strState, () => { return objToString(_settledValue); }, () => _handled);\r\n    }\r\n    if (hasSymbol()) {\r\n        _thePromise[getKnownSymbol(11)] = \"IPromise\";\r\n    }\r\n    const _toString = () => {\r\n        return \"IPromise\" + (_promiseDebugEnabled ? \"[\" + _id + (!isUndefined(_parentId) ? (\":\" + _parentId) : \"\") + \"]\" : \"\") + \" \" + _strState() + (_hasResolved ? (\" - \" + dumpFnObj(_settledValue)) : \"\");\r\n    };\r\n    _thePromise.toString = _toString;\r\n    (function _initialize() {\r\n        if (!isFunction(executor)) {\r\n            throwTypeError(STR_PROMISE + \": executor is not a function - \" + dumpFnObj(executor));\r\n        }\r\n        const _rejectFn = _createSettleIfFn(3, 0);\r\n        try {\r\n            executor.call(_thePromise, _createSettleIfFn(2, 0), _rejectFn);\r\n        }\r\n        catch (e) {\r\n            _rejectFn(e);\r\n        }\r\n    })();\r\n    return _thePromise;\r\n}\r\nexport function _createAllPromise(newPromise) {\r\n    return function (input) {\r\n        let additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise((resolve, reject) => {\r\n            try {\r\n                let values = [];\r\n                let pending = 1;\r\n                arrForEach(input, (item, idx) => {\r\n                    if (item) {\r\n                        pending++;\r\n                        doAwait(item, (value) => {\r\n                            values[idx] = value;\r\n                            if (--pending === 0) {\r\n                                resolve(values);\r\n                            }\r\n                        }, reject);\r\n                    }\r\n                });\r\n                pending--;\r\n                if (pending === 0) {\r\n                    resolve(values);\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        }, additionalArgs);\r\n    };\r\n}\r\nexport function _createResolvedPromise(newPromise) {\r\n    return function (value) {\r\n        let additionalArgs = arrSlice(arguments, 1);\r\n        if (isPromiseLike(value)) {\r\n            return value;\r\n        }\r\n        return newPromise((resolve) => {\r\n            resolve(value);\r\n        }, additionalArgs);\r\n    };\r\n}\r\nexport function _createRejectedPromise(newPromise) {\r\n    return function (reason) {\r\n        let additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise((_resolve, reject) => {\r\n            reject(reason);\r\n        }, additionalArgs);\r\n    };\r\n}\r\n//# sourceMappingURL=base.js.map","import { arrForEach, isNumber, scheduleIdleCallback, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nconst _processPendingItems = (pending) => {\r\n    arrForEach(pending, (fn) => {\r\n        try {\r\n            fn();\r\n        }\r\n        catch (e) {\r\n        }\r\n    });\r\n};\r\nexport function syncItemProcessor() {\r\n    return _processPendingItems;\r\n}\r\nexport function timeoutItemProcessor(timeout) {\r\n    let callbackTimeout = isNumber(timeout) ? timeout : 0;\r\n    return (pending) => {\r\n        scheduleTimeout(() => {\r\n            _processPendingItems(pending);\r\n        }, callbackTimeout);\r\n    };\r\n}\r\nexport function idleItemProcessor(timeout) {\r\n    let options;\r\n    if (timeout >= 0) {\r\n        options = {\r\n            timeout: +timeout\r\n        };\r\n    }\r\n    return (pending) => {\r\n        scheduleIdleCallback((deadline) => {\r\n            _processPendingItems(pending);\r\n        }, options);\r\n    };\r\n}\r\n//# sourceMappingURL=itemProcessor.js.map","import { _createAllPromise, _createPromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { timeoutItemProcessor } from \"./itemProcessor\";\r\nexport function createAsyncPromise(executor, timeout) {\r\n    return _createPromise(createAsyncPromise, timeoutItemProcessor(timeout), executor, timeout);\r\n}\r\nexport const createAsyncAllPromise = _createAllPromise(createAsyncPromise);\r\nexport const createAsyncResolvedPromise = _createResolvedPromise(createAsyncPromise);\r\nexport const createAsyncRejectedPromise = _createRejectedPromise(createAsyncPromise);\r\n//# sourceMappingURL=asyncPromise.js.map","import { createAsyncPromise } from \"./asyncPromise\";\r\nimport { _createAllPromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { STRING_STATES } from \"../internal/state\";\r\nimport { dumpObj, lazySafeGetInst, isFunction, objDefineProp, throwTypeError } from \"@nevware21/ts-utils\";\r\nimport { STR_PROMISE } from \"../internal/constants\";\r\nlet _isPromiseSupported;\r\nexport function createNativePromise(executor, timeout) {\r\n    !_isPromiseSupported && (_isPromiseSupported = lazySafeGetInst(STR_PROMISE));\r\n    const PrmCls = _isPromiseSupported.v;\r\n    if (!PrmCls) {\r\n        return createAsyncPromise(executor);\r\n    }\r\n    if (!isFunction(executor)) {\r\n        throwTypeError(STR_PROMISE + \": executor is not a function - \" + dumpObj(executor));\r\n    }\r\n    let _state = 0;\r\n    function _strState() {\r\n        return STRING_STATES[_state];\r\n    }\r\n    let thePromise = new PrmCls((resolve, reject) => {\r\n        function _resolve(value) {\r\n            _state = 2;\r\n            resolve(value);\r\n        }\r\n        function _reject(reason) {\r\n            _state = 3;\r\n            reject(reason);\r\n        }\r\n        executor(_resolve, _reject);\r\n    });\r\n    objDefineProp(thePromise, \"state\", {\r\n        get: _strState\r\n    });\r\n    return thePromise;\r\n}\r\nexport const createNativeAllPromise = _createAllPromise(createNativePromise);\r\nexport const createNativeResolvedPromise = _createResolvedPromise(createNativePromise);\r\nexport const createNativeRejectedPromise = _createRejectedPromise(createNativePromise);\r\n//# sourceMappingURL=nativePromise.js.map","import { _createAllPromise, _createPromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { syncItemProcessor } from \"./itemProcessor\";\r\nexport function createSyncPromise(executor) {\r\n    return _createPromise(createSyncPromise, syncItemProcessor(), executor);\r\n}\r\nexport const createSyncAllPromise = _createAllPromise(createSyncPromise);\r\nexport const createSyncResolvedPromise = _createResolvedPromise(createSyncPromise);\r\nexport const createSyncRejectedPromise = _createRejectedPromise(createSyncPromise);\r\n//# sourceMappingURL=syncPromise.js.map","import { isUndefined } from \"@nevware21/ts-utils\";\r\nimport { _createAllPromise, _createPromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { idleItemProcessor } from \"./itemProcessor\";\r\nlet _defaultIdleTimeout;\r\nexport function setDetaultIdleTimeout(idleDeadline) {\r\n    _defaultIdleTimeout = idleDeadline;\r\n}\r\nexport function createIdlePromise(executor, timeout) {\r\n    let theTimeout = isUndefined(timeout) ? _defaultIdleTimeout : timeout;\r\n    return _createPromise(createIdlePromise, idleItemProcessor(theTimeout), executor, theTimeout);\r\n}\r\nexport const createIdleAllPromise = _createAllPromise(createIdlePromise);\r\nexport const createIdleResolvedPromise = _createResolvedPromise(createIdlePromise);\r\nexport const createIdleRejectedPromise = _createRejectedPromise(createIdlePromise);\r\n//# sourceMappingURL=idlePromise.js.map","import { getLazy } from \"@nevware21/ts-utils\";\r\nimport { _createAllPromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { createNativePromise } from \"./nativePromise\";\r\nlet _promiseCreator;\r\nexport function setCreatePromiseImpl(creator) {\r\n    _promiseCreator = creator ? getLazy(() => creator) : null;\r\n}\r\nexport function createPromise(executor, timeout) {\r\n    !_promiseCreator && (_promiseCreator = getLazy(() => createNativePromise));\r\n    return _promiseCreator.v.call(this, executor, timeout);\r\n}\r\nexport const createAllPromise = _createAllPromise(createPromise);\r\nexport const createResolvedPromise = _createResolvedPromise(createPromise);\r\nexport const createRejectedPromise = _createRejectedPromise(createPromise);\r\n//# sourceMappingURL=promise.js.map","import { arrForEach, arrIndexOf, createCustomError, getLength, isPromiseLike, objDefine, objDefineProp, scheduleTimeout, utcNow } from \"@nevware21/ts-utils\";\r\nimport { doAwait, doAwaitResponse } from \"../promise/await\";\r\nimport { createPromise } from \"../promise/promise\";\r\nconst REJECT = \"reject\";\r\nconst REJECTED_ERROR = \"Rejected\";\r\nlet _schedulerId = 0;\r\nlet _debugName;\r\nlet _debugIntState;\r\nlet _customErrors = {};\r\nconst _rejectDone = () => {\r\n};\r\nvar _createError = (type, evt, message) => {\r\n    !_customErrors[type] && (_customErrors[type] = createCustomError(type));\r\n    let now = utcNow();\r\n    return new (_customErrors[type])(`Task [${evt.id}] ${message || \"\"}- ${(evt.st ? \"Running\" : \"Waiting\")}: ${_calcTime(now, evt.st || evt.cr)}`);\r\n};\r\nfunction _calcTime(now, start) {\r\n    return ((now - start) || \"0\") + \" ms\";\r\n}\r\nfunction _abortStaleTasks(taskQueue, staleTimeoutPeriod) {\r\n    let now = utcNow();\r\n    let expired = now - staleTimeoutPeriod;\r\n    arrForEach(taskQueue, (evt) => {\r\n        if (evt && !evt.rj && (evt.st && evt.st < expired) || (!evt.st && evt.cr && evt.cr < expired)) {\r\n            evt && evt[REJECT](evt.rj || _createError(\"Aborted\", evt, \"Stale \"));\r\n        }\r\n    });\r\n}\r\nfunction _removeTask(queue, taskDetail) {\r\n    let idx = arrIndexOf(queue, taskDetail);\r\n    if (idx !== -1) {\r\n        queue.splice(idx, 1);\r\n    }\r\n}\r\nfunction _addDebugState(theScheduler, nameFn, stateFn) {\r\n    _debugName = _debugName || { toString: () => \"[[SchedulerName]]\" };\r\n    _debugIntState = _debugIntState || { toString: () => \"[[SchedulerState]]\" };\r\n    objDefineProp(theScheduler, _debugName, { get: nameFn });\r\n    objDefineProp(theScheduler, _debugIntState, { get: stateFn });\r\n}\r\nexport function createTaskScheduler(newPromise, name) {\r\n    let _theTask;\r\n    let _running = [];\r\n    let _waiting = [];\r\n    let _staleTimeoutPeriod = 600000;\r\n    let _staleTimeoutCheckPeriod = _staleTimeoutPeriod / 10;\r\n    let _taskCount = 0;\r\n    let _schedulerName = (name ? (name + \".\") : \"\") + _schedulerId++;\r\n    let _blockedTimer;\r\n    newPromise = newPromise || createPromise;\r\n    const _startBlockedTimer = () => {\r\n        let hasTasks = (getLength(_running) + getLength(_waiting)) > 0;\r\n        if (_staleTimeoutPeriod > 0) {\r\n            if (!_blockedTimer) {\r\n                _blockedTimer = scheduleTimeout(() => {\r\n                    _abortStaleTasks(_running, _staleTimeoutPeriod);\r\n                    _abortStaleTasks(_waiting, _staleTimeoutPeriod);\r\n                    _blockedTimer && (_blockedTimer.enabled = ((getLength(_running) + getLength(_waiting)) > 0));\r\n                }, _staleTimeoutCheckPeriod);\r\n                _blockedTimer.unref();\r\n            }\r\n            _blockedTimer && (_blockedTimer.enabled = hasTasks);\r\n        }\r\n        else {\r\n        }\r\n    };\r\n    const _queueTask = (startAction, taskName, timeout) => {\r\n        let taskId = _schedulerName + \".\" + _taskCount++;\r\n        if (taskName) {\r\n            taskId += \"-(\" + taskName + \")\";\r\n        }\r\n        let newTask = {\r\n            id: taskId,\r\n            cr: utcNow(),\r\n            to: timeout,\r\n            [REJECT]: (reason) => {\r\n                newTask.rj = reason || _createError(REJECTED_ERROR, newTask);\r\n                newTask[REJECT] = _rejectDone;\r\n            }\r\n        };\r\n        if (!_theTask) {\r\n            newTask.p = newPromise(_runTask(newTask, startAction));\r\n        }\r\n        else {\r\n            newTask.p = _waitForPreviousTask(newTask, _theTask, startAction);\r\n        }\r\n        _theTask = newTask;\r\n        return newTask.p;\r\n    };\r\n    const _runTask = (taskDetail, startAction) => {\r\n        taskDetail.st = utcNow();\r\n        _running.push(taskDetail);\r\n        _startBlockedTimer();\r\n        return (onTaskResolve, onTaskReject) => {\r\n            const _promiseReject = (reason) => {\r\n                taskDetail.rj = taskDetail.rj || reason || _createError(REJECTED_ERROR, taskDetail);\r\n                taskDetail[REJECT] = _rejectDone;\r\n                _doCleanup(taskDetail);\r\n                onTaskResolve = null;\r\n                onTaskReject && onTaskReject(reason);\r\n                onTaskReject = null;\r\n            };\r\n            let taskId = taskDetail.id;\r\n            if (taskDetail.rj) {\r\n                _promiseReject(taskDetail.rj);\r\n            }\r\n            else {\r\n                taskDetail[REJECT] = _promiseReject;\r\n                try {\r\n                    let startResult = startAction(taskId);\r\n                    if (taskDetail.to && isPromiseLike(startResult)) {\r\n                        taskDetail.t = scheduleTimeout(() => {\r\n                            _promiseReject(_createError(\"Timeout\", taskDetail));\r\n                        }, taskDetail.to);\r\n                    }\r\n                    doAwait(startResult, (theResult) => {\r\n                        _doCleanup(taskDetail);\r\n                        onTaskReject = null;\r\n                        onTaskResolve && onTaskResolve(theResult);\r\n                        onTaskResolve = null;\r\n                    }, _promiseReject);\r\n                }\r\n                catch (e) {\r\n                    _promiseReject(e);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    const _waitForPreviousTask = (taskDetail, prevTask, startAction) => {\r\n        _waiting.push(taskDetail);\r\n        _startBlockedTimer();\r\n        return newPromise((onWaitResolve, onWaitReject) => {\r\n            let taskId = taskDetail.id;\r\n            let prevTaskId = prevTask.id;\r\n            doAwaitResponse(prevTask.p, () => {\r\n                _removeTask(_waiting, taskDetail);\r\n                _runTask(taskDetail, startAction)(onWaitResolve, onWaitReject);\r\n            });\r\n        });\r\n    };\r\n    const _doCleanup = (taskDetail) => {\r\n        _removeTask(_running, taskDetail);\r\n        taskDetail.t && taskDetail.t.cancel();\r\n        taskDetail.t = null;\r\n        if (_theTask && _theTask === taskDetail) {\r\n            _theTask = null;\r\n            if (getLength(_running) + getLength(_waiting) === 0) {\r\n                _blockedTimer && _blockedTimer.cancel();\r\n                _blockedTimer = null;\r\n            }\r\n        }\r\n    };\r\n    let theScheduler = {\r\n        idle: true,\r\n        queue: _queueTask,\r\n        setStaleTimeout: (staleTimeout, staleCheckPeriod) => {\r\n            _blockedTimer && _blockedTimer.cancel();\r\n            _blockedTimer = null;\r\n            _staleTimeoutPeriod = staleTimeout;\r\n            _staleTimeoutCheckPeriod = staleCheckPeriod || staleTimeout / 10;\r\n            _startBlockedTimer();\r\n        }\r\n    };\r\n    objDefine(theScheduler, \"idle\", {\r\n        g: () => {\r\n            return getLength(_running) + getLength(_waiting) === 0;\r\n        }\r\n    });\r\n    _addDebugState(theScheduler, () => _schedulerName, () => {\r\n        return {\r\n            l: _theTask,\r\n            r: _running,\r\n            w: _waiting\r\n        };\r\n    });\r\n    return theScheduler;\r\n}\r\n//# sourceMappingURL=taskScheduler.js.map"],"names":["UNDEF_VALUE","undefined","NULL_VALUE","EMPTY","FUNCTION","OBJECT","PROTOTYPE","__PROTO__","UNDEFINED","SYMBOL","LENGTH","NAME","SLICE","ObjClass","Object","ObjProto","StrCls","String","ArrProto","ArrCls","Array","_createIs","theType","value","objToString","toString","call","isUndefined","isFunction","isObject","isArray","isNumber","isError","isPromiseLike","then","objGetOwnPropertyDescriptor","getOwnPropertyDescriptor","objHasOwn","obj","prop","hasOwnProperty","objForEachKey","theObject","callbackfn","thisArg","throwTypeError","message","TypeError","_objFreeze","objDeepFreeze","key","objFreeze","objGetPrototypeOf","_wellKnownSymbolMap","_createKeyValueMap","completeFn","let","theMap","asyncIterator","hasInstance","isConcatSpreadable","iterator","match","matchAll","replace","search","species","split","toPrimitive","toStringTag","unscopables","asString","GLOBAL_CONFIG_KEY","_globalCfg","_getGlobalValue","result","globalThis","self","window","global","dumpObj","object","format","propertyValueDump","stack","name","JSON","stringify","e","_arrSlice","propName","_unwrapFunction","funcName","clsProto","clsFn","theFunc","apply","arguments","_wellKnownSymbolCache","propMap","c","v","w","g","s","objDefineProp","objDefine","target","propDesc","desc","l","get","set","newValue","_globalLazyTestHooks","_fetchLazyTestHooks","gbl","getLazy","cb","lazyValue","b","lzy","configurable","safeGetLazy","defValue","safeGet","_cachedGlobal","_cachedWindow","_cachedDocument","_isNode","lazySafeGetInst","getInst","getGlobal","useCached","getDocument","getWindow","isNode","process","versions","node","_symbol","_symbolFor","_symbolKeyFor","_getSymbolValue","getSymbol","resetCache","fnApply","arrForEach","theArray","len","idx","arrIndexOf","arrSlice","objCreate","type","tempFunc","_isProtoArray","objSetPrototypeOf","proto","d","_safeSetName","baseClass","_safeDefineName","utcNow","Date","now","polyUtcNow","getTime","getLength","_perf","perfNow","perf","UNREF","HAS_REF","ENABLED","_createTimerHandler","startTimer","refreshFn","cancelFn","ref","timerId","theTimerHandler","_unref","_refresh","_cancel","cancel","refresh","hasRef","unref","enabled","h","dn","scheduleTimeout","_createTimeoutWith","this","overrideFn","theArgs","isArr","length","setFn","setTimeout","clearFn","clearTimeout","timerFn","handler","_hasIdleCallback","_defaultIdleTimeout","_maxExecutionTime","doAwaitResponse","doAwait","rejected","reason","resolveFn","rejectFn","finallyFn","doFinally","finally","_debugState","_debugResult","_debugHandled","_promiseDebugEnabled","STRING_STATES","DISPATCH_EVENT","_hasInitEvent","STR_PROMISE","NODE_UNHANDLED_REJECTION","UNHANDLED_REJECTION","toLowerCase","_currentPromiseId","_uniquePromiseId","_unhandledRejectionTimeout","_hasPromiseRejectionEvent","dumpFnObj","_createPromise","newPromise","processor","executor","additionalArgs","_state","_hasResolved","_settledValue","_queue","_id","_parentId","_handled","_unHandledRejectionHandler","_thePromise","_then","onResolved","onRejected","push","resolve","reject","_processQueue","pop","handledFn","knownName","description","_strState","pending","slice","_createSettleIfFn","newState","allowState","theValue","_notifyUnhandledRejection","emit","emitEvent","evtName","useNewEvent","doc","theEvt","evt","createEvent","initEvent","Event","theConsole","catch","thenFinally","onFinally","catchFinally","thePromise","stateFn","resultFn","_polyfill","_rejectFn","_createAllPromise","input","values","item","_createResolvedPromise","_createRejectedPromise","_resolve","_processPendingItems","fn","createAsyncPromise","timeout","callbackTimeout","createAsyncAllPromise","createAsyncResolvedPromise","createAsyncRejectedPromise","_isPromiseSupported","createNativePromise","PrmCls","createNativeAllPromise","createNativeResolvedPromise","createNativeRejectedPromise","createSyncPromise","createSyncAllPromise","createSyncResolvedPromise","createSyncRejectedPromise","createIdlePromise","theTimeout","options","scheduleIdleCallback","callback","_createDeadline","timedOut","startTime","didTimeout","timeRemaining","isDefined","arg","requestIdleCallback","idleId","cancelIdleCallback","deadline","createIdleAllPromise","createIdleResolvedPromise","createIdleRejectedPromise","_promiseCreator","createPromise","createAllPromise","createResolvedPromise","createRejectedPromise","REJECT","REJECTED_ERROR","_schedulerId","_debugName","_debugIntState","_customErrors","_rejectDone","_createError","theBaseClass","Error","orgName","captureFn","captureStackTrace","_this","orgProto","_self","__","constructor","id","st","cr","_abortStaleTasks","taskQueue","staleTimeoutPeriod","expired","rj","_removeTask","queue","taskDetail","splice","_theTask","_running","_waiting","_staleTimeoutPeriod","_staleTimeoutCheckPeriod","_taskCount","_schedulerName","_blockedTimer","_startBlockedTimer","hasTasks","_runTask","startAction","onTaskResolve","onTaskReject","_promiseReject","_doCleanup","taskId","startResult","to","t","theResult","theScheduler","nameFn","idle","taskName","newTask","prevTask","p","onWaitResolve","onWaitReject","setStaleTimeout","staleTimeout","staleCheckPeriod","r","creator","idleDeadline","logger"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]}