{"version":3,"file":"promise.js","sourceRoot":"","sources":["../../src/polyfills/promise.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,cAAc,EAAE,aAAa,EAAoB,MAAM,qBAAqB,CAAC;AACtF,OAAO,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,0BAA0B,EAAE,0BAA0B,EAAE,MAAM,yBAAyB,CAAC;AAI5I,IAAM,iBAAiB,GAAW,cAAc,uCAA2D,CAAC;AAuD5G,MAAM,CAAC,IAAI,WAAW,GAAG,CAAC;IACtB,SAAS,eAAe,CAAI,QAA4B;QACpD,IAAI,CAAC,EAAE,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,iBAAiB,EAAE;YACnB,IAAI,CAAC,iBAAiB,CAAC,GAAG,SAAS,CAAC;SACvC;QACD,gDAAgD;QAChD,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE;YACzB,GAAG,EAAE;gBACD,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACzB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IACD,eAAe,CAAC,GAAG,GAAG,qBAAqB,CAAC;IAC5C,gDAAgD;IAChD,eAAe,CAAC,MAAM,GAAG,0BAA0B,CAAC;IACpD,eAAe,CAAC,OAAO,GAAG,0BAA0B,CAAC;IACrD,IAAI,QAAQ,GAAG,eAAe,CAAC,SAAS,CAAC;IACzC,QAAQ,CAAC,IAAI,GAAG,UAAU,UAAe,EAAE,UAAe;QACtD,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAChD,CAAC,CAAC;IACF,QAAQ,CAAC,KAAK,GAAG,UAAU,UAAe;QACtC,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC,CAAC;IACF,QAAQ,CAAC,OAAO,GAAG,UAAU,SAAc;QACvC,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC,CAAC;IACF,OAAO,eAAoD,CAAC;AAChE,CAAC,EAAE,CAAC,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getKnownSymbol, objDefineProp, WellKnownSymbols } from \"@nevware21/ts-utils\";\r\nimport { createAsyncAllPromise, createAsyncPromise, createAsyncRejectedPromise, createAsyncResolvedPromise } from \"../promise/asyncPromise\";\r\nimport { IPromise } from \"../interfaces/IPromise\";\r\nimport { PromiseExecutor } from \"../interfaces/types\";\r\n\r\nconst toStringTagSymbol: symbol = getKnownSymbol(WellKnownSymbols.toStringTag) as typeof Symbol.toStringTag;\r\n\r\nexport interface PolyPromiseConstructor {\r\n    /**\r\n     * Creates a new Promise.\r\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\r\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\r\n     * and a reject callback used to reject the promise with a provided reason or error.\r\n     */\r\n    new <T>(executor: PromiseExecutor<T>): IPromise<T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>;\r\n\r\n    // see: lib.es2015.iterable.d.ts\r\n    // all<T>(values: Iterable<T | PromiseLike<T>>): Promise<T[]>;\r\n \r\n    // Not yet implemented\r\n    //  /**\r\n    //   * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n    //   * or rejected.\r\n    //   * @param values An array of Promises.\r\n    //   * @returns A new Promise.\r\n    //   */\r\n    // race<T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>;\r\n \r\n    // see: lib.es2015.iterable.d.ts\r\n    // race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n \r\n    /**\r\n     * Creates a new rejected promise for the provided reason.\r\n     * @param reason The reason the promise was rejected.\r\n     * @returns A new rejected Promise.\r\n     */\r\n    reject<T = never>(reason?: any): Promise<T>;\r\n \r\n    /**\r\n     * Creates a new resolved promise.\r\n     * @returns A resolved promise.\r\n     */\r\n    resolve(): Promise<void>;\r\n \r\n    /**\r\n     * Creates a new resolved promise for the provided value.\r\n     * @param value A promise.\r\n     * @returns A promise whose internal state matches the provided promise.\r\n     */\r\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\r\n}\r\n\r\nexport let PolyPromise = (function () {\r\n    function PolyPromiseImpl<T>(executor: PromiseExecutor<T>) {\r\n        this._$ = createAsyncPromise(executor);\r\n        if (toStringTagSymbol) {\r\n            this[toStringTagSymbol] = \"Promise\";\r\n        }\r\n        // Re-Expose the state of the underlying promise\r\n        objDefineProp(this, \"state\", {\r\n            get: function() {\r\n                return this._$.state;\r\n            }\r\n        });\r\n    }\r\n    PolyPromiseImpl.all = createAsyncAllPromise;\r\n    //PolyPromiseImpl.race = createAsyncRacePromise;\r\n    PolyPromiseImpl.reject = createAsyncRejectedPromise;\r\n    PolyPromiseImpl.resolve = createAsyncResolvedPromise;\r\n    let theProto = PolyPromiseImpl.prototype;\r\n    theProto.then = function (onResolved: any, onRejected: any) {\r\n        return this._$.then(onResolved, onRejected);\r\n    };\r\n    theProto.catch = function (onRejected: any) {\r\n        return this._$.catch(onRejected);\r\n    };\r\n    theProto.finally = function (onfinally: any) {\r\n        return this._$.finally(onfinally);\r\n    };\r\n    return PolyPromiseImpl as unknown as PolyPromiseConstructor;\r\n}());"]}