{"version":3,"file":"find.js","sourceRoot":"","sources":["../../src/array/find.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AACrE,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,eAAe,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAG1G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsEG;AACH,MAAM,CAAC,MAAM,OAAO,GAAK,aAAa,CAAA,uBAAuB,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAyJ,CAAC;AAErP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+DG;AACH,MAAM,CAAC,MAAM,YAAY,GAAI,aAAa,CAAA,uBAAuB,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAA8I,CAAC;AAExP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAI,aAAa,CAAA,uBAAuB,CAAC,UAAU,EAAE,QAAe,EAAE,eAAe,CAAyJ,CAAC;AAEvQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAI,aAAa,CAAA,uBAAuB,CAAC,eAAe,EAAE,QAAe,EAAE,oBAAoB,CAA8I,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { polyArrFind, polyArrFindIndex, polyArrFindLast, polyArrFindLastIndex } from \"../polyfills/array\";\r\nimport { ArrPredicateCallbackFn, ArrPredicateCallbackFn2 } from \"./callbacks\";\r\n\r\n/**\r\n * The arrFind() method returns the first element in the provided array that satisfies\r\n * the provided testing function. If no values satisfy the testing function, undefined\r\n * is returned.\r\n * - If you need the index of the found element in the array, use {@link arrFindIndex}.\r\n * - If you need to find the index of a value, use arrIndexOf(). (It's similar to {@link arrFindIndex}, but\r\n * checks each element for equality with the value instead of using a testing function.)\r\n * - If you need to find if a value exists in an array, use {@link arrIncludes}. Again, it checks each element for\r\n * equality with the value instead of using a testing function.\r\n * - If you need to find if any element satisfies the provided testing function, use {@link arrSome}.\r\n *\r\n * The arrFind() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array in ascending-index order, until `callbackFn` returns a truthy value. arrFind() then returns that\r\n * element and stops iterating through the array. If callbackFn never returns a truthy value, arrFind() returns\r\n * undefined.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in\r\n * sparse arrays behave the same as undefined.\r\n *\r\n * arrFind() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of `callbackFn`. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFind() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by callbackFn, its value passed to the\r\n * `callbackFn` will be the value at the time that element gets visited. Deleted elements are visited as if they\r\n * were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The first element in the array that satisfies the provided testing function. Otherwise, undefined\r\n * is returned.\r\n * @example\r\n * ```ts\r\n * const inventory = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 },\r\n * ];\r\n *\r\n * function isCherries(fruit) {\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * console.log(arrFind(inventory, isCherries));\r\n * // { name: 'cherries', quantity: 5 }\r\n *\r\n * function isPrime(element, index, array) {\r\n *   let start = 2;\r\n *   while (start <= Math.sqrt(element)) {\r\n *     if (element % start++ < 1) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return element > 1;\r\n * }\r\n *\r\n * console.log(arrFind([4, 6, 8, 12], isPrime)); // undefined, not found\r\n * console.log(arrFind([4, 5, 8, 12], isPrime)); // 5\r\n *\r\n * // Array Like\r\n * console.log(arrFind({ length: 4, 0: 4, 1: 6, 2: 8, 3: 12 }, isPrime)); // undefined, not found\r\n * console.log(arrFind({ length: 4:, 0: 4, 1: 5, 2: 8, 3: 12 }, isPrime)); // 5\r\n * ```\r\n */\r\nexport const arrFind =  (/*#__PURE__*/_unwrapFunctionWithPoly(\"find\", ArrProto, polyArrFind) as <T, E extends T>(theArray: ArrayLike<T>, callbackFn: ArrPredicateCallbackFn<T, E> | ArrPredicateCallbackFn2<T>, thisArg?: any) => T | E | undefined);\r\n\r\n/**\r\n * The arrFindIndex() method returns the index of the first element in an array that satisfies the provided testing\r\n * function. If no elements satisfy the testing function, -1 is returned.\r\n *\r\n * The arrFindIndex() is an iterative method. It calls a provided callbackFn function once for each element in an\r\n * array in ascending-index order, until callbackFn returns a truthy value. arrFindIndex() then returns the index\r\n * of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, arrFindIndex()\r\n * returns -1.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse\r\n * arrays behave the same as undefined.\r\n *\r\n * arrFindIndex() does not mutate the array on which it is called, but the function provided as `callbackFn` can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFindIndex() began.\r\n * - Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\r\n * If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The index of the first element in the array that passes the test. Otherwise, -1.\r\n * @example\r\n * ```ts\r\n * const inventory: Array<{ name: string, quantity: number}> = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 }\r\n * ];\r\n *\r\n * function isCherries(fruit: { name: string, quantity: number}) {\r\n *   return fruit.name === \"cherries\";\r\n *  }\r\n *\r\n * arrFindIndex(inventory, isCherries); // 2\r\n *\r\n * function isPrime(element: number) {\r\n *   if (element % 2 === 0 || element < 2) {\r\n *     return false;\r\n *   }\r\n *\r\n *   for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\r\n *     if (element % factor === 0) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return true;\r\n * }\r\n *\r\n * arrFindIndex([4, 6, 8, 9, 12], isPrime) // -1\r\n * arrFindIndex([4, 6, 7, 9, 12], isPrime) // 2\r\n *\r\n * // Array Like\r\n * arrFindIndex({ length: 5, 0: 4, 1: 6, 2: 8, 3: 9, 4: 12 }, isPrime) // -1\r\n * arrFindIndex({ length: 5:, 0: 4, 1: 6, 2: 7, 3: 9, 4: 12 }, isPrime) // 2\r\n * ```\r\n */\r\nexport const arrFindIndex = (/*#__PURE__*/_unwrapFunctionWithPoly(\"findIndex\", ArrProto, polyArrFindIndex) as <T, E extends T>(theArray: ArrayLike<T>, callbackFn: ArrPredicateCallbackFn<T, E> | ArrPredicateCallbackFn2<T>, thisArg?: any) => number);\r\n\r\n/**\r\n * The arrFindLast() method iterates the array in reverse order and returns the value of the first element that\r\n * satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned.\r\n * - If you need the index of the found element in the array, use arrFindLastIndex().\r\n * - If you need to find the index of a value, use arrLastIndexOf(). (It's similar to arrFindLastIndex(), but checks\r\n * each element for equality with the value instead of using a testing function.)\r\n * - If you need to find if a value exists in an array, use {@link arrIncludes}. Again, it checks each element for\r\n * equality with the value instead of using a testing function.\r\n * - If you need to find if any element satisfies the provided testing function, use {@link arrSome}.\r\n *\r\n * The arrFindLast() method is an iterative method. It calls a provided callbackFn function once for each element\r\n * in an array in descending-index order, until callbackFn returns a truthy value. arrFindLast() then returns that\r\n * element and stops iterating through the array. If `callbackFn` never returns a truthy value, arrFindLast() returns\r\n * undefined.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse\r\n * arrays behave the same as undefined.\r\n *\r\n * arrFindLast() does not mutate the array on which it is called, but the function provided as `callbackFn` can.\r\n * Note, however, that the length of the array is saved before the first invocation of `callbackFn`. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFindLast() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The last element in the array that satisfies the provided testing function. Otherwise, undefined\r\n * is returned.\r\n * @example\r\n * ```ts\r\n * const inventory = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 },\r\n * ];\r\n *\r\n * function isCherries(fruit) {\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * console.log(arrFindLast(inventory, isCherries));\r\n * // { name: 'cherries', quantity: 5 }\r\n *\r\n * function isPrime(element, index, array) {\r\n *   let start = 2;\r\n *   while (start <= Math.sqrt(element)) {\r\n *     if (element % start++ < 1) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return element > 1;\r\n * }\r\n *\r\n * console.log(arrFindLast([4, 6, 8, 12], isPrime)); // undefined, not found\r\n * console.log(arrFindLast([4, 5, 7, 12], isPrime)); // 7\r\n *\r\n * // Array Like\r\n * console.log(arrFindLast({ length: 4, 0: 4, 1: 6, 2: 8, 3: 12 }, isPrime)); // undefined, not found\r\n * console.log(arrFindLast({ length: 4, 0: 4, 1: 5, 2: 7, 3: 12 }, isPrime)); // 7\r\n * ```\r\n */\r\nexport const arrFindLast = (/*#__PURE__*/_unwrapFunctionWithPoly(\"findLast\", ArrProto as any, polyArrFindLast) as <T, E extends T>(theArray: ArrayLike<T>, callbackFn: ArrPredicateCallbackFn<T, E> | ArrPredicateCallbackFn2<T>, thisArg?: any) => T | E | undefined);\r\n\r\n/**\r\n * The arrFindLastIndex() method iterates the array in reverse order and returns the index of the first element that\r\n * satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.\r\n *\r\n * The arrFindLastIndex() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array in descending-index order, until callbackFn returns a truthy value. arrFindLastIndex() then returns the\r\n * index of that element and stops iterating through the array. If callbackFn never returns a truthy value, returns -1.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse arrays\r\n * behave the same as undefined.\r\n *\r\n * arrFindLastIndex() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFindLastIndex() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the callbackFn\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The index of the last (highest-index) element in the array that passes the test. Otherwise -1 if\r\n * no matching element is found.\r\n * @example\r\n * ```ts\r\n * const inventory: Array<{ name: string, quantity: number}> = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 }\r\n * ];\r\n *\r\n * let called = 0;\r\n * function isCherries(fruit: { name: string, quantity: number}) {\r\n *   called++;\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * arrFindLastIndex(inventory, isCherries)' // 2\r\n * // called === 1\r\n *\r\n * called = 0;\r\n * function isPrime(element: number) {\r\n *   called++;\r\n *   if (element % 2 === 0 || element < 2) {\r\n *     return false;\r\n *   }\r\n *   for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\r\n *     if (element % factor === 0) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return true;\r\n * }\r\n *\r\n * arrFindLastIndex([4, 6, 8, 9, 12], isPrime); // -1\r\n * // called === 5\r\n *\r\n * called = 0;\r\n * arrFindLastIndex([4, 6, 7, 9, 12], isPrime); // 2\r\n * // called === 3\r\n *\r\n * // Array Like\r\n * called = 0;\r\n * arrFindLastIndex({ length: 5: 0: 4, 1: 6, 2: 8, 3: 9, 4: 12 }, isPrime); // -1\r\n * // called === 5\r\n *\r\n * called = 0;\r\n * arrFindLastIndex({ length: 5: 0: 4, 1: 6, 2: 7, 3: 9, 4: 12 }, isPrime); // 2\r\n * // called === 3\r\n\r\n * ```\r\n */\r\nexport const arrFindLastIndex = (/*#__PURE__*/_unwrapFunctionWithPoly(\"findLastIndex\", ArrProto as any, polyArrFindLastIndex) as <T, E extends T>(theArray: ArrayLike<T>, callbackFn: ArrPredicateCallbackFn<T, E> | ArrPredicateCallbackFn2<T>, thisArg?: any) => number);\r\n"]}