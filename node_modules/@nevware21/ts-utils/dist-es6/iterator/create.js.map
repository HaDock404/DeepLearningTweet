{"version":3,"file":"create.js","sourceRoot":"","sources":["../../src/iterator/create.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AA0ClD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,wBAAwB;AACxB,MAAM,UAAU,cAAc,CAAI,GAA6B;IAC3D,OAAO,YAAY,CAAC,EAAiB,EAAE,GAAG,CAAC,CAAC;AAChD,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AACH,MAAM,UAAU,YAAY,CAAO,MAAS,EAAE,GAA6B;IACvE,IAAI,QAAQ,GAAG,cAAc,mCAA2B,CAAC;IAEzD,SAAS,eAAe;QACpB,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;IAEnC,OAAO,MAAyB,CAAC;AACrC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,wBAAwB;AACxB,MAAM,UAAU,cAAc,CAAI,GAA6B;IAC3D,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,SAAS,MAAM;QACX,OAAO,GAAG,CAAC,CAAC,CAAC;IACjB,CAAC;IAED,SAAS,KAAK;QACV,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAErD,IAAI,MAAM,GAAI;YACV,CAAC,IAAI,CAAC,EAAE,MAAM;SACjB,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE;YACT,SAAS,CAAoB,MAAa,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;SACrE;QAED,OAAO,MAA2B,CAAC;IACvC,CAAC;IAED,SAAS,OAAO,CAAC,KAAS;QACtB,MAAM,GAAG,IAAI,CAAC;QACd,OAAO;YACH,CAAC,IAAI,CAAC,EAAE,IAAI;YACZ,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;SACjC,CAAC;IACN,CAAC;IAED,SAAS,MAAM,CAAC,CAAO;QACnB,MAAM,GAAG,IAAI,CAAC;QACd,OAAO;YACH,CAAC,IAAI,CAAC,EAAE,IAAI;YACZ,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7B,CAAC;IACN,CAAC;IAED,IAAI,WAAW,GAAgB;QAC3B,IAAI,EAAE,KAAK;KACd,CAAC;IAEF,IAAI,GAAG,CAAC,CAAC,EAAE;QACP,WAAW,CAAC,MAAM,GAAG,OAAO,CAAA;KAC/B;IAED,IAAI,GAAG,CAAC,CAAC,EAAE;QACP,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC;KAC9B;IAED,OAAO,WAAW,CAAC;AACvB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { DONE, VALUE } from \"../internal/constants\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { WellKnownSymbols } from \"../symbol/well_known\";\r\n\r\n/**\r\n * The context used to manage how the {@link createIterator} returns and moves to the next item,\r\n * and provides to the current value `v`.\r\n * @since 0.4.2\r\n * @group Iterator\r\n */\r\nexport interface CreateIteratorContext<T> {\r\n    /**\r\n     * A function that returns a boolean to indicate whether it was able to produce\r\n     * the next value in the sequence.\r\n     * @param args - Optional additional arguments that where passed to the iterator `next` function.\r\n     * @return `true` if a new value was produced and assigned to the `v` of the context, otherwise `false`\r\n     */\r\n    n: (...args: any) => boolean;\r\n\r\n    /**\r\n     * The current value to be assigned to the returned iterator result, the next `n`\r\n     * function should assign this value to the context as part of incrementing to\r\n     * the next value.\r\n     */\r\n    v?: T;\r\n\r\n    /**\r\n     * Optional function that accepts zero or one argument. This function is called via the\r\n     * iterator `return` function when the iterator caller does not intend to make any more\r\n     * `next()` calls so the implementation and can perform any cleanup actions.\r\n     * @return [Optional] value to be included in the final iteration result\r\n     */\r\n    r?: (value?: T) => T | undefined;\r\n\r\n    /**\r\n     * A function that accepts zero or one argument. The function is called via the iterator\r\n     * `throw` function when that the iterator caller detects an error condition, and e is\r\n     * typically an Error instance.\r\n     * @return [Optional] value to be included in the final iteration result\r\n     */\r\n    t?: (e?: any) => T | undefined;\r\n}\r\n\r\n/**\r\n * Create an iterable which conforms to the `Iterable` protocol, it uses the provided `ctx` to\r\n * create an `Iterator` via {@link createIterator}.\r\n *\r\n * @see [Iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol)\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the type that will be returned by the iterator\r\n * @param ctx - The context used to manage the iteration over the items.\r\n * @returns A new Iterable instance\r\n * @example\r\n * ```ts\r\n * let current = 0;\r\n * let next = 1;\r\n * let done = false;\r\n * let fibCtx: CreateIteratorContext<number> = {\r\n *     n: function() {\r\n *         fibCtx.v = current;\r\n *         current = next;\r\n *         next = fibCtx.v + next;\r\n *\r\n *         // Return not done\r\n *         return false;\r\n *     },\r\n *     r: function(value) {\r\n *         done = true;\r\n *         return value;\r\n *     }\r\n * };\r\n *\r\n * let values: number[] = [];\r\n * iterForOf(createIterable(fibCtx), (value) => {\r\n *     values.push(value);\r\n *     if (values.length === 10) {\r\n *         return -1;\r\n *     }\r\n * });\r\n *\r\n * // Done is true\r\n * // done === true\r\n * // Values: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createIterable<T>(ctx: CreateIteratorContext<T>): Iterable<T> {\r\n    return makeIterable({} as Iterable<T>, ctx);\r\n}\r\n\r\n/**\r\n * Adds or replaces an iterable implementation that conforms to the `Iterable` protocol to the target instance, it\r\n * uses the provided `ctx` to create an `Iterator` via {@link createIterator}.\r\n *\r\n * @see [Iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol)\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the target type\r\n * @typeParam I - Identifies the type that will be returned by the iterator\r\n * @param ctx - The context used to manage the iteration over the items.\r\n * @returns A new Iterable instance\r\n * @example\r\n * ```ts\r\n * let current = 0;\r\n * let next = 1;\r\n * let done = false;\r\n * let fibCtx: CreateIteratorContext<number> = {\r\n *     n: function() {\r\n *         fibCtx.v = current;\r\n *         current = next;\r\n *         next = fibCtx.v + next;\r\n *\r\n *         // Return not done, so it will just continue\r\n *         return false;\r\n *     }\r\n * };\r\n *\r\n * let values: number[] = [];\r\n * let theIterable: Iterable<T> = makeIterable({}, fibCtx);\r\n *\r\n * iterForOf(theIterable, (value) => {\r\n *     values.push(value);\r\n *     if (values.length === 10) {\r\n *         return -1;\r\n *     }\r\n * });\r\n *\r\n * // Values: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\r\n * ```\r\n */\r\nexport function makeIterable<T, I>(target: T, ctx: CreateIteratorContext<I>): T & Iterable<I> {\r\n    let itSymbol = getKnownSymbol(WellKnownSymbols.iterator);\r\n\r\n    function _createIterator() {\r\n        return createIterator(ctx);\r\n    }\r\n\r\n    target[itSymbol] = _createIterator;\r\n\r\n    return target as T & Iterable<I>;\r\n}\r\n\r\n/**\r\n * Create an iterator which conforms to the `Iterator` protocol, it uses the provided `ctx` to\r\n * managed moving to the `next`.\r\n *\r\n * @see [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol)\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the type that will be returned by the iterator\r\n * @param ctx - The context used to manage the iteration over the items.\r\n * @returns A new Iterator instance\r\n * @example\r\n * ```ts\r\n * let idx = -1;\r\n * let theValues = [ 5, 10, 15, 20, 25, 30 ];\r\n *\r\n * function getNextFn() {\r\n *     idx++;\r\n *     let isDone = idx >= theValues.length;\r\n *     if (!isDone) {\r\n *         // this is passed as the current iterator\r\n *         // so you can directly assign the next \"value\" that will be returned\r\n *         this.v = theValues[idx];\r\n *     }\r\n *\r\n *     return isDone;\r\n * }\r\n *\r\n * let theIterator = createIterator<number>({ n: getNextFn });\r\n *\r\n * let values: number[] = [];\r\n * iterForOf(theIterator, (value) => {\r\n *     values.push(value);\r\n * });\r\n *\r\n * // Values: [5, 10, 15, 20, 25, 30 ]\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createIterator<T>(ctx: CreateIteratorContext<T>): Iterator<T> {\r\n    let isDone = false;\r\n\r\n    function _value(): T {\r\n        return ctx.v;\r\n    }\r\n\r\n    function _next(): IteratorResult<T> {\r\n        isDone = isDone || (ctx.n ? ctx.n(arguments) : true);\r\n\r\n        let result  = {\r\n            [DONE]: isDone\r\n        };\r\n\r\n        if (!isDone) {\r\n            objDefine<IteratorResult<T>>(result as any, VALUE, { g: _value });\r\n        }\r\n\r\n        return result as IteratorResult<T>;\r\n    }\r\n\r\n    function _return(value?: T): IteratorReturnResult<T> {\r\n        isDone = true;\r\n        return {\r\n            [DONE]: true,\r\n            [VALUE]: ctx.r && ctx.r(value)\r\n        };\r\n    }\r\n\r\n    function _throw(e?: any): IteratorResult<T> {\r\n        isDone = true;\r\n        return {\r\n            [DONE]: true,\r\n            [VALUE]: ctx.t && ctx.t(e)\r\n        };\r\n    }\r\n\r\n    let theIterator: Iterator<T> = {\r\n        next: _next\r\n    };\r\n    \r\n    if (ctx.r) {\r\n        theIterator.return = _return\r\n    }\r\n\r\n    if (ctx.t) {\r\n        theIterator.throw = _throw;\r\n    }\r\n\r\n    return theIterator;\r\n}\r\n"]}