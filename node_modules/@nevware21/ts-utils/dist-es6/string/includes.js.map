{"version":3,"file":"includes.js","sourceRoot":"","sources":["../../src/string/includes.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAA;AACpE,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAExC;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,MAAM,WAAW,GAAwE,EAAC,aAAa,uBAAuB,CAAC,UAAU,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC;AAE9K;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,MAAM,WAAW,GAAwE,WAAW,CAAC;AAG5G;;;;;;;;;;;;;;GAcG;AACH,wBAAwB;AACxB,MAAM,UAAU,eAAe,CAAC,KAAa,EAAE,YAAoB,EAAE,QAAiB;IAClF,IAAI,QAAQ,CAAC,YAAY,CAAC,EAAE;QACxB,cAAc,CAAC,iDAAiD,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAA;KAC5F;IAED,OAAO,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AACtE,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isRegExp } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\"\r\nimport { asString } from \"./as_string\";\r\nimport { strIndexOf } from \"./index_of\";\r\n\r\n/**\r\n * The strIncludes() method performs a __case-sensitive__ search to determine whether one string\r\n * may be found within another string, returning `true` or `false` as appropriate.\r\n *\r\n * This method lets you determine whether or not a string includes another string.\r\n * @since 0.9.0\r\n * @group String\r\n * @param value - The string value to be searched.\r\n * @param searchString - A string to be searched for within the value. Cannot be a regex. All\r\n * values that are not regexes are coerced to strings, so omitting it or passing undefined\r\n * causes `strIncludes()` to search for the string \"undefined\", which is rarely what you want.\r\n * @param position - The position within the string at which to begin searching for searchString. (Defaults to 0.)\r\n * @returns `true` if the search string is found anywhere within the given string value, including\r\n * when searchString is an empty string; otherwise, `false`.\r\n * @throws TypeError If searchString is a regex.\r\n */\r\nexport const strIncludes: (value: string, searchString: string, position?: number) => boolean = (/*#__PURE__*/_unwrapFunctionWithPoly(\"includes\", StrProto, polyStrIncludes));\r\n\r\n/**\r\n * The strContains() method performs a __case-sensitive__ search to determine whether one string\r\n * may be found within another string, returning `true` or `false` as appropriate.\r\n *\r\n * This method lets you determine whether or not a string includes another string.\r\n * @since 0.9.0\r\n * @group String\r\n * @param value - The string value to be searched.\r\n * @param searchString - A string to be searched for within the value. Cannot be a regex. All\r\n * values that are not regexes are coerced to strings, so omitting it or passing undefined\r\n * causes `strContains()` to search for the string \"undefined\", which is rarely what you want.\r\n * @param position - The position within the string at which to begin searching for searchString. (Defaults to 0.)\r\n * @returns `true` if the search string is found anywhere within the given string value, including\r\n * when searchString is an empty string; otherwise, `false`.\r\n * @throws TypeError If searchString is a regex.\r\n */\r\nexport const strContains: (value: string, searchString: string, position?: number) => boolean = strIncludes;\r\n\r\n\r\n/**\r\n * The polyStrIncludes() method performs a case-sensitive search to determine whether one string\r\n * may be found within another string, returning `true` or `false` as appropriate.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Polyfill\r\n * @param value - The string value to be searched.\r\n * @param searchString - A string to be searched for within the value. Cannot be a regex. All\r\n * values that are not regexes are coerced to strings, so omitting it or passing undefined\r\n * causes `strIncludes()` to search for the string \"undefined\", which is rarely what you want.\r\n * @param position - The position within the string at which to begin searching for searchString. (Defaults to 0.)\r\n * @returns `true` if the search string is found anywhere within the given string value, including\r\n * when searchString is an empty string; otherwise, `false`.\r\n * @throws TypeError If searchString is a regex.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyStrIncludes(value: string, searchString: string, position?: number): boolean {\r\n    if (isRegExp(searchString)) {\r\n        throwTypeError(\"'searchString' must not be a regular expression\" + dumpObj(searchString))\r\n    }\r\n\r\n    return strIndexOf(value, asString(searchString), position) !== -1;\r\n}\r\n"]}