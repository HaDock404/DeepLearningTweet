{"version":3,"file":"repeat.js","sourceRoot":"","sources":["../../src/string/repeat.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC9D,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AACnE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AACrE,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEvC;;;;;;;;;;GAUG;AACH,MAAM,CAAC,MAAM,SAAS,GAA6C,EAAC,aAAa,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC;AAE7I;;;;;;;;;;;GAWG;AACH,wBAAwB;AACxB,MAAM,UAAU,aAAa,CAAC,KAAa,EAAE,KAAa;IACtD,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;QAC1B,cAAc,CAAC,iBAAiB,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAA;KAC3D;IAED,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC/B,IAAI,KAAK,GAAG,CAAC,EAAE;QACX,eAAe,CAAC,0CAA0C,CAAC,CAAC;KAC/D;IAED,IAAI,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,OAAM,KAAK,GAAG,CAAC,EAAE,CAAC,KAAK,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE;QAC7C,IAAI,KAAK,GAAG,CAAC,EAAE;YACX,MAAM,IAAI,GAAG,CAAC;SACjB;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isNullOrUndefined, isString } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwRangeError, throwTypeError } from \"../helpers/throw\";\r\nimport { EMPTY, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { mathToInt } from \"../math/to_int\";\r\nimport { asString } from \"./as_string\";\r\n\r\n/**\r\n * The `strRepeat()` method constructs and returns a new string which contains the\r\n * specified number of copies of the string on which it was called, concatenated\r\n * together.\r\n * @group String\r\n * @param value - The value to be repeated\r\n * @param count - An integer between 0 and +Infinity, indicating the number of times to repeat the string.\r\n * @returns A new string containing the specified number of copies of the given string.\r\n * @throws RangeError: repeat count must be non-negative.\r\n * @throws RangeError: repeat count must be less than infinity and not overflow maximum string size.\r\n */\r\nexport const strRepeat: (value: string, count: number) => string = (/*#__PURE__*/_unwrapFunctionWithPoly(\"repeat\", StrProto, polyStrRepeat));\r\n\r\n/**\r\n * The `strRepeat()` method constructs and returns a new string which contains the\r\n * specified number of copies of the string on which it was called, concatenated\r\n * together.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be repeated\r\n * @param count - An integer between 0 and +Infinity, indicating the number of times to repeat the string.\r\n * @returns A new string containing the specified number of copies of the given string.\r\n * @throws RangeError: repeat count must be non-negative.\r\n * @throws RangeError: repeat count must be less than infinity and not overflow maximum string size.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyStrRepeat(value: string, count: number): string {\r\n    if (isNullOrUndefined(value)) {\r\n        throwTypeError(\"can't convert [\" + dumpObj(value) + \"]\")\r\n    }\r\n\r\n    count = mathToInt(count, true);\r\n    if (count < 0) {\r\n        throwRangeError(\"invalid count must be >= 0 && < Infinity\");\r\n    }\r\n\r\n    let pad = isString(value) ? value : asString(value);\r\n    let result = EMPTY;\r\n\r\n    for (;count > 0; (count >>>= 1) && (pad += pad)) {\r\n        if (count & 1) {\r\n            result += pad;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n"]}