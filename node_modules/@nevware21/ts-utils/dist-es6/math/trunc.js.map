{"version":3,"file":"trunc.js","sourceRoot":"","sources":["../../src/math/trunc.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAE9C;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC;AAExD;;;;;;;;;;GAUG;AACH,wBAAwB;AACxB,MAAM,UAAU,aAAa,CAAC,KAAa;IACvC,IAAI,QAAQ,GAAG,CAAC,KAAK,CAAC;IAEtB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { mathCeil, mathFloor } from \"./floor\";\r\n\r\n/**\r\n * The `mathTrunc()` function returns the integer part of a number by removing any fractional digits.\r\n * Unlike the other three Math methods: Math.floor(), Math.ceil() and Math.round(), the way `mathTrunc()`\r\n * works is very simple. It truncates (cuts off) the dot and the digits to the right of it, no matter\r\n * whether the argument is a positive or negative number.\r\n * The argument passed to this method will be converted to number type implicitly.\r\n * @group Math\r\n * @param value - The value to be truncated\r\n * @returns The integer path of the given number\r\n */\r\nexport const mathTrunc = MathCls.trunc || polyMathTrunc;\r\n\r\n/**\r\n * The `mathTrunc()` function returns the integer part of a number by removing any fractional digits.\r\n * Unlike the other three Math methods: Math.floor(), Math.ceil() and Math.round(), the way `mathTrunc()`\r\n * works is very simple. It truncates (cuts off) the dot and the digits to the right of it, no matter\r\n * whether the argument is a positive or negative number.\r\n * The argument passed to this method will be converted to number type implicitly.\r\n * @group Polyfill\r\n * @group Math\r\n * @param value - The value to be truncated\r\n * @returns The integer path of the given number\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyMathTrunc(value: number): number {\r\n    let theValue = +value;\r\n\r\n    return (theValue > 0 ? mathFloor : mathCeil)(theValue);\r\n}"]}