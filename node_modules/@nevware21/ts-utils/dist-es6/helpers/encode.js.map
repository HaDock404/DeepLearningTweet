{"version":3,"file":"encode.js","sourceRoot":"","sources":["../../src/helpers/encode.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAC3E,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACxC,OAAO,EAAE,OAAO,EAAc,MAAM,QAAQ,CAAC;AAE7C,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,eAAe,GAAG,cAAc,CAAC;AACvC,IAAI,gBAAsD,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiDG;AACH,wBAAwB;AACxB,MAAM,UAAU,eAAe,CAAC,MAAc,EAAE,SAAmB;IAC/D,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;IAE5D,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AAC/E,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,wBAAwB;AACxB,MAAM,UAAU,YAAY,CAAI,KAAQ,EAAE,MAAyB;IAC/D,IAAI,MAAc,CAAC;IAEnB,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjB,mFAAmF;QACnF,MAAM,GAAG,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,yCAAyC,EAAE,CAAC,KAAK,EAAE,EAAE;YACpF,IAAG,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBACtC,OAAO,IAAI,GAAG,KAAK,CAAC;aACvB;YAED,IAAI,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7C,OAAO,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QACtD,CAAC,CAAC,GAAG,SAAS,CAAC;KAClB;SAAM;QACH,IAAI;YACA,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;SACtG;QAAC,OAAO,CAAC,EAAE;YACR,4BAA4B;YAC5B,MAAM,GAAG,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;SAC/C;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,wBAAwB;AACxB,MAAM,UAAU,YAAY,CAAC,KAAa;IACtC,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,GAAG,EAAE;QAClD,OAAO;YACH,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,IAAI;YACT,CAAC,SAAS,CAAC,EAAE,MAAM;YACnB,GAAG,EAAE,KAAK;SACb,CAAA;IACL,CAAC,CAAC,CAAC,CAAC;IAEJ,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AAC/F,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, TO_STRING, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { strCamelCase } from \"../string/conversion\";\r\nimport { strPadStart } from \"../string/pad\";\r\nimport { strUpper } from \"../string/upper_lower\";\r\nimport { isNumber, isString, isUndefined } from \"./base\";\r\nimport { dumpObj } from \"./diagnostics\";\r\nimport { getLazy, ILazyValue } from \"./lazy\";\r\n\r\nconst DBL_QUOTE = \"\\\"\";\r\nconst INVALID_JS_NAME = /([^\\w\\d_$])/g;\r\nlet _htmlEntityCache: ILazyValue<{ [key: string]: string}>;\r\n\r\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * @since 0.9.0\r\n * @group Conversion\r\n * @group Value\r\n * @param jsName - The string value to validate\r\n * @param camelCase - Optionally (see [1]) convert into CamelCase with the leading character either\r\n * - `true` => lowercase\r\n * - 'false' => uppercase\r\n * - undefined => not converted\r\n * @return The original string name, if it conforms to the JS naming convention otherwise an encoded version.\r\n *\r\n * > **[1]**: Camel casing the name will remove all non-word characters from the result\r\n * so you will NOT end up with any leading, embedded or trailing `_` characters which may cause\r\n * duplicate results for different string values.\r\n * @example\r\n * ```ts\r\n * normalizeJsName(\"HelloDarkness\"); // \"HelloDarkness\"\r\n * normalizeJsName(\"Hello Darkness\"); // \"Hello_Darkness\"\r\n * normalizeJsName(\"hello Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello.Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello-Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello_Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"abc-123\"); // \"abc_123\"\r\n * normalizeJsName(\"0abc0\"); // \"0abc0\"\r\n * normalizeJsName(\"\\\"HelloDarkness\\\"\"); // \"_HelloDarkness_\"\r\n * normalizeJsName(\"\\\"Hello Darkness\\\"\"); // \"_Hello_Darkness_\"\r\n * normalizeJsName(\"\\\"hello Darkness\\\"\"); // \"_hello_Darkness_\"\r\n * normalizeJsName(\"\\\"hello Darkness\\\"\"); // \"_hello_Darkness_\"\r\n * normalizeJsName(\"\\\"hello .,#[]Darkness\\\"\"); // \"_hello______Darkness_\"\r\n *\r\n * normalizeJsName(\"HelloDarkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"Hello Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello.Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello-Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello_Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"abc-123\", true); // \"abc123\"\r\n * normalizeJsName(\"0abc0\", true); // \"0abc0\"\r\n * normalizeJsName(\"\\\"HelloDarkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"\\\"Hello Darkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello \\\"Darkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello \\\"Darkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"\\\"hello .,#[]Darkness\\\"\", true); // \"helloDarkness\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function normalizeJsName(jsName: string, camelCase?: boolean): string {\r\n    let result = asString(jsName).replace(INVALID_JS_NAME, \"_\");\r\n\r\n    return !isUndefined(camelCase) ? strCamelCase(result, !camelCase) : result;\r\n}\r\n\r\n/**\r\n * Encode the value into a JSON string, if the provided value is a string this will encode\r\n * any character that is not an alpha, numeric, space or some special characters as `\\uXXXX`\r\n * and will always be returned wrapped in double quotes `\"xxx\"`, if the value is any other\r\n * object it will be encoded using JSON.stringify() and if there is an exception encoding\r\n * with JSON.stringify() it will return the exception as a string using {@link dumpObj}().\r\n * @since 0.9.0\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The value to be encoded as JSON\r\n * @param format - Identifies whether the JSON value should be formatted when an object\r\n * - `true` - Format with 4 spaces\r\n * - 'number' - The number of spaces to format with\r\n * - `false` (or not Truthy) - Do not format*\r\n * @returns A JSON encoded string representation of the value.\r\n * @example\r\n * ```ts\r\n * // String values\r\n * encodeAsJson(\"abc.123\"); // \"\\\"abc.123\\\"\"\r\n * encodeAsJson(\"321-abc\"); // \"\\\"321-abc\\\"\"\r\n * encodeAsJson(\"Hello darkness, my \\\"old\\\" friend...\"); // \"\\\"Hello darkness, my \\\\\\\"old\\\\\\\" friend...\\\"\"\r\n * encodeAsJson(\"Hello: Darkness\"); // \"\\\"Hello: Darkness\\\"\"\r\n * encodeAsJson(\"Hello\\\\u003A Darkness\"); // \"\\\"Hello\\\\\\\\u003A Darkness\\\"\"\r\n * encodeAsJson(\"`!@#$%^&*()_-+=[]{}:;'<>?\"); // \"\\\"\\\\u0060!@#$%^&*()_-+=[]{}:;\\\\u0027<>?\\\"\"\r\n * encodeAsJson(\"0\"); // \"\\\"0\\\"\"\r\n * encodeAsJson(\"1\"); // \"\\\"1\\\"\"\r\n *\r\n * encodeAsJson([]); // \"[]\"\r\n * encodeAsJson([\"A\"]); // \"[\\\"A\\\"]\"\r\n * encodeAsJson([0]); // \"[0]\"\r\n * encodeAsJson([false]); // \"[false]\"\r\n * encodeAsJson(new Array(1)); // \"[null]\"\r\n * encodeAsJson(true); // \"true\",\r\n * encodeAsJson(false); // \"false\"\r\n *\r\n * encodeAsJson({}); // \"{}\"\r\n * encodeAsJson({ Hello: \"Darkness\" }); // \"{\\\"Hello\\\":\\\"Darkness\\\"}\");\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function encodeAsJson<T>(value: T, format?: boolean | number): string {\r\n    let result: string;\r\n\r\n    if (isString(value)) {\r\n        // encode if a character is not an alpha, numeric, space or some special characters\r\n        result = DBL_QUOTE + value.replace(/[^\\w .,\\-!@#$%\\^&*\\(\\)_+={}\\[\\]:;|<>?]/g, (match) => {\r\n            if(match === DBL_QUOTE || match === \"\\\\\") {\r\n                return \"\\\\\" + match;\r\n            }\r\n\r\n            var hex = match.charCodeAt(0)[TO_STRING](16);\r\n            return \"\\\\u\" + strPadStart(strUpper(hex), 4, \"0\");\r\n        }) + DBL_QUOTE;\r\n    } else {\r\n        try {\r\n            result = JSON.stringify(value, NULL_VALUE, format ? (isNumber(format) ? format : 4) : UNDEF_VALUE);\r\n        } catch (e) {\r\n            // Unable to convert to JSON\r\n            result = DBL_QUOTE + dumpObj(e) + DBL_QUOTE;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Encode the provided string to a safe HTML form, converting the base `&`, `<`, `>`, `\\\"` and `'`\r\n * characters into their HTML encoded representations\r\n * @since 0.9.0\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The string value to be converted into a HTML safe form\r\n * @returns The converted string as HTML\r\n * @example\r\n * ```ts\r\n * encodeAsHtml(\"HelloDarkness\"); // \"HelloDarkness\"\r\n * encodeAsHtml(\"Hello Darkness\"); // \"Hello Darkness\"\r\n * encodeAsHtml(\"hello.Darkness\"); // \"hello.Darkness\"\r\n * encodeAsHtml(\"hello-Darkness\"); // \"hello-Darkness\"\r\n * encodeAsHtml(\"hello_Darkness\"); // \"hello_Darkness\"\r\n * encodeAsHtml(\"abc-123\"); // \"abc-123\"\r\n * encodeAsHtml(\"0abc0\"); // \"0abc0\"\r\n * encodeAsHtml(\"\\\"HelloDarkness\\\"\"); // \"&quot;HelloDarkness&quot;\"\r\n * encodeAsHtml(\"\\\"Hello Darkness\\\"\"); // \"&quot;Hello Darkness&quot;\"\r\n * encodeAsHtml(\"\\\"hello Darkness\\\"\"); // \"&quot;hello Darkness&quot;\"\r\n * encodeAsHtml(\"\\\"hello Darkness\\\"\"); // \"&quot;hello Darkness&quot;\"\r\n * encodeAsHtml(\"\\\"hello .,#<[]>Darkness\\\"\"); // \"&quot;hello .,#&lt;[]&gt;Darkness&quot;\"\r\n * encodeAsHtml(\"<script src=\\\"javascript:alert('Hello');\\\"></script>\"); // \"&lt;script src=&quot;javascript:alert(&#39;Hello&#39;);&quot;&gt;&lt;/script&gt;\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function encodeAsHtml(value: string) {\r\n    !_htmlEntityCache && (_htmlEntityCache = getLazy(() => {\r\n        return {\r\n            \"&\": \"amp\",\r\n            \"<\": \"lt\",\r\n            \">\": \"gt\",\r\n            [DBL_QUOTE]: \"quot\",\r\n            \"'\": \"#39\"\r\n        }\r\n    }));\r\n    \r\n    return asString(value).replace(/[&<>\"']/g, match => \"&\" + _htmlEntityCache.v[match] + \";\");\r\n}\r\n"]}