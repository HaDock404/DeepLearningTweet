{"version":3,"file":"regexp.js","sourceRoot":"","sources":["../../src/helpers/regexp.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC9C,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,MAAM,SAAS,GAAG,MAAM,CAAC;AACzB,MAAM,YAAY,GAAG,KAAK,CAAC;AAE3B;;;;;;;;;;;GAWG;AACH,SAAS,aAAa,CAAC,KAAa,EAAE,SAAiB,EAAE,SAAoC,EAAE,UAAmB,EAAE,SAAmB;IACnI,8DAA8D;IAC9D,OAAO,IAAI,MAAM,CACb,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EACnG,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,wBAAwB;AACxB,MAAM,UAAU,mBAAmB,CAAC,KAAa,EAAE,UAAoB,EAAE,SAAmB;IACxF,OAAO,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,+BAA+B,EAAE,CAAC,KAAa,EAAE,EAAE;QACrF,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,wBAAwB;AACxB,MAAM,UAAU,mBAAmB,CAAC,KAAa,EAAE,UAAoB,EAAE,SAAmB;IACxF,OAAO,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,8BAA8B,EAAE,CAAC,KAAa,EAAE,EAAE;QACpF,OAAO,KAAK,CAAC,OAAO,CAAC,oBAAoB,EAAE,UAAU,IAAI,EAAE,EAAE;YACzD,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE,IAAI,MAAM,EAAE;gBAC7B,OAAO,cAAc,CAAC;aACzB;YACD,OAAO,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DG;AACH,wBAAwB;AACxB,MAAM,UAAU,aAAa,CAAC,KAAa,EAAE,UAAoB,EAAE,SAAmB;IAClF,OAAO,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,8BAA8B,EAAE,CAAC,KAAa,EAAE,EAAE;QACpF,cAAc;QACd,OAAO,KAAK,CAAC,OAAO,CAAC,sCAAsC,EAAE,UAAU,IAAI,EAAE,EAAE;YAC3E,IAAI,EAAE,IAAI,OAAO,IAAI,EAAE,IAAI,QAAQ,EAAE;gBACjC,OAAO,gBAAgB,CAAC;aAC3B;YAED,IAAI,EAAE,KAAK,KAAK,IAAI,EAAE,IAAI,MAAM,EAAE;gBAC9B,OAAO,cAAc,CAAC;aACzB;YAED,IAAI,EAAE,KAAK,IAAI,EAAE;gBACb,OAAO,SAAS,CAAC;aACpB;YAED,OAAO,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { EMPTY } from \"../internal/constants\";\r\nimport { asString } from \"../string/as_string\";\r\n\r\nconst MATCH_ANY = \"(.*)\";\r\nconst MATCH_SINGLE = \"(.)\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal function to translate the string and create the Regular Expression\r\n * @param value - The value to be converted into a RegExp, if the value is not a\r\n * string it will coerced to a string.\r\n * @param escapeRgx - The escape regular expression to convert values to not convert\r\n * @param replaceFn - The function to call to perform any final conversion.\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `^` and `$` to incidate an entire match\r\n * @returns The new Regular Expression created from the provided value.\r\n */\r\nfunction _createRegExp(value: string, escapeRgx: RegExp, replaceFn: (value: string) => string, ignoreCase: boolean, fullMatch?: boolean) {\r\n    // eslint-disable-next-line security/detect-non-literal-regexp\r\n    return new RegExp(\r\n        (fullMatch ? \"^\" : EMPTY) + replaceFn(value.replace(escapeRgx, \"\\\\$1\")) + (fullMatch ? \"$\" : EMPTY),\r\n        ignoreCase ? \"i\" : \"\");\r\n}\r\n\r\n/**\r\n * Create a simple wildcard regular expression from the string value, converting any embedded wildcard\r\n * `'*'` characters to match any character zero or more times (including folder seperators `'/'` or `'\\'`),\r\n * while escaping all other characters.\r\n * The supported matching values are\r\n * - `'*'` Matches any characters zero or more times (including folder seperators '`'/`' or `'\\'`)\r\n * @since 0.9.0\r\n * @group RegExp\r\n * @param value - The value to be converted into a RegExp, if the value is not a string it will coerced\r\n * to a string.\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive, Defaults\r\n * to false.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `'^'` and `'$'` to\r\n * incidate match the entire string only.\r\n * @returns The new Regular Expression created from the provided value.\r\n * @example\r\n * ```ts\r\n * let regex = createWildcardRegex(\"Hello*\");\r\n *\r\n * let matches = regex.exec(\"Hello\");\r\n * matches[0]; // \"Hello\";\r\n * matches[1]; // \"\"\r\n *\r\n * let matches = regex.exec(\"Hello Darkness\");\r\n * matches[0]; // \"Hello Darkness\"\r\n * matches[1]; // \" Darkness\"\r\n *\r\n * let matches = regex.exec(\"Darkness Hello\");\r\n * matches[0];  // \"Hello\"\r\n * matches[1]; // \"\"\r\n *\r\n * let regex.exec(\"Darkness Hello.\");\r\n * matches[0]; // \"Hello.\"\r\n * matches[1]; // \".\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createWildcardRegex(value: string, ignoreCase?: boolean, fullMatch?: boolean) {\r\n    return _createRegExp(asString(value), /([-+|^$#.\\?{}()\\[\\]\\\\/\\\"\\'])/g, (value: string) => {\r\n        return value.replace(/\\*/g, MATCH_ANY);\r\n    }, !!ignoreCase, fullMatch);\r\n}\r\n\r\n/**\r\n * Create a simple filename style regular expression from the string value, converting any embedded\r\n * filename wildcard characters `'*'` and `'?'`.\r\n * If the source string contains folder seperators both `'/'` and `'\\'` are treated as synonomous.\r\n * Each wildcard match will be captured as it's own group.\r\n * The supported matching values are\r\n * - `'*'` Matches any characters zero or more times (including folder seperators '`'/`' or `'\\'`)\r\n * - `'?'` Matches any single character once only (including folder seperators `'/'` or `'\\'`)\r\n * - `'/'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n * - `'\\'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n *\r\n * @since 0.9.0\r\n * @group RegExp\r\n * @param value - The string value to converted\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive, Defaults\r\n * to false.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `'^'` and `'$'` to\r\n * incidate match the entire string only.\r\n * @returns The new Regular Expression created from the provided value.\r\n * @example\r\n * ```ts\r\n * let regex = createFilenameRegex(\"*.txt\");\r\n *\r\n * lat matches = regex.exec(\"Hello\");\r\n * matches; // null\r\n *\r\n * let matches = regex.exec(\"ug.txt\");\r\n * matches[0]; // \"ug.txt\"\r\n * matches[1]; // \"ug\"\r\n *\r\n * let matches = regex.exec(\" ug.txt \");\r\n * matches[0]; // \" ug.txt\"\r\n * matches[1]; // \" ug\"\r\n *\r\n * let matches = regex.exec(\"C:\\\\temp\\\\ug.txt\");\r\n * matches[0]; // \"C:\\\\temp\\\\ug.txt\"\r\n * matches[1]; // \"C:\\\\temp\\\\ug\"\r\n *\r\n * let matches = regex.exec(\"/var/log/ug.txt\");\r\n * matches[0]; // \"/var/log/ug.txt\"\r\n * matches[1]; // \"/var/log/ug\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createFilenameRegex(value: string, ignoreCase?: boolean, fullMatch?: boolean) {\r\n    return _createRegExp(asString(value), /([-+|^$#.{}()\\\\\\/\\[\\]\\\"\\'])/g, (value: string) => {\r\n        return value.replace(/(\\\\\\\\|\\\\\\/|\\*|\\?)/g, function (_all, g1) {\r\n            if (g1 == \"\\\\/\" || g1 == \"\\\\\\\\\") {\r\n                return \"[\\\\\\\\\\\\/]{1}\";\r\n            }\r\n            return g1 == \"*\" ? MATCH_ANY : MATCH_SINGLE;\r\n        });\r\n    }, !!ignoreCase, fullMatch);\r\n}\r\n\r\n/**\r\n * Create a simple glob style regular expression from the string value, converting `'**'`, `'*'` and `'?'`\r\n * characters. Unlike {@link createFilenameRegex} the `'*'` and `'?'` will NOT match folder seperator\r\n * characters `'/'` and `'\\'`.\r\n * If the source string contains folder seperators both `'/'` and `'\\'` are treated as synonomous\r\n * Each wildcard match will be captured as it's own group.\r\n * The supported matching values are\r\n * - `'**'` Matches any characters zero or more times include folder seperators `'/'` or `'\\'`\r\n * - `'*'` Matches any characters zero or more times, except `'/'` or `'\\'`\r\n * - `'?'` Matches any single character once only, except `'/'` or `'\\'`\r\n * - `'/'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n * - `'\\'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n *\r\n * @since 0.9.0\r\n * @group RegExp\r\n * @param value - The string value to converted.\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive, Defaults\r\n * to false.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `'^'` and `'$'` to\r\n * incidate match the entire string only.\r\n * @returns The new Regular Expression created from the provided value.\r\n * @example\r\n * ```ts\r\n * let regex = makeGlobRegex(\"src\\\\**\\\\*.ts\");\r\n *\r\n * let matches = regex.exec(\"Hello\");\r\n * matches; // null\r\n *\r\n * let matches = regex.exec(\"Src/index.ts\");\r\n * matches; // null - Specify the ignoreCase if you want this to match\r\n *\r\n * let matches = regex.exec(\"src/index.ts\");\r\n * matches[0]; // \"src/index.ts\"\r\n * matches[1]; // undefined;\r\n * matches[2]; // \"index\"\r\n *\r\n * let matches = regex.exec(\"src\\\\index.ts\");\r\n * matches[0]; // \"src\\\\index.ts\"\r\n * matches[1]; // undefined;\r\n * matches[2]; // \"index\"\r\n *\r\n * let matches = regex.exec(\"src/helpers/regexp.ts\");\r\n * matches[0]; // \"src/helpers/regexp.ts\"\r\n * matches[1]; // \"helpers/\"\r\n * matches[2]; // \"regexp\"\r\n *\r\n * let matches = regex.exec(\"src\\\\helpers/regexp.ts\");\r\n * matches[0]; // \"src\\\\helpers/regexp.ts\"\r\n * matches[1]; // \"helpers/\"\r\n * matches[2]; // \"regexp\"\r\n *\r\n * let matches = regex.exec(\" src/index.tsx \");\r\n * matches[0]; // \"src/index.ts\"\r\n * matches[1]; // undefined\r\n * matches[2]; // \"index\"\r\n *\r\n * let matches = regex.exec(\" src/helpers/regexp.ts. \");\r\n * matches[0]; // \"src/helpers/regexp.ts\"\r\n * matches[1]; // \"helpers/\"\r\n * matches[2]; // \"regexp\"]);\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function makeGlobRegex(value: string, ignoreCase?: boolean, fullMatch?: boolean) {\r\n    return _createRegExp(asString(value), /([-+|^$#.{}()\\\\\\/\\[\\]\\\"\\'])/g, (value: string) => {\r\n        //\"**\\/*\\.txt\"\r\n        return value.replace(/(\\*\\*\\\\[\\\\\\/]|\\\\\\\\|\\\\\\/|\\*\\*|\\*|\\?)/g, function (_all, g1) {\r\n            if (g1 == \"**\\\\/\" || g1 == \"**\\\\\\\\\") {\r\n                return \"(.*[\\\\\\\\\\\\/])*\";\r\n            }\r\n            \r\n            if (g1 === \"\\\\/\" || g1 == \"\\\\\\\\\") {\r\n                return \"[\\\\\\\\\\\\/]{1}\";\r\n            }\r\n            \r\n            if (g1 === \"**\") {\r\n                return MATCH_ANY;\r\n            }\r\n\r\n            return g1 === \"*\" ? \"([^\\\\\\\\\\\\/]*)\" : \"([^\\\\\\\\\\\\/]{1})\";\r\n        });\r\n    }, !!ignoreCase, fullMatch);\r\n}\r\n"]}