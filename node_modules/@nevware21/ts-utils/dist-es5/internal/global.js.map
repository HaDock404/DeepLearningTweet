{"version":3,"file":"global.js","sourceRoot":"","sources":["../../src/internal/global.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,IAAM,iBAAiB,GAAG,kBAAkB,CAAC;AA6B7C,IAAI,UAAmC,CAAC;AAExC;;;;;GAKG;AACH,MAAM,UAAU,eAAe;IAC3B,IAAI,MAAc,CAAC;IAEnB,IAAI,OAAO,UAAU,KAAK,SAAS,EAAE;QACjC,MAAM,GAAG,UAAU,CAAC;KACvB;IAED,IAAI,CAAC,MAAM,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;QACtC,MAAM,GAAG,IAAI,CAAC;KACjB;IAED,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,SAAS,EAAE;QACxC,MAAM,GAAG,MAAM,CAAC;KACnB;IAED,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,SAAS,EAAE;QACxC,MAAM,GAAG,MAAM,CAAC;KACnB;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;;GAMG;AACH,wBAAwB;AACxB,MAAM,UAAU,gBAAgB;IAC5B,IAAI,CAAC,UAAU,EAAE;QACb,IAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QACxC,UAAU,GAAG,GAAG,CAAC,iBAAiB,CAAC,GAAG,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;KACtE;IAED,OAAO,UAAU,CAAC;AACtB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { safe } from \"../helpers/safe\";\r\nimport { UNDEFINED } from \"./constants\";\r\n\r\nconst GLOBAL_CONFIG_KEY = \"__tsUtils$gblCfg\";\r\n\r\ndeclare let globalThis: Window;\r\ndeclare let global: Window;\r\ndeclare let self: any;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal interface for holding the global polyfill symbols\r\n */\r\nexport interface _GlobalPolySymbols {\r\n    k: { [key: string ]: symbol },\r\n    s: { [sym: symbol ]: string },\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal interface for defining global test hooks\r\n */\r\nexport interface _GlobalTestHooks {\r\n    lzy?: boolean;\r\n}\r\n\r\nexport interface TsUtilsGlobalConfig extends _GlobalTestHooks {\r\n    gblSym?: _GlobalPolySymbols,\r\n}\r\n\r\nlet _globalCfg: { [key: string ]: any };\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to get the current global value\r\n * @returns\r\n */\r\nexport function _getGlobalValue(): Window {\r\n    var result: Window;\r\n\r\n    if (typeof globalThis !== UNDEFINED) {\r\n        result = globalThis;\r\n    }\r\n\r\n    if (!result && typeof self !== UNDEFINED) {\r\n        result = self;\r\n    }\r\n\r\n    if (!result && typeof window !== UNDEFINED) {\r\n        result = window;\r\n    }\r\n\r\n    if (!result && typeof global !== UNDEFINED) {\r\n        result = global;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Gets/Sets the named value from the global config store, this is used to share configuration across\r\n * multiple modules. Primarily used for poly symbol and test hooks.\r\n * @returns The globally registered value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _getGlobalConfig(): TsUtilsGlobalConfig {\r\n    if (!_globalCfg) {\r\n        let gbl = safe(_getGlobalValue).v || {};\r\n        _globalCfg = gbl[GLOBAL_CONFIG_KEY] = gbl[GLOBAL_CONFIG_KEY] || {};\r\n    }\r\n\r\n    return _globalCfg;\r\n}\r\n"]}