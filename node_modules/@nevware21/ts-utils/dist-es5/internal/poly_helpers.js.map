{"version":3,"file":"poly_helpers.js","sourceRoot":"","sources":["../../src/internal/poly_helpers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,wBAAwB;AACxB,MAAM,UAAU,UAAU,CAAqB,IAAO;IAClD,OAAO;QACH,IAAI,OAAO,GAAG,CAAE,IAAI,CAAE,CAAC;QACvB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE;YAC3C,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;SACnC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrC,CAAQ,CAAC;AACb,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { LENGTH } from \"./constants\";\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function makePolyFn<T extends Function>(poly: T): T {\r\n    return function(): T {\r\n        let theArgs = [ this ];\r\n        for (let lp = 0; lp < arguments[LENGTH]; lp++) {\r\n            theArgs[lp + 1] = arguments[lp];\r\n        }\r\n        \r\n        return poly.apply(this, theArgs);\r\n    } as any;\r\n}\r\n"]}