{"version":3,"file":"some.js","sourceRoot":"","sources":["../../src/array/some.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAG7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,MAAM,CAAC,IAAM,OAAO,GAA8I,EAAC,aAAa,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\nimport { ArrPredicateCallbackFn, ArrPredicateCallbackFn2 } from \"./callbacks\";\r\n\r\n/**\r\n * The arrSome() method tests whether at least one element in the array passes the test implemented by the\r\n * provided function. It returns true if, in the array, it finds an element for which the provided function\r\n * returns true; otherwise it returns false. It doesn't modify the array.\r\n *\r\n * The arrSome() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array, until the `callbackFn` returns a truthy value. If such an element is found, arrSome() immediately\r\n * returns true and stops iterating through the array. Otherwise, if callbackFn returns a falsy value for all\r\n * elements, some() returns false.\r\n *\r\n * arrSome() acts like the \"there exists\" quantifier in mathematics. In particular, for an empty array, it\r\n * returns false for any condition.\r\n *\r\n * `callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots\r\n * in sparse arrays.\r\n *\r\n * arrSome() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrSome() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the\r\n * `callbackFn` will be the value at the time that element gets visited. Deleted elements are not visited.\r\n * - The arrSome() method is generic. It only expects the this value to have a length property and integer-keyed properties.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return `true` if the callback function returns a truthy value for at least one element in the array.\r\n * Otherwise, `false`.\r\n */\r\nexport const arrSome: <T, E extends T>(theArray: ArrayLike<T>, callbackFn: ArrPredicateCallbackFn<T, E> | ArrPredicateCallbackFn2<T>, thisArg?: any) => boolean = (/*#__PURE__*/_unwrapFunction(\"some\", ArrProto));\r\n"]}