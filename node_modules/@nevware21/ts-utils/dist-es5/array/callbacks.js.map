{"version":3,"file":"callbacks.js","sourceRoot":"","sources":["../../src/array/callbacks.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * The `ArrPredicateCallbackFn` function is used for {@link arrEvery} and {@link arrFilter},\r\n * it should return a `truthy` value to indicate a matching element has been found.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @typeParam E - Identifies the type of the return array elements (defaults to T)\r\n * @param value - The cuirrent element of the array being processed.\r\n * @param index - The index of the current elemety of the array being processed.\r\n * @param array - The array being processed.\r\n * @returns A boolean value indicating that the value is of the type expected (the test is true)\r\n */\r\nexport type ArrPredicateCallbackFn<T, E extends T> = (value: T, index: number, array: T[]) => value is E;\r\n\r\n/**\r\n * The `ArrPredicateCallbackFn2` function is used for {@link arrEvery} and {@link arrFilter},\r\n * it should return a `truthy` value to indicate a matching element has been found.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @typeParam E - Identifies the type of the return array elements (defaults to T)\r\n * @param value - The cuirrent element of the array being processed.\r\n * @param index - The index of the current elemety of the array being processed.\r\n * @param array - The array being processed.\r\n */\r\nexport type ArrPredicateCallbackFn2<T> = (value: T, index: number, array: T[]) => unknown;\r\n\r\n/**\r\n * Callback signature for {@link arrMap} that is called for every element of array. Each time callbackFn\r\n * executes, the returned value is added to newArray.\r\n *\r\n * @since 0.3.3\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of the array elements\r\n * @typeParam R - Identifies the type of the elements returned by the callback function, defaults to T.\r\n * @param value - The current element being processed in the array.\r\n * @param index - The index of the current element being processed in the array.\r\n * @param array - The array that the `map` function was called on.\r\n */\r\nexport type ArrMapCallbackFn<T, R = T> = (value: T, index?: number, array?: T[]) => R;\r\n\r\n/**\r\n * Callback signature for {@link arrFrom} mapFn that is called for every element of array. Each time mapFn\r\n * executes, the returned value is added to newArray.\r\n *\r\n * @since 0.9.7\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of the array elements\r\n * @typeParam R - Identifies the type of the elements returned by the map function, defaults to T.\r\n * @param value - The current element being processed in the array.\r\n * @param index - The index of the current element being processed in the array.\r\n */\r\nexport type ArrFromMapFn<T, R = T> = (value: T, index?: number) => R;\r\n"]}