{"version":3,"file":"append.js","sourceRoot":"","sources":["../../src/array/append.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,MAAM,UAAU,SAAS,CAAI,MAAW,EAAE,IAA2B;IACjE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE;QAC9B,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YACf,oGAAoG;YACpG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SACtC;aAAM,IAAI,UAAU,CAAI,IAAI,CAAC,IAAI,UAAU,CAAI,IAAI,CAAC,EAAE;YACnD,SAAS,CAAC,IAAI,EAAE,UAAC,GAAG;gBAChB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;SACN;aAAM;YACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isArray, isUndefined } from \"../helpers/base\";\r\nimport { isIterable, isIterator } from \"../iterator/iterator\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\n\r\n/**\r\n * Appends the `elms` to the `target` where the elms may be an array, a single object\r\n * or an iterator object\r\n * @group Array\r\n * @group Iterator\r\n * @example\r\n * ```ts\r\n * let theArray = arrAppend([], 1);\r\n * arrAppend(theArray, [ 2, 3, 4 ]);\r\n * arrAppend(theArray, [ \"a\", \"b\", \"c\" ]);\r\n * // theArray is now [ 1, 2, 3, 4, \"a\", \"b\", \"c\" ]\r\n * ```\r\n * @param target - The target array\r\n * @param elms - The item, array of items an iterable or iterator object of items to add to the target\r\n * @returns The passed in target array\r\n * @example\r\n * ```ts\r\n * // Adding a single value\r\n * arrAppend([], undefined);            // []\r\n * arrAppend([], 0);                    // [ 0 ]\r\n * arrAppend([1], undefined);           // [ 1 ]\r\n * arrAppend([1], 2);                   // [ 1, 2 ]\r\n *\r\n * // Adding an array\r\n * arrAppend([], [] as number[]);       // []\r\n * arrAppend([], [0]);                  // [ 0 ]\r\n * arrAppend([1], []);                  // [ 1 ]\r\n * arrAppend([1], [2]);                 // [ 1, 2 ]\r\n *\r\n * // Adding with an iterator\r\n * arrAppend([], ([] as number[]).values());    // []\r\n * arrAppend([], [0].values());         // [ 0 ]\r\n * arrAppend([1], [].keys());           // [ 1 ]\r\n * arrAppend([1], [2].values());        // [ 1, 2 ]\r\n * arrAppend([1], [2].keys());          // [ 1, 0 ] - 0 is from the index from the first element\r\n * ```\r\n */\r\nexport function arrAppend<T>(target: T[], elms: T | T[] | Iterator<T>): T[] {\r\n    if (!isUndefined(elms) && target) {\r\n        if (isArray(elms)) {\r\n            // This is not just \"target.push(elms)\" but becomes effectively \"target.push(elms[0], elms[1], ...)\"\r\n            fnApply(target.push, target, elms);\r\n        } else if (isIterator<T>(elms) || isIterable<T>(elms)) {\r\n            iterForOf(elms, (elm) => {\r\n                target.push(elm);\r\n            });\r\n        } else {\r\n            target.push(elms);\r\n        }\r\n    }\r\n\r\n    return target;\r\n}\r\n"]}