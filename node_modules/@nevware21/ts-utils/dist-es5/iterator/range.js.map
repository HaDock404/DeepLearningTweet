{"version":3,"file":"range.js","sourceRoot":"","sources":["../../src/iterator/range.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAyB,MAAM,UAAU,CAAC;AAEjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4FG;AACH,wBAAwB;AACxB,MAAM,UAAU,mBAAmB,CAAC,KAAa,EAAE,GAAW,EAAE,IAAa;IACzE,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,QAAQ,GAAW,WAAW,CAAC;IAEnC,IAAI,iBAAiB,CAAC,GAAG,CAAC,EAAE;QACxB,GAAG,GAAG,KAAK,CAAC;KACf;IAED,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhD,SAAS,MAAM;QACX,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,SAAS,QAAQ;QAEb,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,OAAO,GAAG,CAAC,EAAE;YACb,MAAM,GAAG,SAAS,GAAG,GAAG,CAAC;SAC5B;aAAM;YACH,MAAM,GAAG,SAAS,GAAG,GAAG,CAAC;SAC5B;QAED,IAAI,CAAC,MAAM,EAAE;YACT,QAAQ,GAAG,SAAS,CAAC;YACrB,SAAS,IAAI,OAAO,CAAC;SACxB;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,IAAI,GAAG,GAAkC;QACrC,CAAC,EAAE,QAAQ;KACd,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAEnC,OAAO,cAAc,CAAS,GAAG,CAAC,CAAC;AACvC,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isNullOrUndefined } from \"../helpers/base\";\r\nimport { UNDEF_VALUE } from \"../internal/constants\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { createIterator, CreateIteratorContext } from \"./create\";\r\n\r\n/**\r\n * Create a simple range iterator which will return an iterator that increments it's value from\r\n * `start` to `end` by the `step`.\r\n * - If `end` is omitted, null or undefined the value will be set to `start`\r\n * - If the `step` value is omitted, null, undefined or zero then it will default to 1 if end > start otherwise -1.\r\n *\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @param start - The initial value of the numeric iterator\r\n * @param end - The inclusive maximum (or minimum when moving backwards) value of the iterator.\r\n * @param step - The step size for each iteration, may be positive or negative. Defaults to 1 when\r\n * start <= end and -1 when start > end. Zero is treated as not provided.\r\n * @returns A new iterator which will return a numeric value between start and end at step intervals\r\n * @example\r\n * ```ts\r\n * let cnt = 0;\r\n * iterForOf(createRangeIterator(0, -1, 1), (value) => {\r\n *     // Will never get called as -1 < 0\r\n * });\r\n *\r\n * cnt = 0;\r\n * let values: number[] = [];\r\n * iterForOf(createRangeIterator(1, 1), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 1\r\n * // values: [ 1 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(10, null as any), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 1\r\n * // values: [ 10 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(-10, undefined as any), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 1\r\n * // values: [ -10 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(5, 20, 5), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 4\r\n * // values: [ 5, 10, 15, 20 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(20, 5, -5), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 4\r\n * // values: [ 20, 15, 10, 5 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(20, 15), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 6\r\n * // values: [ 20, 19, 18, 17, 16, 15 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(-1, 1), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 3;\r\n * // values: [ -1, 0, 1 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(1, -1), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 3;\r\n * // values: [ 1, 0, -1 ]\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createRangeIterator(start: number, end: number, step?: number): Iterator<number> {\r\n    let nextValue = start;\r\n    let theValue: number = UNDEF_VALUE;\r\n\r\n    if (isNullOrUndefined(end)) {\r\n        end = start;\r\n    }\r\n\r\n    let theStep = step || ((start <= end) ? 1 : -1);\r\n\r\n    function _value(): number {\r\n        return theValue;\r\n    }\r\n\r\n    function _getNext() {\r\n\r\n        let isDone = false;\r\n        if (theStep > 0) {\r\n            isDone = nextValue > end;\r\n        } else {\r\n            isDone = nextValue < end;\r\n        }\r\n\r\n        if (!isDone) {\r\n            theValue = nextValue;\r\n            nextValue += theStep;\r\n        }\r\n\r\n        return isDone;\r\n    }\r\n\r\n    let ctx: CreateIteratorContext<number> = {\r\n        n: _getNext\r\n    };\r\n\r\n    objDefine(ctx, \"v\", { g: _value });\r\n\r\n    return createIterator<number>(ctx);\r\n}"]}