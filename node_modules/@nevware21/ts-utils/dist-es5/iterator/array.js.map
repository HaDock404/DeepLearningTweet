{"version":3,"file":"array.js","sourceRoot":"","sources":["../../src/iterator/array.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAyB,MAAM,UAAU,CAAC;AAEjE;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,wBAAwB;AACxB,MAAM,UAAU,mBAAmB,CAAI,MAAW;IAC9C,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;IACb,IAAI,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7C,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;IAE3B,SAAS,MAAM;QACX,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE;YACvB,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;SACzB;IACL,CAAC;IAED,SAAS,QAAQ;QACb,GAAG,EAAE,CAAC;QACN,OAAO,GAAG,IAAI,GAAG,CAAC;IACtB,CAAC;IAED,IAAI,GAAG,GAA6B;QAChC,CAAC,EAAE,QAAQ;KACd,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAEnC,OAAO,cAAc,CAAI,GAAG,CAAC,CAAC;AAClC,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { LENGTH } from \"../internal/constants\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { createIterator, CreateIteratorContext } from \"./create\";\r\n\r\n/**\r\n * Create an iterator which is backed by the provided array, unlike a normal\r\n * array iterators where the array cannot be modified function creates\r\n * a shallow copy of the array using `slice()` so that you are free to modify\r\n * the original array.\r\n *\r\n * This will still return an iterator if the provided `values` is null or\r\n * undefined which will result in no entries.\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @param values - The source array to create an iterator from\r\n * @returns A new iterator\r\n * @example\r\n * ```ts\r\n * let cnt = 0;\r\n * let values = [];\r\n * iterForOf(createArrayIterator([10, 20, 5, 15]), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createArrayIterator<T>(values: T[]): Iterator<T> {\r\n    let idx = -1;\r\n    let theValues = values ? values.slice() : [];\r\n    let len = theValues[LENGTH]\r\n\r\n    function _value(): T {\r\n        if (idx >= 0 && idx < len) {\r\n            return theValues[idx];\r\n        }\r\n    }\r\n\r\n    function _getNext() {\r\n        idx++;\r\n        return idx >= len;\r\n    }\r\n\r\n    let ctx: CreateIteratorContext<T> = {\r\n        n: _getNext\r\n    };\r\n\r\n    objDefine(ctx, \"v\", { g: _value });\r\n\r\n    return createIterator<T>(ctx);\r\n}"]}