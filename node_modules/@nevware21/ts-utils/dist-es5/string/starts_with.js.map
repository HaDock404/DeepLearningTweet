{"version":3,"file":"starts_with.js","sourceRoot":"","sources":["../../src/string/starts_with.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAE3C;;;;;;;;GAQG;AACH,MAAM,CAAC,IAAM,aAAa,GAAsE,EAAC,aAAa,uBAAuB,CAAC,YAAY,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC,CAAC;AAElL;;;;;;;;;GASG;AACH,wBAAwB;AACxB,MAAM,UAAU,iBAAiB,CAAC,KAAa,EAAE,YAAoB,EAAE,QAAiB;IACpF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAClB,cAAc,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC,CAAC;KAC9D;IACD,IAAI,WAAW,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACjF,IAAI,GAAG,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtC,OAAO,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,WAAW,CAAC;AAC/E,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isString } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { asString } from \"./as_string\";\r\nimport { strSubstring } from \"./substring\";\r\n\r\n/**\r\n * This method lets you determine whether or not a string begins with another string. This method is case-sensitive.\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the start of the string\r\n * @param position - [Optional] The position in this string at which to begin searching for `searchString`.\r\n * Defaults to 0\r\n * @returns `true` if the given characters are found at the beginning of the string; otherwise, `false`.\r\n */\r\nexport const strStartsWith: (value: string, searchString: string, length?: number) => boolean = (/*#__PURE__*/_unwrapFunctionWithPoly(\"startsWith\", StrProto, polyStrStartsWith));\r\n\r\n/**\r\n * This method lets you determine whether or not a string begins with another string. This method is case-sensitive.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the start of the string\r\n * @param position - [Optional] The position in this string at which to begin searching for `searchString`.\r\n * Defaults to 0\r\n * @returns `true` if the given characters are found at the beginning of the string; otherwise, `false`.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyStrStartsWith(value: string, searchString: string, position?: number): boolean {\r\n    if (!isString(value)) {\r\n        throwTypeError(\"'\" + dumpObj(value) + \"' is not a string\");\r\n    }\r\n    let searchValue = isString(searchString) ? searchString : asString(searchString);\r\n    let pos = position > 0 ? position : 0;\r\n\r\n    return strSubstring(value, pos, pos + searchValue[LENGTH]) === searchValue;\r\n}\r\n"]}