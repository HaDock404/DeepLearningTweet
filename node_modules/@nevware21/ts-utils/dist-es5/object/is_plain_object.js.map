{"version":3,"file":"is_plain_object.js","sourceRoot":"","sources":["../../src/object/is_plain_object.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAC5G,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAE7C,yCAAyC;AACzC,IAAI,WAAyB,CAAC;AAC9B,IAAI,eAAuB,CAAC;AAC5B,IAAI,UAAkB,CAAC;AAEvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,wBAAwB;AACxB,MAAM,UAAU,aAAa,CAAC,KAAU;IACpC,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,MAAM,EAAE;QACnC,OAAO,KAAK,CAAC;KAChB;IAED,IAAI,CAAC,UAAU,EAAE;QACb,gHAAgH;QAChH,UAAU,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAE,IAAY,CAAC;KAC1D;IAED,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,IAAI,KAAK,KAAK,UAAU,EAAE;QAEtB,IAAI,CAAC,eAAe,EAAE;YAClB,2FAA2F;YAC3F,uFAAuF;YACvF,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC;YAC7C,eAAe,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;SACjD;QAED,IAAI;YACA,IAAI,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAErC,wEAAwE;YACxE,MAAM,GAAG,CAAC,KAAK,CAAC;YAChB,IAAI,CAAC,MAAM,EAAE;gBACT,IAAI,iBAAiB,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE;oBACvC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,CAAA;iBAC7B;gBAED,MAAM,GAAG,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,eAAe,CAAC;aAC/F;SACJ;QAAC,OAAO,EAAE,EAAE;YACT,kEAAkE;SACrE;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getWindow, hasWindow } from \"../helpers/environment\";\r\nimport { CALL, CONSTRUCTOR, FUNCTION, ObjClass, OBJECT, PROTOTYPE, TO_STRING } from \"../internal/constants\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\nimport { objGetPrototypeOf } from \"./object\";\r\n\r\n// Use to cache the result of Object.cont\r\nlet _fnToString: () => string;\r\nlet _objCtrFnString: string;\r\nlet _gblWindow: Window;\r\n\r\n/**\r\n * Checks to see if the past value is a plain object (not a class/array) value.\r\n * Object are considered to be \"plain\" if they are created with no prototype `Object.create(null)`\r\n * or by using the Object global (native) function, all other \"objects\" ar\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @group Object\r\n * @param value - The value to check\r\n * @returns true if `value` is a normal plain object\r\n * @example\r\n * ```ts\r\n * console.log(isPlainObject({ 0: 'a', 1: 'b', 2: 'c' }));      // true\r\n * console.log(isPlainObject({ 100: 'a', 2: 'b', 7: 'c' }));    // true\r\n * console.log(isPlainObject(objCreate(null)));                 // true\r\n *\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(isPlainObject(myObj));                   // true\r\n *\r\n * console.log(isPlainObject(['a', 'b', 'c']));         // false\r\n * console.log(isPlainObject(new Date()));              // false\r\n * console.log(isPlainObject(new Error(\"An Error\")));   // false\r\n * console.log(isPlainObject(null));                    // false\r\n * console.log(isPlainObject(undefined));               // false\r\n * console.log(isPlainObject(\"null\"));                  // false\r\n * console.log(isPlainObject(\"undefined\"));             // false\r\n * console.log(isPlainObject(\"1\"));                     // false\r\n * console.log(isPlainObject(\"aa\"));                    // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPlainObject(value: any): value is object {\r\n    if (!value || typeof value !== OBJECT) {\r\n        return false;\r\n    }\r\n\r\n    if (!_gblWindow) {\r\n        // Lazily cache the current global window value and default it to \"true\" (so we bypass this check in the future)\r\n        _gblWindow = hasWindow() ? getWindow() : (true as any);\r\n    }\r\n\r\n    let result = false;\r\n    if (value !== _gblWindow) {\r\n\r\n        if (!_objCtrFnString) {\r\n            // Lazily caching what the runtime reports as the object function constructor (as a string)\r\n            // Using an current function lookup to find what this runtime calls a \"native\" function\r\n            _fnToString = Function[PROTOTYPE][TO_STRING];\r\n            _objCtrFnString = _fnToString[CALL](ObjClass);\r\n        }\r\n\r\n        try {\r\n            let proto = objGetPrototypeOf(value);\r\n\r\n            // No prototype so looks like an object created with Object.create(null)\r\n            result = !proto;\r\n            if (!result) {\r\n                if (objHasOwnProperty(proto, CONSTRUCTOR)) {\r\n                    proto = proto[CONSTRUCTOR]\r\n                }\r\n            \r\n                result = proto && typeof proto === FUNCTION && _fnToString[CALL](proto) === _objCtrFnString;\r\n            }\r\n        } catch (ex) {\r\n            // Something went wrong, so it's not an object we are playing with\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n"]}