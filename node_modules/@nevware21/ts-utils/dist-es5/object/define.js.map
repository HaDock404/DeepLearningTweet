{"version":3,"file":"define.js","sourceRoot":"","sources":["../../src/object/define.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ObjClass, VALUE } from \"../internal/constants\";\r\nimport { isFunction, isUndefined } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { ILazyValue } from \"../helpers/lazy\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\n\r\n/**\r\n * Definition of the Property Descriptor mappings for the objDefine functions.\r\n * If a descriptor has neither of value, writable, get and set keys, it is treated as a data descriptor.\r\n * If a descriptor has both [value or writable] and [get or set] keys, an exception is thrown.\r\n * Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited\r\n * properties will be considered as well. In order to ensure these defaults are preserved, you might\r\n * freeze existing objects in the descriptor object's prototype chain upfront, specify all options\r\n * explicitly, or point to null with {@link objCreate}(null).\r\n * @since 0.6.0\r\n * @group Object\r\n */\r\nexport interface ObjDefinePropDescriptor<V = any> {\r\n    /**\r\n     * Identifies if this property should be configurable (true) when this value is set to false,\r\n     * - the type of this property cannot be changed between data property and accessor property, and\r\n     * - the property may not be deleted, and\r\n     * - other attributes of its descriptor cannot be changed (however, if it's a data descriptor with writable: true,\r\n     * the value can be changed, and writable can be changed to false).\r\n     * Defaults to true.\r\n     */\r\n    c?: boolean;\r\n\r\n    /**\r\n     * Identifies if this property will be visible during enumeration of the properties on the corresponding object.\r\n     * Defaults to true.\r\n     */\r\n    e?: boolean;\r\n\r\n    /**\r\n     * __data descriptor__\r\n     * The value associated with the property. Can be any valid JavaScript value (number, object, function, etc.).\r\n     * Defaults to undefined.\r\n     */\r\n    v?: V;\r\n\r\n    /**\r\n     * A Lazy value instance which will be used to return the value, this will be wrapped in a getter function.\r\n     * @since 0.9.4\r\n     */\r\n    l?: ILazyValue<V>;\r\n\r\n    /**\r\n     * true if the value associated with the property may be changed with an assignment operator. Defaults to false.\r\n     */\r\n    w?: boolean;\r\n\r\n    /**\r\n     * A function which serves as a getter for the property, or undefined if there is no getter. When the property\r\n     * is accessed, this function is called without arguments and with this set to the object through which the\r\n     * property is accessed (this may not be the object on which the property is defined due to inheritance). The\r\n     * return value will be used as the value of the property. Defaults to undefined.\r\n     */\r\n    g?(): V;\r\n\r\n    /**\r\n     * A function which serves as a setter for the property, or undefined if there is no setter. When the property\r\n     * is assigned, this function is called with one argument (the value being assigned to the property) and with\r\n     * this set to the object through which the property is assigned. Defaults to undefined.\r\n     * @param value\r\n     */\r\n    s?(value: V): void;\r\n}\r\n\r\n/**\r\n * An object whose keys represent the names of properties to be defined or modified and whose values are objects\r\n * describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptor} for more details).\r\n * @since 0.6.0\r\n * @group Object\r\n */\r\nexport type ObjDefinePropDescriptorMap = {\r\n    [key: PropertyKey]: ObjDefinePropDescriptor\r\n};\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Mapping from ObjDefinePropDescriptor key to PropertyDescriptor key\r\n */\r\nconst propMap: { [key in keyof ObjDefinePropDescriptor]: keyof PropertyDescriptor } = {\r\n    e: \"enumerable\",\r\n    c: \"configurable\",\r\n    v: VALUE,\r\n    w: \"writable\",\r\n    g: \"get\",\r\n    s: \"set\"\r\n};\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to convert ObjDefinePropDescriptor into PropertyDescriptor\r\n * @param value - The prop descriptor to convert\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createProp(value: ObjDefinePropDescriptor): PropertyDescriptor {\r\n    let prop: PropertyDescriptor = {};\r\n    prop[propMap[\"c\"]] = true;\r\n    prop[propMap[\"e\"]] = true;\r\n\r\n    if (value.l) {\r\n        // Asign a getter function to return the value when requested\r\n        prop.get = () => value.l.v;\r\n\r\n        // If it has a setter then expose it as well\r\n        let desc = objGetOwnPropertyDescriptor(value.l, \"v\");\r\n        if (desc && desc.set) {\r\n            prop.set = (newValue: any) => {\r\n                value.l.v = newValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    objForEachKey(value, (key, value) => {\r\n        prop[propMap[key]] = isUndefined(value) ? prop[propMap[key]] : value;\r\n    });\r\n\r\n    return prop;\r\n}\r\n\r\n/**\r\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\r\n * This is a wrapper for [Object.defineProperty](https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/object/defineproperty)\r\n *\r\n * This method allows a precise addition to or modification of a property on an object. Normal property addition through\r\n * assignment creates properties which show up during property enumeration (for...in loop or objKeys method), whose\r\n * values may be changed, and which may be deleted. This method allows these extra details to be changed from their\r\n * defaults. By default, properties added using objDefineProp() are not writable, not enumerable, and not configurable.\r\n *\r\n * Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data\r\n * descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property\r\n * described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\r\n *\r\n * This is an alias for Object.defineProperty\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name or Symbol of the property to be defined or modified.\r\n * @param descriptor - The descriptor for the property being defined or modified.\r\n * @returns The object that was passed to the function with the new or updated property.\r\n */\r\nexport const objDefineProp: <T>(target: T, key: PropertyKey, descriptor: PropertyDescriptor & ThisType<any>) => T = ObjClass[\"defineProperty\"];\r\n\r\n/**\r\n * The objDefineProperties() method defines new or modifies existing properties directly on an object, returning the object.\r\n * This is a wrapper for [Object.defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param props - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns\r\n */\r\nexport const objDefineProperties: <T>(target: T, props: PropertyDescriptorMap & ThisType<any>) => T = ObjClass[\"defineProperties\"];\r\n\r\n/**\r\n * Try to define a get object property accessor for the target object, if a function is past as the value this will\r\n * be assumed to be a getter function and NOT the value.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineGet} or {@link objDefineAccessors}\r\n * as it provides a deterministic way for identifying whether the value is a value or a function rather than wrapping any\r\n * function value in another function.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param value - The value or a function that returns the value\r\n * @param configurable - Can the value be changed, defaults to true.\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineGet<T, V = any>(target: T, key: PropertyKey, value: (() => V) | V, configurable?: boolean, enumerable?: boolean): T {\r\n    return objDefineProp(target, key, _createProp({\r\n        e: enumerable,\r\n        c: configurable,\r\n        [isFunction(value) ? \"g\" : \"v\"]: value\r\n    }));\r\n}\r\n\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineAccessors} as this internally creates\r\n * the {@link ObjDefinePropDescriptor} definition based on your provided arguments. And only using a minimum set of functions\r\n * reduces your overall bundle size.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param prop - The name of the property to be defined or modified.\r\n * @param getProp - The getter function to wire against the getter.\r\n * @param setProp - The setter function to wire against the setter.\r\n * @param configurable - Can the value be changed, defaults to true\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineAccessors<T, V = any>(target: T, prop: PropertyKey, getProp?: (() => V) | null, setProp?: ((v: V) => void) | null, configurable?: boolean, enumerable?: boolean): T {\r\n    let desc: ObjDefinePropDescriptor = {\r\n        e: enumerable,\r\n        c: configurable\r\n    };\r\n\r\n    if (getProp) {\r\n        desc.g = getProp;\r\n    }\r\n\r\n    if (setProp) {\r\n        desc.s = setProp;\r\n    }\r\n    \r\n    return objDefineProp(target, prop, _createProp(desc));\r\n}\r\n\r\n/**\r\n * The objDefine() method defines a new or modifies an existing single property accessors for the target object based\r\n * on the configuration defined for the propDesc argument of type {@link ObjDefinePropDescriptor}. This will call\r\n * {@link objDefineProp} after creating the required PropertyDescriptor populating defaults for the propDesc values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProp.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param propDesc - An object which defines the Property Descriptor mappings for the mapping.\r\n * @returns The target object.\r\n */\r\nexport function objDefine<T>(target: T, key: keyof T, propDesc: ObjDefinePropDescriptor): T {\r\n    return objDefineProp(target, key, _createProp(propDesc));\r\n}\r\n\r\n/**\r\n * The objDefineProps() method defines new or modifies existing properties directly for the target object using the keys\r\n * and configuration from the propDescMap argument. This will call {@link objDefineProperties} after creating the required\r\n * PropertyDescriptorMap from the propDescMap values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProperties.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param propDescMap - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns The target object.\r\n */\r\nexport function objDefineProps<T>(target: T, propDescMap: ObjDefinePropDescriptorMap) {\r\n    let props: PropertyDescriptorMap = {};\r\n\r\n    objForEachKey(propDescMap, (key, value: ObjDefinePropDescriptor) => {\r\n        props[key] = _createProp(value);\r\n    });\r\n\r\n    return objDefineProperties(target, props);\r\n}\r\n"]}