{"version":3,"file":"number.js","sourceRoot":"","sources":["../../src/helpers/number.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAErD;;;;;;;;;GASG;AACH,wBAAwB;AACxB,MAAM,UAAU,WAAW,CAAC,KAAuB,EAAE,QAAiB;IAClE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;QAC3B,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACjB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACnC,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;KAChD;IAED,OAAO,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isNullOrUndefined, isNumber } from \"./base\";\r\n\r\n/**\r\n * Helper to obtain the integer value using base 10 conversion from a string,\r\n * also handles `null`, `undefined` and `Nan` cases which will all return the\r\n * default value.\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The string or numeric value to get the integer value from\r\n * @param defValue - The default value if unsuccessful\r\n * @returns The default or parsed value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getIntValue(value?: string | number, defValue?: number): number {\r\n    if (!isNullOrUndefined(value)) {\r\n        if (isNumber(value)) {\r\n            return value;\r\n        }\r\n\r\n        let theValue = parseInt(value, 10);\r\n        return isNaN(theValue) ? defValue : theValue;\r\n    }\r\n\r\n    return defValue;\r\n}\r\n\r\n"]}