{"version":3,"file":"split.js","sourceRoot":"","sources":["../../src/polyfills/split.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAGlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,wBAAwB;AACxB,MAAM,UAAU,eAAe,CAAC,KAAa,EAAE,QAAuE,EAAE,KAAc;IAClI,IAAI,OAAO,GAAiD,QAAQ,IAAI,QAAQ,CAAC,cAAc,gCAAwB,CAAC,CAAC;IAEzH,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE,KAAK,CAAE,CAAC;AACvD,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { WellKnownSymbols } from \"../symbol/well_known\";\r\n\r\n/**\r\n * The `polyStrSymSplit()` splits a string into substrings using the [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n * method from the splitter object to provide custom behavior. It uses {@link getKnownSymbol}\r\n * to get the {@link WellKnownSymbols.split} symbol which will return the polyfill symbol value.\r\n * @since 0.9.1\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The string value to be split into substrings.\r\n * @param splitter - The object which contains a Symbol.split method, Omitting splitter or passing\r\n * an object that doesn't contain a Symbol.split causes it to return an array with the calling\r\n * string as a single element.\r\n * @param limit - A non-negative integer specifying a limit on the number of substrings to be\r\n * included in the array. If provided, splits the string at each occurrence of the specified\r\n * separator, but stops when limit entries have been placed in the array. Any leftover text is\r\n * not included in the array at all.\r\n * - The array may contain fewer entries than limit if the end of the string is reached before\r\n * the limit is reached.\r\n * - If limit is 0, [] is returned.\r\n * @return An Array of strings, split at each point where the separator occurs in the given string.\r\n * @example\r\n * ```ts\r\n * const splitByNumber = {\r\n *   [getKnownSymbol<typeof Symbol.split>(WellKnownSymbols.split)]: (str: string) => {\r\n *     let num = 1;\r\n *     let pos = 0;\r\n *     const result = [];\r\n *     while (pos < str.length) {\r\n *       const matchPos = strIndexOf(str, asString(num), pos);\r\n *       if (matchPos === -1) {\r\n *         result.push(strSubstring(str, pos));\r\n *         break;\r\n *       }\r\n *       result.push(strSubstring(str, pos, matchPos));\r\n *       pos = matchPos + asString(num).length;\r\n *       num++;\r\n *     }\r\n *     return result;\r\n *   }\r\n * };\r\n *\r\n * const myString = \"a1bc2c5d3e4f\";\r\n * console.log(polyStrSymSplit(myString, splitByNumber)); // [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyStrSymSplit(value: string, splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[] {\r\n    let splitFn: (string: string, limit?: number) => string[] = splitter && splitter[getKnownSymbol(WellKnownSymbols.split)];\r\n    \r\n    return splitFn ? splitFn(value, limit) : [ value ];\r\n}\r\n"]}