{"version":3,"file":"DynamicProto.js","sourceRoot":"","sources":["../src/DynamicProto.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getGlobal, objCreate, objHasOwnProperty, throwTypeError } from \"@nevware21/ts-utils\";\r\n\r\ninterface DynamicGlobalSettings {\r\n    /**\r\n     * Stores the global options which will also be exposed on the runtime global\r\n     */\r\n    o: IDynamicProtoOpts,\r\n\r\n    /**\r\n     * Internal Global used to generate a unique dynamic class name, every new class will increase this value\r\n     * @ignore\r\n     */ \r\n    n: number\r\n};\r\n\r\nconst UNDEFINED = \"undefined\";\r\n\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */ \r\nconst Constructor = 'constructor';\r\n\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */ \r\nconst Prototype = 'prototype';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strFunction = 'function';\r\n\r\n/**\r\n * Used to define the name of the instance function lookup table\r\n * @ignore\r\n */ \r\nconst DynInstFuncTable = '_dynInstFuncs';\r\n \r\n/**\r\n * Name used to tag the dynamic prototype function\r\n * @ignore\r\n */ \r\nconst DynProxyTag = '_isDynProxy';\r\n \r\n/**\r\n * Name added to a prototype to define the dynamic prototype \"class\" name used to lookup the function table\r\n * @ignore\r\n */ \r\nconst DynClassName = '_dynClass';\r\n \r\n/**\r\n * Prefix added to the classname to avoid any name clashes with other instance level properties\r\n * @ignore\r\n */ \r\nconst DynClassNamePrefix = '_dynCls$';\r\n \r\n/**\r\n * A tag which is used to check if we have already to attempted to set the instance function if one is not present\r\n * @ignore\r\n */\r\nconst DynInstChkTag = '_dynInstChk';\r\n \r\n/**\r\n * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same \r\n * tag name as the function level but a different const name for readability only.\r\n */\r\nconst DynAllowInstChkTag = DynInstChkTag;\r\n \r\n/**\r\n * The global (imported) instances where the global performance options are stored\r\n */\r\nconst DynProtoDefaultOptions = '_dfOpts';\r\n \r\n/**\r\n * Value used as the name of a class when it cannot be determined\r\n * @ignore\r\n */ \r\nconst UnknownValue = '_unknown_';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst str__Proto = \"__proto__\";\r\n \r\n/**\r\n * The polyfill version of __proto__ so that it doesn't cause issues for anyone not expecting it to exist\r\n */\r\nconst DynProtoBaseProto = \"_dyn\" + str__Proto;\r\n\r\n/**\r\n * Runtime Global holder for dynamicProto settings\r\n */\r\nconst DynProtoGlobalSettings = \"__dynProto$Gbl\";\r\n\r\n/**\r\n * Track the current prototype for IE8 as you can't look back to get the prototype\r\n */\r\nconst DynProtoCurrent = \"_dynInstProto\";\r\n  \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strUseBaseInst = 'useBaseInst';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strSetInstFuncs = 'setInstFuncs';\r\n \r\nconst Obj = Object;\r\n\r\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\r\nlet _objGetPrototypeOf = Obj[\"getPrototypeOf\"];\r\n\r\n/**\r\n * Pre-lookup to check for the existence of this function\r\n */\r\nlet _objGetOwnProps = Obj[\"getOwnPropertyNames\"];\r\n\r\n// Since 1.1.7 moving these to the runtime global to work around mixed version and module issues\r\n// See Issue https://github.com/microsoft/DynamicProto-JS/issues/57 for details\r\nlet _gbl = getGlobal();\r\nlet _gblInst: DynamicGlobalSettings = _gbl[DynProtoGlobalSettings] || (_gbl[DynProtoGlobalSettings] = {\r\n    o: {\r\n        [strSetInstFuncs]: true,\r\n        [strUseBaseInst]: true\r\n    },\r\n    n: 1000                // Start new global index @ 1000 so we \"fix\" some cases when mixed with 1.1.6 or earlier\r\n});\r\n\r\n/**\r\n * Helper used to check whether the target is an Object prototype or Array prototype\r\n * @ignore\r\n */ \r\nfunction _isObjectOrArrayPrototype(target:any) {\r\n    return target && (target === Obj[Prototype] || target === Array[Prototype]);\r\n}\r\n\r\n/**\r\n * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype\r\n * @ignore\r\n */ \r\nfunction _isObjectArrayOrFunctionPrototype(target:any) {\r\n    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];\r\n}\r\n\r\n/**\r\n * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n * @ignore\r\n */ \r\nfunction _getObjProto(target:any) {\r\n    let newProto;\r\n\r\n    if (target) {\r\n        // This method doesn't exist in older browsers (e.g. IE8)\r\n        if (_objGetPrototypeOf) {\r\n            return _objGetPrototypeOf(target);\r\n        }\r\n\r\n        let curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);\r\n\r\n        // Using the pre-calculated value as IE8 doesn't support looking up the prototype of a prototype and thus fails for more than 1 base class\r\n        newProto = target[DynProtoBaseProto] || curProto;\r\n        if (!objHasOwnProperty(target, DynProtoBaseProto)) {\r\n            // As this prototype doesn't have this property then this is from an inherited class so newProto is the base to return so save it\r\n            // so we can look it up value (which for a multiple hierarchy dynamicProto will be the base class)\r\n            delete target[DynProtoCurrent];     // Delete any current value allocated to this instance so we pick up the value from prototype hierarchy\r\n            newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];\r\n            target[DynProtoCurrent] = curProto;\r\n        }\r\n    }\r\n\r\n    return newProto;\r\n}\r\n\r\n/**\r\n * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6\r\n * are not enumerable.\r\n * @param target \r\n */\r\nfunction _forEachProp(target: any, func: (name: string) => void) {\r\n    let props: string[] = [];\r\n    if (_objGetOwnProps) {\r\n        props = _objGetOwnProps(target);\r\n    } else {\r\n        for (let name in target) {\r\n            if (typeof name === \"string\" && objHasOwnProperty(target, name)) {\r\n                props.push(name);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (props && props.length > 0) {\r\n        for (let lp = 0; lp < props.length; lp++) {\r\n            func(props[lp]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to check whether the provided function name is a potential candidate for dynamic\r\n * callback and prototype generation.\r\n * @param target The target object, may be a prototype or class object\r\n * @param funcName The function name\r\n * @param skipOwn Skips the check for own property\r\n * @ignore\r\n */\r\nfunction _isDynamicCandidate(target:any, funcName:string, skipOwn:boolean) {\r\n    return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || objHasOwnProperty(target, funcName)) && funcName !== str__Proto && funcName !== Prototype);\r\n}\r\n\r\n/**\r\n * Helper to throw a TypeError exception\r\n * @param message the message\r\n * @ignore\r\n */\r\nfunction _throwTypeError(message:string) {\r\n    throwTypeError(\"DynamicProto: \" + message);\r\n}\r\n\r\n/**\r\n * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does \r\n * not return any inherited functions\r\n * @param thisTarget The object to get the instance functions from\r\n * @ignore\r\n */\r\nfunction _getInstanceFuncs(thisTarget:any): any {\r\n    // Get the base proto\r\n    var instFuncs = objCreate(null);\r\n\r\n    // Save any existing instance functions\r\n    _forEachProp(thisTarget, (name) => {\r\n        // Don't include any dynamic prototype instances - as we only want the real functions\r\n        if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {\r\n            // Create an instance callback for passing the base function to the caller\r\n            instFuncs[name] = thisTarget[name];\r\n        }\r\n    });\r\n\r\n    return instFuncs;\r\n}\r\n\r\n/**\r\n * Returns whether the value is included in the array\r\n * @param values The array of values\r\n * @param value  The value\r\n */\r\nfunction _hasVisited(values:any[], value:any) {\r\n    for (let lp = values.length - 1; lp >= 0; lp--) {\r\n        if (values[lp] === value) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Returns an object that contains callback functions for all \"base/super\" functions, this is used to \"save\"\r\n * enabling calling super.xxx() functions without requiring that the base \"class\" has defined a prototype references\r\n * @param target The current instance\r\n * @ignore\r\n */\r\nfunction _getBaseFuncs(classProto:any, thisTarget:any, instFuncs:any, useBaseInst:boolean): any {\r\n    function _instFuncProxy(target:any, funcHost: any,  funcName: string) {\r\n        let theFunc = funcHost[funcName];\r\n        if (theFunc[DynProxyTag] && useBaseInst) {\r\n            // grab and reuse the hosted looking function (if available) otherwise the original passed function\r\n            let instFuncTable = target[DynInstFuncTable] || {};\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;\r\n            }\r\n        }\r\n\r\n        return function() {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return theFunc.apply(target, arguments);\r\n        };\r\n    }\r\n\r\n    // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)\r\n    var baseFuncs = objCreate(null);\r\n    _forEachProp(instFuncs, (name) => {\r\n        // Create an instance callback for passing the base function to the caller\r\n        baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);\r\n    });\r\n    \r\n    // Get the base prototype functions\r\n    var baseProto = _getObjProto(classProto);\r\n    let visited:any[] = [];\r\n\r\n    // Don't include base object functions for Object, Array or Function\r\n    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {\r\n        // look for prototype functions\r\n        _forEachProp(baseProto, (name) => {\r\n            // Don't include any dynamic prototype instances - as we only want the real functions\r\n            // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the \r\n            // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return\r\n            // the Object prototype methods while bypassing the check\r\n            if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {\r\n                // Create an instance callback for passing the base function to the caller\r\n                baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);\r\n            }\r\n        });\r\n\r\n        // We need to find all possible functions that might be overloaded by walking the entire prototype chain\r\n        // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n        // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n        visited.push(baseProto);\r\n        baseProto = _getObjProto(baseProto);\r\n    }\r\n\r\n    return baseFuncs;\r\n}\r\n\r\nfunction _getInstFunc(target: any, funcName: string, proto: any, currentDynProtoProxy: any) {\r\n    let instFunc = null;\r\n\r\n    // We need to check whether the class name is defined directly on this prototype otherwise\r\n    // it will walk the proto chain and return any parent proto classname.\r\n    if (target && objHasOwnProperty(proto, DynClassName)) {\r\n\r\n        let instFuncTable = target[DynInstFuncTable] || objCreate(null);\r\n        instFunc = (instFuncTable[proto[DynClassName]] || objCreate(null))[funcName];\r\n\r\n        if (!instFunc) {\r\n            // Avoid stack overflow from recursive calling the same function\r\n            _throwTypeError(\"Missing [\" + funcName + \"] \" + strFunction);\r\n        }\r\n\r\n        // We have the instance function, lets check it we can speed up further calls\r\n        // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)\r\n        if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {\r\n            // If the instance already has an instance function we can't replace it\r\n            let canAddInst = !objHasOwnProperty(target, funcName);\r\n\r\n            // Get current prototype\r\n            let objProto = _getObjProto(target);\r\n            let visited:any[] = [];\r\n\r\n            // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function\r\n            // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut\r\n            while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {\r\n                let protoFunc = objProto[funcName];\r\n                if (protoFunc) {\r\n                    canAddInst = (protoFunc === currentDynProtoProxy);\r\n                    break;\r\n                }\r\n\r\n                // We need to find all possible initial functions to ensure that we don't bypass a valid override function\r\n                visited.push(objProto);\r\n                objProto = _getObjProto(objProto);\r\n            }\r\n\r\n            try {\r\n                if (canAddInst) {\r\n                    // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version\r\n                    // so it's safe to directly assign for any subsequent calls (for better performance)\r\n                    target[funcName] = instFunc;\r\n                }\r\n\r\n                // Block further attempts to set the instance function for any\r\n                instFunc[DynInstChkTag] = 1;\r\n            } catch (e) {\r\n                // Don't crash if the object is readonly or the runtime doesn't allow changing this\r\n                // And set a flag so we don't try again for any function\r\n                instFuncTable[DynAllowInstChkTag] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return instFunc;\r\n}\r\n\r\nfunction _getProtoFunc(funcName: string, proto: any, currentDynProtoProxy: any) {\r\n    let protoFunc = proto[funcName];\r\n\r\n    // Check that the prototype function is not a self reference -- try to avoid stack overflow!\r\n    if (protoFunc === currentDynProtoProxy) {\r\n        // It is so lookup the base prototype\r\n        protoFunc = _getObjProto(proto)[funcName];\r\n    }\r\n\r\n    if (typeof protoFunc !== strFunction) {\r\n        _throwTypeError(\"[\" + funcName + \"] is not a \" + strFunction);\r\n    }\r\n\r\n    return protoFunc;\r\n}\r\n\r\n/**\r\n * Add the required dynamic prototype methods to the the class prototype\r\n * @param proto - The class prototype\r\n * @param className - The instance classname \r\n * @param target - The target instance\r\n * @param baseInstFuncs - The base instance functions\r\n * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist\r\n * @ignore\r\n */\r\nfunction _populatePrototype(proto:any, className:string, target:any, baseInstFuncs:any, setInstanceFunc:boolean) {\r\n    function _createDynamicPrototype(proto:any, funcName:string) {\r\n        let dynProtoProxy = function() {\r\n            // Use the instance or prototype function\r\n            let instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return instFunc.apply(this, arguments);\r\n        };\r\n        \r\n        // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing\r\n        // via which can dynamically replace the prototype function reference)\r\n        (dynProtoProxy as any)[DynProxyTag] = 1;\r\n        return dynProtoProxy;\r\n    }\r\n    \r\n    if (!_isObjectOrArrayPrototype(proto)) {\r\n        let instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || objCreate(null);\r\n        if (!_isObjectOrArrayPrototype(instFuncTable)) {\r\n            let instFuncs = instFuncTable[className] = (instFuncTable[className] || objCreate(null)); // fetch and assign if as it may not exist yet\r\n\r\n            // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;\r\n            }\r\n\r\n            if (!_isObjectOrArrayPrototype(instFuncs)) {\r\n                _forEachProp(target, (name) => {\r\n                    // Only add overridden functions\r\n                    if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name] ) {\r\n                        // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function\r\n                        instFuncs[name] = target[name];\r\n                        delete target[name];\r\n                        \r\n                        // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one\r\n                        if (!objHasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {\r\n                            proto[name] = _createDynamicPrototype(proto, name);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance\r\n * @param classProto The class prototype instance\r\n * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy\r\n * @ignore\r\n */\r\nfunction _checkPrototype(classProto:any, thisTarget:any) {\r\n    // This method doesn't existing in older browsers (e.g. IE8)\r\n    if (_objGetPrototypeOf) {\r\n        // As this is primarily a coding time check, don't bother checking if running in IE8 or lower\r\n        let visited:any[] = [];\r\n        let thisProto = _getObjProto(thisTarget);\r\n        while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {\r\n            if (thisProto === classProto) {\r\n                return true;\r\n            }\r\n\r\n            // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n            visited.push(thisProto);\r\n            thisProto = _getObjProto(thisProto);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // If objGetPrototypeOf doesn't exist then just assume everything is ok.\r\n    return true;\r\n}\r\n\r\n/**\r\n * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.\r\n * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.\r\n * @param target \r\n * @param unknownValue \r\n * @ignore\r\n */\r\nfunction _getObjName(target:any, unknownValue?:string) {\r\n    if (objHasOwnProperty(target, Prototype)) {\r\n        // Look like a prototype\r\n        return target.name || unknownValue || UnknownValue\r\n    }\r\n\r\n    return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;\r\n}\r\n\r\n/**\r\n * Interface to define additional configuration options to control how the dynamic prototype functions operate.\r\n */\r\nexport interface IDynamicProtoOpts {\r\n\r\n    /**\r\n     * Should the dynamic prototype attempt to set an instance function for instances that do not already have an\r\n     * function of the same name or have been extended by a class with a (non-dynamic proto) prototype function.\r\n     */\r\n    setInstFuncs: boolean,\r\n\r\n    /**\r\n     * When looking for base (super) functions if it finds a dynamic proto instances can it use the instance functions\r\n     * and bypass the prototype lookups. Defaults to true.\r\n     */\r\n    useBaseInst?: boolean\r\n}\r\n\r\n/**\r\n * The delegate signature for the function used as the callback for dynamicProto() \r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid for the proxy instance, even \r\n * though it is only a proxy that only contains the functions \r\n * @param theTarget This is the real \"this\" of the current target object\r\n * @param baseFuncProxy The is a proxy object which ONLY contains this function that existed on the \"this\" instance before\r\n * calling dynamicProto, it does NOT contain properties of this. This is basically equivalent to using the \"super\" keyword.\r\n */\r\nexport type DynamicProtoDelegate<DPType> = (theTarget:DPType, baseFuncProxy?:DPType) => void;\r\n\r\n/**\r\n * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-\r\n * - Saves references to all defined base class functions\r\n * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all \"super\" functions.\r\n * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.\r\n * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is \r\n * passed both the target \"this\" and an object that can be used to call any base (super) functions, using this based object in place of\r\n * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct \"this\"\r\n * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions\r\n * defined in the constructor or some other function (rather than declared as complete typescript functions).\r\n * ### Usage\r\n * ```typescript\r\n * import dynamicProto from \"@microsoft/dynamicproto-js\";\r\n * class ExampleClass extends BaseClass {\r\n *     constructor() {\r\n *         dynamicProto(ExampleClass, this, (_self, base) => {\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.newFunc = () => {\r\n *                 // Access any \"this\" instance property  \r\n *                 if (_self.someProperty) {\r\n *                     ...\r\n *                 }\r\n *             }\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.myFunction = () => {\r\n *                 // Access any \"this\" instance property\r\n *                 if (_self.someProperty) {\r\n *                     // Call the base version of the function that we are overriding\r\n *                     base.myFunction();\r\n *                 }\r\n *                 ...\r\n *             }\r\n *             _self.initialize = () => {\r\n *                 ...\r\n *             }\r\n *             // Warnings: While the following will work as _self is simply a reference to\r\n *             // this, if anyone overrides myFunction() the overridden will be called first\r\n *             // as the normal JavaScript method resolution will occur and the defined\r\n *             // _self.initialize() function is actually gets removed from the instance and\r\n *             // a proxy prototype version is created to reference the created method.\r\n *             _self.initialize();\r\n *         });\r\n *     }\r\n * }\r\n * ```\r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid\r\n * @typeparam DPCls The type that contains the prototype of the current class\r\n * @param theClass - This is the current class instance which contains the prototype for the current class\r\n * @param target - The current \"this\" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.\r\n * @param delegateFunc - The callback function (closure) that will create the dynamic function\r\n * @param options - Additional options to configure how the dynamic prototype operates\r\n */\r\nexport default function dynamicProto<DPType, DPCls>(theClass:DPCls, target:DPType, delegateFunc: DynamicProtoDelegate<DPType>, options?:IDynamicProtoOpts): void {\r\n    // Make sure that the passed theClass argument looks correct\r\n    if (!objHasOwnProperty(theClass, Prototype)) {\r\n        _throwTypeError(\"theClass is an invalid class definition.\");\r\n    }\r\n\r\n    // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)\r\n    let classProto = theClass[Prototype];\r\n    if (!_checkPrototype(classProto, target)) {\r\n        _throwTypeError(\"[\" + _getObjName(theClass) + \"] not in hierarchy of [\" + _getObjName(target) + \"]\");\r\n    }\r\n\r\n    let className = null;\r\n    if (objHasOwnProperty(classProto, DynClassName)) {\r\n        // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)\r\n        className = classProto[DynClassName];\r\n    } else {\r\n        // As not all browser support name on the prototype creating a unique dynamic one if we have not already\r\n        // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance\r\n        // function table lookup.\r\n        className = DynClassNamePrefix + _getObjName(theClass, \"_\") + \"$\" + _gblInst.n ;\r\n        _gblInst.n++;\r\n        classProto[DynClassName] = className;\r\n    }\r\n\r\n    let perfOptions = dynamicProto[DynProtoDefaultOptions];\r\n    let useBaseInst = !!perfOptions[strUseBaseInst];\r\n    if (useBaseInst && options && options[strUseBaseInst] !== undefined) {\r\n        useBaseInst = !!options[strUseBaseInst];\r\n    }\r\n\r\n    // Get the current instance functions\r\n    let instFuncs = _getInstanceFuncs(target);\r\n\r\n    // Get all of the functions for any base instance (before they are potentially overridden)\r\n    let baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);\r\n\r\n    // Execute the delegate passing in both the current target \"this\" and \"base\" function references\r\n    // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support\r\n    delegateFunc(target, baseFuncs as DPType);\r\n\r\n    // Don't allow setting instance functions for older IE instances\r\n    let setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];\r\n    if (setInstanceFunc && options) {\r\n        setInstanceFunc = !!options[strSetInstFuncs];\r\n    }\r\n\r\n    // Populate the Prototype for any overridden instance functions\r\n    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);\r\n}\r\n\r\n/**\r\n * Exposes the default global options to allow global configuration, if the global values are disabled these will override\r\n * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose\r\n * their internal usage of dynamic proto.\r\n */\r\ndynamicProto[DynProtoDefaultOptions] = _gblInst.o;\r\n"]}