{"version":3,"file":"AISku.js.map","sources":["AISku.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a, _b, _c;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPlugin } from \"@microsoft/applicationinsights-analytics-js\";\r\nimport { CfgSyncPlugin } from \"@microsoft/applicationinsights-cfgsync-js\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { AnalyticsPluginIdentifier, DEFAULT_BREEZE_PATH, PropertiesPluginIdentifier, ThrottleMgr, parseConnectionString } from \"@microsoft/applicationinsights-common\";\r\nimport { AppInsightsCore, _throwInternal, addPageHideEventListener, addPageUnloadEventListener, cfgDfMerge, cfgDfValidate, createDynamicConfig, createProcessTelemetryContext, createUniqueNamespace, doPerf, hasDocument, hasWindow, isArray, isFeatureEnabled, isFunction, isNullOrUndefined, isReactNative, isString, mergeEvtNamespace, onConfigChange, proxyAssign, proxyFunctions, removePageHideEventListener, removePageUnloadEventListener } from \"@microsoft/applicationinsights-core-js\";\r\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\r\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\r\nimport { createPromise } from \"@nevware21/ts-async\";\r\nimport { arrForEach, arrIndexOf, objDefine, objForEachKey, strIndexOf, throwUnsupported } from \"@nevware21/ts-utils\";\r\nimport { STR_ADD_TELEMETRY_INITIALIZER, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_EVT_NAMESPACE, STR_FLUSH, STR_GET_COOKIE_MGR, STR_GET_PLUGIN, STR_POLL_INTERNAL_LOGS, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\r\nimport { _DYN_ADD_HOUSEKEEPING_BEF0, _DYN_CONNECTION_STRING, _DYN_CONTEXT, _DYN_ENDPOINT_URL, _DYN_INSTRUMENTATION_KEY, _DYN_ONUNLOAD_FLUSH, _DYN_QUEUE, _DYN_SEND_MESSAGE, _DYN_UPDATE_SNIPPET_DEFIN1, _DYN_VERSION } from \"./__DynamicConstants\";\r\nvar _internalSdkSrc;\r\n// This is an exclude list of properties that should not be updated during initialization\r\n// They include a combination of private and internal property names\r\nvar _ignoreUpdateSnippetProperties = [\r\n    STR_SNIPPET, \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"\r\n];\r\nvar IKEY_USAGE = \"iKeyUsage\";\r\nvar CDN_USAGE = \"CdnUsage\";\r\nvar SDK_LOADER_VER = \"SdkLoaderVer\";\r\nvar UNDEFINED_VALUE = undefined;\r\nvar default_limit = {\r\n    samplingRate: 100,\r\n    maxSendNumber: 1\r\n};\r\nvar default_interval = {\r\n    monthInterval: 3,\r\n    daysOfMonth: [28]\r\n};\r\nvar default_throttle_config = {\r\n    disabled: true,\r\n    limit: cfgDfMerge(default_limit),\r\n    interval: cfgDfMerge(default_interval)\r\n};\r\n// We need to include all properties that we only reference that we want to be dynamically updatable here\r\n// So they are converted even when not specified in the passed configuration\r\nvar defaultConfigValues = (_a = {},\r\n    _a[_DYN_CONNECTION_STRING /* @min:connectionString */] = UNDEFINED_VALUE,\r\n    _a[_DYN_ENDPOINT_URL /* @min:endpointUrl */] = UNDEFINED_VALUE,\r\n    _a[_DYN_INSTRUMENTATION_KEY /* @min:instrumentationKey */] = UNDEFINED_VALUE,\r\n    _a.diagnosticLogInterval = cfgDfValidate(_chkDiagLevel, 10000),\r\n    _a.featureOptIn = (_b = {},\r\n        _b[IKEY_USAGE] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b[CDN_USAGE] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b[SDK_LOADER_VER] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b),\r\n    _a.throttleMgrCfg = cfgDfMerge((_c = {},\r\n        _c[109 /* _eInternalMessageId.DefaultThrottleMsgKey */] = cfgDfMerge(default_throttle_config),\r\n        _c[106 /* _eInternalMessageId.InstrumentationKeyDeprecation */] = cfgDfMerge(default_throttle_config),\r\n        _c[111 /* _eInternalMessageId.SdkLdrUpdate */] = cfgDfMerge(default_throttle_config),\r\n        _c[110 /* _eInternalMessageId.CdnDeprecation */] = cfgDfMerge(default_throttle_config),\r\n        _c)),\r\n    _a);\r\nfunction _chkDiagLevel(value) {\r\n    // Make sure we have a value > 0\r\n    return value && value > 0;\r\n}\r\n/**\r\n * Application Insights API\r\n * @group Entrypoint\r\n * @group Classes\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\r\nvar AppInsightsSku = /** @class */ (function () {\r\n    function AppInsightsSku(snippet) {\r\n        var _this = this;\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var dependencies;\r\n        var properties;\r\n        var _sender;\r\n        var _snippetVersion;\r\n        var _evtNamespace;\r\n        var _houseKeepingNamespace;\r\n        var _core;\r\n        var _config;\r\n        var _analyticsPlugin;\r\n        var _cfgSyncPlugin;\r\n        var _throttleMgr;\r\n        var _iKeySentMessage;\r\n        var _cdnSentMessage;\r\n        var _sdkVerSentMessage;\r\n        dynamicProto(AppInsightsSku, this, function (_self) {\r\n            _initDefaults();\r\n            objDefine(_self, \"config\", {\r\n                g: function () {\r\n                    return _config;\r\n                }\r\n            });\r\n            arrForEach([\"pluginVersionStringArr\", \"pluginVersionString\"], function (key) {\r\n                objDefine(_self, key, {\r\n                    g: function () {\r\n                        if (_core) {\r\n                            return _core[key];\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            });\r\n            // initialize the queue and config in case they are undefined\r\n            _snippetVersion = \"\" + (snippet.sv || snippet[_DYN_VERSION /* @min:%2eversion */] || \"\");\r\n            snippet[_DYN_QUEUE /* @min:%2equeue */] = snippet[_DYN_QUEUE /* @min:%2equeue */] || [];\r\n            snippet[_DYN_VERSION /* @min:%2eversion */] = snippet[_DYN_VERSION /* @min:%2eversion */] || 2.0; // Default to new version\r\n            var cfgHandler = createDynamicConfig(snippet.config || {}, defaultConfigValues);\r\n            _config = cfgHandler.cfg;\r\n            _analyticsPlugin = new AnalyticsPlugin();\r\n            objDefine(_self, \"appInsights\", {\r\n                g: function () {\r\n                    return _analyticsPlugin;\r\n                }\r\n            });\r\n            properties = new PropertiesPlugin();\r\n            dependencies = new DependenciesPlugin();\r\n            _sender = new Sender();\r\n            _core = new AppInsightsCore();\r\n            objDefine(_self, \"core\", {\r\n                g: function () {\r\n                    return _core;\r\n                }\r\n            });\r\n            // Will get recalled if any referenced values are changed\r\n            _addUnloadHook(onConfigChange(cfgHandler, function () {\r\n                if (_config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */]) {\r\n                    var cs = parseConnectionString(_config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */]);\r\n                    var ingest = cs.ingestionendpoint;\r\n                    _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = ingest ? (ingest + DEFAULT_BREEZE_PATH) : _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */]; // only add /v2/track when from connectionstring\r\n                    _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = cs.instrumentationkey || _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                }\r\n            }));\r\n            _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\r\n            _self[STR_FLUSH /* @min:%2eflush */] = function (async, callBack) {\r\n                if (async === void 0) { async = true; }\r\n                var result;\r\n                doPerf(_core, function () { return \"AISKU.flush\"; }, function () {\r\n                    if (async && !callBack) {\r\n                        result = createPromise(function (resolve) {\r\n                            callBack = resolve;\r\n                        });\r\n                    }\r\n                    var waiting = 1;\r\n                    var flushDone = function () {\r\n                        waiting--;\r\n                        if (waiting === 0) {\r\n                            callBack();\r\n                        }\r\n                    };\r\n                    arrForEach(_core.getChannels(), function (channel) {\r\n                        if (channel) {\r\n                            waiting++;\r\n                            channel[STR_FLUSH /* @min:%2eflush */](async, flushDone);\r\n                        }\r\n                    });\r\n                    // decrement the initial \"waiting\"\r\n                    flushDone();\r\n                }, null, async);\r\n                return result;\r\n            };\r\n            _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */] = function (async) {\r\n                if (async === void 0) { async = true; }\r\n                arrForEach(_core.getChannels(), function (channel) {\r\n                    if (channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]) {\r\n                        channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]();\r\n                    }\r\n                    else {\r\n                        channel[STR_FLUSH /* @min:%2eflush */](async);\r\n                    }\r\n                });\r\n            };\r\n            _self.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n                if (legacyMode === void 0) { legacyMode = false; }\r\n                if (legacyMode) {\r\n                    throwUnsupported(\"Legacy Mode is no longer supported\");\r\n                }\r\n                function _updateSnippetProperties(snippet) {\r\n                    if (snippet) {\r\n                        var snippetVer = \"\";\r\n                        if (!isNullOrUndefined(_snippetVersion)) {\r\n                            snippetVer += _snippetVersion;\r\n                        }\r\n                        if (_self[_DYN_CONTEXT /* @min:%2econtext */] && _self[_DYN_CONTEXT /* @min:%2econtext */].internal) {\r\n                            _self[_DYN_CONTEXT /* @min:%2econtext */].internal.snippetVer = snippetVer || \"-\";\r\n                        }\r\n                        // apply updated properties to the global instance (snippet)\r\n                        objForEachKey(_self, function (field, value) {\r\n                            if (isString(field) &&\r\n                                !isFunction(value) &&\r\n                                field && field[0] !== \"_\" && // Don't copy \"internal\" values\r\n                                arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {\r\n                                if (snippet[field] !== value) {\r\n                                    snippet[field] = value;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                doPerf(_self.core, function () { return \"AISKU.loadAppInsights\"; }, function () {\r\n                    // initialize core\r\n                    _core.initialize(_config, [_sender, properties, dependencies, _analyticsPlugin, _cfgSyncPlugin], logger, notificationManager);\r\n                    objDefine(_self, \"context\", {\r\n                        g: function () { return properties[_DYN_CONTEXT /* @min:%2econtext */]; }\r\n                    });\r\n                    if (!_throttleMgr) {\r\n                        _throttleMgr = new ThrottleMgr(_core);\r\n                    }\r\n                    var sdkSrc = _findSdkSourceFile();\r\n                    if (sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */]) {\r\n                        _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc = sdkSrc;\r\n                    }\r\n                    _updateSnippetProperties(_self[STR_SNIPPET /* @min:%2esnippet */]);\r\n                    // Empty queue of all api calls logged prior to sdk download\r\n                    _self.emptyQueue();\r\n                    _self[STR_POLL_INTERNAL_LOGS /* @min:%2epollInternalLogs */]();\r\n                    _self[_DYN_ADD_HOUSEKEEPING_BEF0 /* @min:%2eaddHousekeepingBeforeUnload */](_self);\r\n                    _addUnloadHook(onConfigChange(cfgHandler, function () {\r\n                        var defaultEnable = false;\r\n                        if (_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */]) {\r\n                            defaultEnable = !_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */].disabled;\r\n                        }\r\n                        if (!_throttleMgr.isReady() && _config.extensionConfig && _config.extensionConfig[_cfgSyncPlugin.identifier] && defaultEnable) {\r\n                            // set ready state to true will automatically trigger flush()\r\n                            _throttleMgr.onReadyState(true);\r\n                        }\r\n                        var result;\r\n                        if (!_iKeySentMessage && !_config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] && isFeatureEnabled(IKEY_USAGE, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](106 /* _eInternalMessageId.InstrumentationKeyDeprecation */, \"See Instrumentation key support at aka.ms/IkeyMigrate\");\r\n                            _iKeySentMessage = true;\r\n                        }\r\n                        if (!_cdnSentMessage && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc.indexOf(\"az416426\") != -1 && isFeatureEnabled(CDN_USAGE, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](110 /* _eInternalMessageId.CdnDeprecation */, \"See Cdn support notice at aka.ms/JsActiveCdn\");\r\n                            _cdnSentMessage = true;\r\n                        }\r\n                        if (!_sdkVerSentMessage && parseInt(_snippetVersion) < 6 && isFeatureEnabled(SDK_LOADER_VER, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](111 /* _eInternalMessageId.SdkLdrUpdate */, \"An updated Sdk Loader is available, see aka.ms/SnippetVer\");\r\n                            _sdkVerSentMessage = true;\r\n                        }\r\n                    }));\r\n                });\r\n                return _self;\r\n            };\r\n            _self[_DYN_UPDATE_SNIPPET_DEFIN1 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\r\n                // apply full appInsights to the global instance\r\n                // Note: This must be called before loadAppInsights is called\r\n                proxyAssign(snippet, _self, function (name) {\r\n                    // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\r\n                    return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\r\n                });\r\n            };\r\n            _self.emptyQueue = function () {\r\n                // call functions that were queued before the main script was loaded\r\n                try {\r\n                    if (isArray(_self.snippet[_DYN_QUEUE /* @min:%2equeue */])) {\r\n                        // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                        var length_1 = _self.snippet[_DYN_QUEUE /* @min:%2equeue */].length;\r\n                        for (var i = 0; i < length_1; i++) {\r\n                            var call = _self.snippet[_DYN_QUEUE /* @min:%2equeue */][i];\r\n                            call();\r\n                        }\r\n                        _self.snippet[_DYN_QUEUE /* @min:%2equeue */] = undefined;\r\n                        delete _self.snippet[_DYN_QUEUE /* @min:%2equeue */];\r\n                    }\r\n                }\r\n                catch (exception) {\r\n                    var properties_1 = {};\r\n                    if (exception && isFunction(exception.toString)) {\r\n                        properties_1.exception = exception.toString();\r\n                    }\r\n                    // need from core\r\n                    // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n                    //     eLoggingSeverity.WARNING,\r\n                    //     _eInternalMessageId.FailedToSendQueuedTelemetry,\r\n                    //     \"Failed to send queued telemetry\",\r\n                    //     properties);\r\n                }\r\n            };\r\n            _self[_DYN_ADD_HOUSEKEEPING_BEF0 /* @min:%2eaddHousekeepingBeforeUnload */] = function (appInsightsInstance) {\r\n                // Add callback to push events when the user navigates away\r\n                if (hasWindow() || hasDocument()) {\r\n                    var performHousekeeping_1 = function () {\r\n                        // Adds the ability to flush all data before the page unloads.\r\n                        // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\r\n                        // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                        // Telemetry here will help us analyze how effective this approach is.\r\n                        // Another approach would be to make this call sync with a acceptable timeout to reduce the\r\n                        // impact on user experience.\r\n                        // appInsightsInstance.context._sender.triggerSend();\r\n                        appInsightsInstance[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](false);\r\n                        // Back up the current session to local storage\r\n                        // This lets us close expired sessions after the cookies themselves expire\r\n                        if (isFunction(_self.core[STR_GET_PLUGIN /* @min:%2egetPlugin */])) {\r\n                            var loadedPlugin = _this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */](PropertiesPluginIdentifier);\r\n                            if (loadedPlugin) {\r\n                                var propertiesPlugin = loadedPlugin.plugin;\r\n                                if (propertiesPlugin && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */] && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager) {\r\n                                    propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager.backup();\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    var added_1 = false;\r\n                    if (!_houseKeepingNamespace) {\r\n                        _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */] && _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */]());\r\n                    }\r\n                    // Will be recalled if any referenced config properties change\r\n                    _addUnloadHook(onConfigChange(_config, function (details) {\r\n                        var coreConfig = details.cfg;\r\n                        var analyticsPlugin = appInsightsInstance.appInsights;\r\n                        var ctx = createProcessTelemetryContext(null, coreConfig, analyticsPlugin.core);\r\n                        var extConfig = ctx.getExtCfg(analyticsPlugin.identifier || AnalyticsPluginIdentifier);\r\n                        // As we could get recalled, remove any previously registered event handlers first\r\n                        _removePageEventHandlers();\r\n                        var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents;\r\n                        if (!extConfig.disableFlushOnBeforeUnload) {\r\n                            // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n                            // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n                            if (addPageUnloadEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                                added_1 = true;\r\n                            }\r\n                            // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\r\n                            if (addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                                added_1 = true;\r\n                            }\r\n                            // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\r\n                            // log the failure in this case\r\n                            if (!added_1 && !isReactNative()) {\r\n                                _throwInternal(_core.logger, 1 /* eLoggingSeverity.CRITICAL */, 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */, \"Could not add handler for beforeunload and pagehide\");\r\n                            }\r\n                        }\r\n                        if (!added_1 && !extConfig.disableFlushOnUnload) {\r\n                            // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\r\n                            addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace);\r\n                        }\r\n                    }));\r\n                }\r\n            };\r\n            _self.getSender = function () {\r\n                return _sender;\r\n            };\r\n            _self.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n                var unloadDone = false;\r\n                var result;\r\n                if (isAsync && !unloadComplete) {\r\n                    result = createPromise(function (resolve) {\r\n                        // Set the callback to the promise resolve callback\r\n                        unloadComplete = resolve;\r\n                    });\r\n                }\r\n                function _unloadCallback(unloadState) {\r\n                    if (!unloadDone) {\r\n                        unloadDone = true;\r\n                        _initDefaults();\r\n                        unloadComplete && unloadComplete(unloadState);\r\n                    }\r\n                }\r\n                _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](isAsync);\r\n                _removePageEventHandlers();\r\n                _core.unload && _core.unload(isAsync, _unloadCallback, cbTimeout);\r\n                return result;\r\n            };\r\n            proxyFunctions(_self, _analyticsPlugin, [\r\n                STR_GET_COOKIE_MGR,\r\n                STR_TRACK_EVENT,\r\n                STR_TRACK_PAGE_VIEW,\r\n                \"trackPageViewPerformance\",\r\n                STR_TRACK_EXCEPTION,\r\n                \"_onerror\",\r\n                STR_TRACK_TRACE,\r\n                STR_TRACK_METRIC,\r\n                STR_START_TRACK_PAGE,\r\n                STR_STOP_TRACK_PAGE,\r\n                STR_START_TRACK_EVENT,\r\n                STR_STOP_TRACK_EVENT\r\n            ]);\r\n            proxyFunctions(_self, _getCurrentDependencies, [\r\n                STR_TRACK_DEPENDENCY_DATA,\r\n                \"addDependencyListener\",\r\n                \"addDependencyInitializer\"\r\n            ]);\r\n            proxyFunctions(_self, _core, [\r\n                STR_ADD_TELEMETRY_INITIALIZER,\r\n                STR_POLL_INTERNAL_LOGS,\r\n                \"stopPollingInternalLogs\",\r\n                STR_GET_PLUGIN,\r\n                \"addPlugin\",\r\n                STR_EVT_NAMESPACE,\r\n                \"addUnloadCb\",\r\n                \"getTraceCtx\",\r\n                \"updateCfg\",\r\n                \"onCfgChange\"\r\n            ]);\r\n            proxyFunctions(_self, function () {\r\n                var context = properties[_DYN_CONTEXT /* @min:%2econtext */];\r\n                return context ? context.user : null;\r\n            }, [\r\n                STR_SET_AUTHENTICATED_USER_CONTEXT,\r\n                STR_CLEAR_AUTHENTICATED_USER_CONTEXT\r\n            ]);\r\n            // Using a function to support the dynamic adding / removal of plugins, so this will always return the current value\r\n            function _getCurrentDependencies() {\r\n                return dependencies;\r\n            }\r\n            function _initDefaults() {\r\n                _evtNamespace = createUniqueNamespace(\"AISKU\");\r\n                _houseKeepingNamespace = null;\r\n                dependencies = null;\r\n                properties = null;\r\n                _sender = null;\r\n                _snippetVersion = null;\r\n                _throttleMgr = null;\r\n                _iKeySentMessage = false;\r\n                _cdnSentMessage = false;\r\n                _sdkVerSentMessage = false;\r\n                _cfgSyncPlugin = new CfgSyncPlugin();\r\n            }\r\n            function _removePageEventHandlers() {\r\n                // Remove any registered event handlers\r\n                if (_houseKeepingNamespace) {\r\n                    removePageUnloadEventListener(null, _houseKeepingNamespace);\r\n                    removePageHideEventListener(null, _houseKeepingNamespace);\r\n                }\r\n            }\r\n            function _addUnloadHook(hooks) {\r\n                _core.addUnloadHook(hooks);\r\n            }\r\n        });\r\n    }\r\n    // Analytics Plugin\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AppInsightsSku.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param event\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page, or similar container was displayed to the user.\r\n     * @param pageView\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackPageView = function (pageView) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a bag of performance information via the customProperties field.\r\n     * @param pageViewPerformance\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackPageViewPerformance = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception that you have caught.\r\n     * @param exception\r\n     * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually send uncaught exception telemetry. This method is automatically triggered\r\n     * on a window.onerror event.\r\n     * @param exception\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a diagnostic scenario such entering or leaving a function.\r\n     * @param trace\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used\r\n     * to send regular reports of performance indicators.\r\n     *\r\n     * To send a single measurement, just use the `name` and `average` fields\r\n     * of {@link IMetricTelemetry}.\r\n     *\r\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\r\n     * aggregating multiple measurements and sending the resulting average and modifying\r\n     * the `sampleCount` field of {@link IMetricTelemetry}.\r\n     * @param metric - input object argument. Only `name` and `average` are mandatory.\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AppInsightsSku.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AppInsightsSku.prototype.stopTrackPage = function (name, url, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AppInsightsSku.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    // Properties Plugin\r\n    /**\r\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\r\n     *\r\n     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`\r\n     * @param authenticatedUserId\r\n     * @param [accountId]\r\n     * @param [storeInCookie=false]\r\n     */\r\n    AppInsightsSku.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\r\n     */\r\n    AppInsightsSku.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Dependencies Plugin\r\n    /**\r\n     * Log a dependency call (e.g. ajax)\r\n     * @param dependency\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackDependencyData = function (dependency) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Misc\r\n    /**\r\n     * Attempt to flush data immediately; If executing asynchronously (the default) and\r\n     * you DO NOT pass a callback function then a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the flush is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param async - send data asynchronously when true\r\n     * @param callBack - if specified, notify caller when send is complete, the channel should return true to indicate to the caller that it will be called.\r\n     * If the caller doesn't return true the caller should assume that it may never be called.\r\n     * @returns - If a callback is provided `true` to indicate that callback will be called after the flush is complete otherwise the caller\r\n     * should assume that any provided callback will never be called, Nothing or if occurring asynchronously a\r\n     * [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) which will be resolved once the unload is complete,\r\n     * the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) will only be returned when no callback is provided\r\n     * and async is true.\r\n     */\r\n    AppInsightsSku.prototype.flush = function (async, callBack) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\r\n     * Fall back to xhr sender if beacon is not supported.\r\n     * @param [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.onunloadFlush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     * @returns {IApplicationInsights}\r\n     * @memberof Initialization\r\n     * @param legacyMode - MUST always be false, it is no longer supported from v3.x onwards\r\n     */\r\n    AppInsightsSku.prototype.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n        if (legacyMode === void 0) { legacyMode = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Overwrite the lazy loaded fields of global window snippet to contain the\r\n     * actual initialized API methods\r\n     * @param snippet\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Call any functions that were queued before the main script was loaded\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.emptyQueue = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.pollInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.stopPollingInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.getSender = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Unload and Tear down the SDK and any initialized plugins, after calling this the SDK will be considered\r\n     * to be un-initialized and non-operational, re-initializing the SDK should only be attempted if the previous\r\n     * unload call return `true` stating that all plugins reported that they also unloaded, the recommended\r\n     * approach is to create a new instance and initialize that instance.\r\n     * This is due to possible unexpected side effects caused by plugins not supporting unload / teardown, unable\r\n     * to successfully remove any global references or they may just be completing the unload process asynchronously.\r\n     * If you pass isAsync as true and do not provide\r\n     * If you pass isAsync as `true` (also the default) and DO NOT pass a callback function then an [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the unload is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param isAsync - Can the unload be performed asynchronously (default)\r\n     * @param unloadComplete - An optional callback that will be called once the unload has completed\r\n     * @param cbTimeout - An optional timeout to wait for any flush operations to complete before proceeding with the\r\n     * unload. Defaults to 5 seconds.\r\n     * @return Nothing or if occurring asynchronously a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * which will be resolved once the unload is complete, the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will only be returned when no callback is provided and isAsync is true\r\n     */\r\n    AppInsightsSku.prototype.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AppInsightsSku.prototype.getPlugin = function (pluginIdentifier) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add a new plugin to the installation\r\n     * @param plugin - The new plugin to add\r\n     * @param replaceExisting - should any existing plugin be replaced, default is false\r\n     * @param doAsync - Should the add be performed asynchronously\r\n     * @param addCb - [Optional] callback to call after the plugin has been added\r\n     */\r\n    AppInsightsSku.prototype.addPlugin = function (plugin, replaceExisting, doAsync, addCb) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Update the configuration used and broadcast the changes to all loaded plugins\r\n     * @param newConfig - The new configuration is apply\r\n     * @param mergeExisting - Should the new configuration merge with the existing or just replace it. Default is to merge.\r\n     */\r\n    AppInsightsSku.prototype.updateCfg = function (newConfig, mergeExisting) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Returns the unique event namespace that should be used\r\n     */\r\n    AppInsightsSku.prototype.evtNamespace = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    AppInsightsSku.prototype.addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers. (added in v2.8.4)\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    AppInsightsSku.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    AppInsightsSku.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets the current distributed trace context for this instance if available\r\n     */\r\n    AppInsightsSku.prototype.getTraceCtx = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Watches and tracks changes for accesses to the current config, and if the accessed config changes the\r\n     * handler will be recalled.\r\n     * @param handler\r\n     * @returns A watcher handler instance that can be used to remove itself when being unloaded\r\n     */\r\n    AppInsightsSku.prototype.onCfgChange = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return AppInsightsSku;\r\n}());\r\nexport { AppInsightsSku };\r\n// tslint:disable-next-line\r\nexport function _findSdkSourceFile() {\r\n    if (_internalSdkSrc) {\r\n        // Use the cached value\r\n        return _internalSdkSrc;\r\n    }\r\n    var sdkSrc = null;\r\n    var isModule = false;\r\n    var cdns = [\r\n        \"://js.monitor.azure.com/\",\r\n        \"://az416426.vo.msecnd.net/\"\r\n    ];\r\n    try {\r\n        // Try and determine whether the sdk is being loaded from the CDN\r\n        // currentScript is only valid during initial processing\r\n        var scrpt = (document || {}).currentScript;\r\n        if (scrpt) {\r\n            sdkSrc = scrpt.src;\r\n            // } else {\r\n            //     // We need to update to at least typescript 2.9 for this to work :-(\r\n            //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\r\n            //     let meta = import.meta;\r\n            //     sdkSrc = (meta || {}).url;\r\n            //     isModule = true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    if (sdkSrc) {\r\n        try {\r\n            var url_1 = sdkSrc.toLowerCase();\r\n            if (url_1) {\r\n                var src_1 = \"\";\r\n                arrForEach(cdns, function (value, idx) {\r\n                    if (strIndexOf(url_1, value) !== -1) {\r\n                        src_1 = \"cdn\" + (idx + 1);\r\n                        if (strIndexOf(url_1, \"/scripts/\") === -1) {\r\n                            if (strIndexOf(url_1, \"/next/\") !== -1) {\r\n                                src_1 += \"-next\";\r\n                            }\r\n                            else if (strIndexOf(url_1, \"/beta/\") !== -1) {\r\n                                src_1 += \"-beta\";\r\n                            }\r\n                        }\r\n                        _internalSdkSrc = src_1 + (isModule ? \".mod\" : \"\");\r\n                        return -1;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n        // Cache the found value so we don't have to look it up again\r\n        _internalSdkSrc = sdkSrc;\r\n    }\r\n    return _internalSdkSrc;\r\n}\r\n//# sourceMappingURL=AISku.js.map"],"names":[],"mappings":";;;;AAA4D;AAC1B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;qEA+GM;AACN;AACA;2EAiBM;AACN;AACA,iEAOM;AACN;AACA;;;;;;;;;;;;;;;mEAgBM;AACN;AAuHO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;yDAgBM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}